<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Á≠ÜË®òÂ∑•‰ΩúÁÆ°ÁêÜÁ≥ªÁµ±</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f5f5f5;
            --text-primary: #1a1a1a;
            --text-secondary: #666666;
            --accent: #c9a96e;
            --accent-hover: #b8975a;
            --border: #e0e0e0;
            --shadow: rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        [data-theme="dark"] {
            --bg-primary: #1a1a1a;
            --bg-secondary: #2a2a2a;
            --text-primary: #ffffff;
            --text-secondary: #b0b0b0;
            --accent: #d4af37;
            --accent-hover: #c9a96e;
            --border: #333333;
            --shadow: rgba(0, 0, 0, 0.3);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
            transition: var(--transition);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid var(--border);
            margin-bottom: 30px;
        }

        .date-display {
            font-size: 1.8rem;
            font-weight: 300;
            letter-spacing: -0.02em;
        }

        .theme-toggle {
            background: var(--accent);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 500;
        }

        .theme-toggle:hover {
            background: var(--accent-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px var(--shadow);
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }

        .tab {
            padding: 12px 24px;
            background: var(--bg-secondary);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 500;
        }

        .tab.active {
            background: var(--accent);
            color: white;
        }

        .tab:hover:not(.active) {
            background: var(--border);
        }

        .content-section {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .content-section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-secondary);
            font-weight: 500;
        }

        input, textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border);
            border-radius: 8px;
            background: var(--bg-primary);
            color: var(--text-primary);
            transition: var(--transition);
        }

        input:focus, textarea:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 3px rgba(201, 169, 110, 0.1);
        }

        textarea {
            resize: vertical;
            min-height: 100px;
        }

        .btn {
            background: var(--accent);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 500;
            margin-right: 10px;
        }

        .btn:hover {
            background: var(--accent-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px var(--shadow);
        }

        .search-box {
            margin-bottom: 20px;
        }

        .search-box input {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border);
            border-radius: 8px;
            background: var(--bg-primary);
            color: var(--text-primary);
        }

        .note-card {
            background: var(--bg-secondary);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            transition: var(--transition);
            cursor: pointer;
        }

        .note-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 24px var(--shadow);
        }

        .note-date {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: 8px;
        }

        .note-category {
            display: inline-block;
            background: var(--accent);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-bottom: 10px;
        }

        .desktop-card {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--bg-secondary);
            border-radius: 12px;
            padding: 15px;
            box-shadow: 0 4px 20px var(--shadow);
            max-width: 300px;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        .desktop-card .note-date {
            font-weight: 500;
            margin-bottom: 5px;
        }

        .desktop-card .note-content {
            font-size: 0.9rem;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .desktop-card .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 18px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 2000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--bg-primary);
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-secondary);
        }

        .export-import-buttons {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1 class="date-display" id="currentDate"></h1>
            <button class="theme-toggle" id="themeToggle">üåô Ê∑±Ëâ≤Ê®°Âºè</button>
        </header>

        <div class="tabs">
            <button class="tab active" data-tab="notes">üìù Á≠ÜË®ò</button>
            <button class="tab" data-tab="work">üíº Â∑•‰ΩúÁ¥ÄÈåÑ</button>
            <button class="tab" data-tab="history">üìö Ê≠∑Âè≤Á¥ÄÈåÑ</button>
        </div>

        <!-- Á≠ÜË®òÊ®°ÁµÑ -->
        <section class="content-section active" id="notes">
            <div class="form-group">
                <label for="noteCategory">È°ûÂà•</label>
                <input type="text" id="noteCategory" placeholder="‰æãÂ¶ÇÔºöÊúÉË≠∞„ÄÅÊÉ≥Ê≥ï„ÄÅÂæÖËæ¶‰∫ãÈ†Ö">
            </div>
            <div class="form-group">
                <label for="noteContent">ÂÖßÂÆπ</label>
                <textarea id="noteContent" placeholder="Ëº∏ÂÖ•ÊÇ®ÁöÑÁ≠ÜË®òÂÖßÂÆπ..."></textarea>
            </div>
            <div class="form-group">
                <label for="noteDate">Êó•Êúü</label>
                <input type="date" id="noteDate">
            </div>
            <button class="btn" id="addNote">üíæ ÂÑ≤Â≠òÁ≠ÜË®ò</button>

            <div class="search-box">
                <input type="text" id="noteSearch" placeholder="üîç ÊêúÂ∞ãÁ≠ÜË®ò...">
            </div>

            <div id="notesList"></div>
        </section>

        <!-- Â∑•‰ΩúÁ¥ÄÈåÑÊ®°ÁµÑ -->
        <section class="content-section" id="work">
            <div class="form-group">
                <label for="workDate">Êó•Êúü</label>
                <input type="date" id="workDate">
            </div>
            <div class="form-group">
                <label for="workContent">Â∑•‰ΩúÂÖßÂÆπ</label>
                <textarea id="workContent" placeholder="Ëº∏ÂÖ•Â∑•‰ΩúÂÖßÂÆπ..."></textarea>
            </div>
            <button class="btn" id="addWork">üíæ ÂÑ≤Â≠òÂ∑•‰ΩúÁ¥ÄÈåÑ</button>

            <div class="search-box">
                <input type="text" id="workSearch" placeholder="üîç ÊêúÂ∞ãÂ∑•‰ΩúÁ¥ÄÈåÑ...">
            </div>

            <div id="workList"></div>
        </section>

        <!-- Ê≠∑Âè≤Á¥ÄÈåÑÊ®°ÁµÑ -->
        <section class="content-section" id="history">
            <div class="export-import-buttons">
                <button class="btn" id="exportData">üì§ ÂåØÂá∫Ë≥áÊñô</button>
                <button class="btn" id="importData">üì• ÂåØÂÖ•Ë≥áÊñô</button>
                <input type="file" id="fileInput" class="hidden" accept=".json">
            </div>

            <div class="search-box">
                <input type="text" id="historySearch" placeholder="üîç ÊêúÂ∞ãÊ≠∑Âè≤Á¥ÄÈåÑ...">
            </div>

            <div id="historyList"></div>
        </section>
    </div>

    <!-- Á∑®ËºØÊ®°ÊÖãÊ°Ü -->
    <div class="modal" id="editModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Á∑®ËºØÁ¥ÄÈåÑ</h2>
                <button class="modal-close" id="modalClose">&times;</button>
            </div>
            <div class="form-group">
                <label for="editCategory">È°ûÂà•</label>
                <input type="text" id="editCategory">
            </div>
            <div class="form-group">
                <label for="editContent">ÂÖßÂÆπ</label>
                <textarea id="editContent" rows="4"></textarea>
            </div>
            <div class="form-group">
                <label for="editDate">Êó•Êúü</label>
                <input type="date" id="editDate">
            </div>
            <button class="btn" id="saveEdit">üíæ ÂÑ≤Â≠òËÆäÊõ¥</button>
        </div>
    </div>

    <script>
        // Ë≥áÊñôÁÆ°ÁêÜÈ°ûÂà•
        class DataManager {
            constructor() {
                this.notes = this.loadData('notes') || [];
                this.workRecords = this.loadData('workRecords') || [];
            }

            loadData(key) {
                try {
                    const data = localStorage.getItem(key);
                    return data ? JSON.parse(data) : null;
                } catch (error) {
                    console.error(`ËºâÂÖ•Ë≥áÊñôÈåØË™§: ${key}`, error);
                    return null;
                }
            }

            saveData(key, data) {
                try {
                    localStorage.setItem(key, JSON.stringify(data));
                } catch (error) {
                    console.error(`ÂÑ≤Â≠òË≥áÊñôÈåØË™§: ${key}`, error);
                }
            }

            addNote(note) {
                const newNote = {
                    id: Date.now(),
                    ...note,
                    createdAt: new Date().toISOString()
                };
                this.notes.unshift(newNote);
                this.saveData('notes', this.notes);
                return newNote;
            }

            addWorkRecord(record) {
                const newRecord = {
                    id: Date.now(),
                    ...record,
                    createdAt: new Date().toISOString()
                };
                this.workRecords.unshift(newRecord);
                this.saveData('workRecords', this.workRecords);
                return newRecord;
            }

            updateItem(type, id, updatedData) {
                if (type === 'note') {
                    const index = this.notes.findIndex(n => n.id === id);
                    if (index !== -1) {
                        this.notes[index] = { ...this.notes[index], ...updatedData };
                        this.saveData('notes', this.notes);
                    }
                } else if (type === 'work') {
                    const index = this.workRecords.findIndex(w => w.id === id);
                    if (index !== -1) {
                        this.workRecords[index] = { ...this.workRecords[index], ...updatedData };
                        this.saveData('workRecords', this.workRecords);
                    }
                }
            }

            deleteItem(type, id) {
                if (type === 'note') {
                    this.notes = this.notes.filter(n => n.id !== id);
                    this.saveData('notes', this.notes);
                } else if (type === 'work') {
                    this.workRecords = this.workRecords.filter(w => w.id !== id);
                    this.saveData('workRecords', this.workRecords);
                }
            }

            exportData() {
                const data = {
                    notes: this.notes,
                    workRecords: this.workRecords,
                    exportDate: new Date().toISOString()
                };
                
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `notes_backup_${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }

            importData(data) {
                if (data.notes) {
                    this.notes = data.notes;
                    this.saveData('notes', this.notes);
                }
                if (data.workRecords) {
                    this.workRecords = data.workRecords;
                    this.saveData('workRecords', this.workRecords);
                }
            }

            getNotes(searchTerm = '') {
                if (!searchTerm) return this.notes;
                return this.notes.filter(note => 
                    note.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    note.category.toLowerCase().includes(searchTerm.toLowerCase())
                );
            }

            getWorkRecords(searchTerm = '') {
                if (!searchTerm) return this.workRecords;
                return this.workRecords.filter(record => 
                    record.content.toLowerCase().includes(searchTerm.toLowerCase())
                );
            }

            getAllRecords(searchTerm = '') {
                const notes = this.getNotes(searchTerm).map(note => ({ ...note, type: 'note' }));
                const workRecords = this.getWorkRecords(searchTerm).map(record => ({ ...record, type: 'work' }));
                return [...notes, ...workRecords].sort((a, b) => new Date(b.date) - new Date(a.date));
            }
        }

        // UI ÁÆ°ÁêÜÈ°ûÂà•
        class UIManager {
            constructor(dataManager) {
                this.dataManager = dataManager;
                this.currentEditId = null;
                this.currentEditType = null;
                this.editingNoteId = null;
                this.editingWorkId = null;
                this.desktopCards = [];
            }

            init() {
                this.setupEventListeners();
                this.updateDate();
                this.renderNotes();
                this.renderWorkRecords();
                this.renderHistory();
                this.loadDesktopCards();
            }

            setupEventListeners() {
                // Tab ÂàáÊèõ
                document.querySelectorAll('.tab').forEach(tab => {
                    tab.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
                });

                // ‰∏ªÈ°åÂàáÊèõ
                document.getElementById('themeToggle').addEventListener('click', () => this.toggleTheme());

                // Á≠ÜË®òÂäüËÉΩ
                document.getElementById('addNote').addEventListener('click', () => this.handleNoteSave());
                document.getElementById('noteDate').value = new Date().toISOString().split('T')[0];

                // Â∑•‰ΩúÁ¥ÄÈåÑÂäüËÉΩ
                document.getElementById('addWork').addEventListener('click', () => this.handleWorkSave());
                document.getElementById('workDate').value = new Date().toISOString().split('T')[0];

                // ÊêúÂ∞ãÂäüËÉΩ
                document.getElementById('noteSearch').addEventListener('input', (e) => this.renderNotes(e.target.value));
                document.getElementById('workSearch').addEventListener('input', (e) => this.renderWorkRecords(e.target.value));
                document.getElementById('historySearch').addEventListener('input', (e) => this.renderHistory(e.target.value));

                // ÂåØÂá∫ÂåØÂÖ•
                document.getElementById('exportData').addEventListener('click', () => this.dataManager.exportData());
                document.getElementById('importData').addEventListener('click', () => document.getElementById('fileInput').click());
                document.getElementById('fileInput').addEventListener('change', (e) => this.handleImport(e));

                // Ê®°ÊÖãÊ°Ü
                document.getElementById('modalClose').addEventListener('click', () => this.closeModal());
                document.getElementById('saveEdit').addEventListener('click', () => this.saveEdit());
                document.getElementById('editModal').addEventListener('click', (e) => {
                    if (e.target.id === 'editModal') this.closeModal();
                });
            }

            updateDate() {
                const date = new Date();
                const options = { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric', 
                    weekday: 'long' 
                };
                document.getElementById('currentDate').textContent = 
                    date.toLocaleDateString('zh-TW', options);
            }

            switchTab(tabName) {
                document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
                document.querySelectorAll('.content-section').forEach(section => 
                    section.classList.remove('active')
                );
                
                document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
                document.getElementById(tabName).classList.add('active');
                
                if (tabName === 'history') {
                    this.renderHistory();
                }
            }

            toggleTheme() {
                const currentTheme = document.documentElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                
                const themeText = newTheme === 'dark' ? '‚òÄÔ∏è Ê∑∫Ëâ≤Ê®°Âºè' : 'üåô Ê∑±Ëâ≤Ê®°Âºè';
                document.getElementById('themeToggle').textContent = themeText;
            }

            handleNoteSave() {
                const category = document.getElementById('noteCategory').value.trim();
                const content = document.getElementById('noteContent').value.trim();
                const date = document.getElementById('noteDate').value;

                if (!category || !content) {
                    this.showNotification('Ë´ãÂ°´ÂØ´È°ûÂà•ÂíåÂÖßÂÆπ', 'error');
                    return;
                }

                let savedItem;
                if (this.editingNoteId) {
                    // Êõ¥Êñ∞ÁèæÊúâÁ≠ÜË®ò
                    this.dataManager.updateItem('note', this.editingNoteId, { category, content, date });
                    this.showNotification('Á≠ÜË®òÂ∑≤Êõ¥Êñ∞ÔºÅ', 'success');
                    this.editingNoteId = null;
                    document.getElementById('addNote').textContent = 'üíæ ÂÑ≤Â≠òÁ≠ÜË®ò';
                } else {
                    // Êñ∞Â¢ûÁ≠ÜË®ò
                    savedItem = this.dataManager.addNote({ category, content, date });
                    this.showNotification('Á≠ÜË®òÂ∑≤ÂÑ≤Â≠òÔºÅ', 'success');
                    
                    // Ê∑ªÂä†Âà∞Ê°åÈù¢Âç°Áâá
                    this.addDesktopCard(savedItem, 'note');
                }

                // Ê∏ÖÁ©∫Ë°®ÂñÆ
                document.getElementById('noteCategory').value = '';
                document.getElementById('noteContent').value = '';
                document.getElementById('noteDate').value = new Date().toISOString().split('T')[0];

                // ÈáçÊñ∞Ê∏≤ÊüìÂàóË°®
                this.renderNotes();
                this.saveDesktopCards();
            }

            handleWorkSave() {
                const content = document.getElementById('workContent').value.trim();
                const date = document.getElementById('workDate').value;

                if (!content) {
                    this.showNotification('Ë´ãÂ°´ÂØ´Â∑•‰ΩúÂÖßÂÆπ', 'error');
                    return;
                }

                let savedItem;
                if (this.editingWorkId) {
                    // Êõ¥Êñ∞ÁèæÊúâÂ∑•‰ΩúÁ¥ÄÈåÑ
                    this.dataManager.updateItem('work', this.editingWorkId, { content, date });
                    this.showNotification('Â∑•‰ΩúÁ¥ÄÈåÑÂ∑≤Êõ¥Êñ∞ÔºÅ', 'success');
                    this.editingWorkId = null;
                    document.getElementById('addWork').textContent = 'üíæ ÂÑ≤Â≠òÂ∑•‰ΩúÁ¥ÄÈåÑ';
                } else {
                    // Êñ∞Â¢ûÂ∑•‰ΩúÁ¥ÄÈåÑ
                    savedItem = this.dataManager.addWorkRecord({ content, date });
                    this.showNotification('Â∑•‰ΩúÁ¥ÄÈåÑÂ∑≤ÂÑ≤Â≠òÔºÅ', 'success');
                    
                    // Ê∑ªÂä†Âà∞Ê°åÈù¢Âç°Áâá
                    this.addDesktopCard(savedItem, 'work');
                }

                // Ê∏ÖÁ©∫Ë°®ÂñÆ
                document.getElementById('workContent').value = '';
                document.getElementById('workDate').value = new Date().toISOString().split('T')[0];

                // ÈáçÊñ∞Ê∏≤ÊüìÂàóË°®
                this.renderWorkRecords();
                this.saveDesktopCards();
            }

            renderNotes(searchTerm = '') {
                const container = document.getElementById('notesList');
                const notes = this.dataManager.getNotes(searchTerm);

                if (notes.length === 0) {
                    container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">Êö´ÁÑ°Á≠ÜË®ò</p>';
                    return;
                }

                container.innerHTML = notes.map(note => `
                    <div class="note-card" onclick="uiManager.editNote(${note.id})">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div style="flex: 1;">
                                <div class="note-date">${note.date}</div>
                                <span class="note-category">${note.category}</span>
                                <p style="margin-top: 10px;">${this.truncateText(note.content, 100)}</p>
                            </div>
                            <div style="display: flex; gap: 10px;">
                                <button class="btn" onclick="event.stopPropagation(); uiManager.editNote(${note.id})" 
                                        style="padding: 8px 16px; font-size: 0.9rem;">Á∑®ËºØ</button>
                                <button class="btn" onclick="event.stopPropagation(); uiManager.deleteNote(${note.id})" 
                                        style="padding: 8px 16px; font-size: 0.9rem;">Âà™Èô§</button>
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            renderWorkRecords(searchTerm = '') {
                const container = document.getElementById('workList');
                const records = this.dataManager.getWorkRecords(searchTerm);

                if (records.length === 0) {
                    container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">Êö´ÁÑ°Â∑•‰ΩúÁ¥ÄÈåÑ</p>';
                    return;
                }

                container.innerHTML = records.map(record => `
                    <div class="note-card" onclick="uiManager.editWork(${record.id})">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div style="flex: 1;">
                                <div class="note-date">${record.date}</div>
                                <p style="margin-top: 10px;">${this.truncateText(record.content, 100)}</p>
                            </div>
                            <div style="display: flex; gap: 10px;">
                                <button class="btn" onclick="event.stopPropagation(); uiManager.editWork(${record.id})" 
                                        style="padding: 8px 16px; font-size: 0.9rem;">Á∑®ËºØ</button>
                                <button class="btn" onclick="event.stopPropagation(); uiManager.deleteWork(${record.id})" 
                                        style="padding: 8px 16px; font-size: 0.9rem;">Âà™Èô§</button>
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            renderHistory(searchTerm = '') {
                const container = document.getElementById('historyList');
                const records = this.dataManager.getAllRecords(searchTerm);

                if (records.length === 0) {
                    container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">Êö´ÁÑ°Ê≠∑Âè≤Á¥ÄÈåÑ</p>';
                    return;
                }

                container.innerHTML = records.map(record => `
                    <div class="note-card">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div style="flex: 1;">
                                <div class="note-date">${record.date} - ${record.type === 'note' ? 'üìù Á≠ÜË®ò' : 'üíº Â∑•‰ΩúÁ¥ÄÈåÑ'}</div>
                                ${record.category ? `<span class="note-category">${record.category}</span>` : ''}
                                <p style="margin-top: 10px;">${this.truncateText(record.content, 150)}</p>
                            </div>
                            <div style="display: flex; gap: 10px;">
                                <button class="btn" onclick="uiManager.editItem(${record.id}, '${record.type}')" 
                                        style="padding: 8px 16px; font-size: 0.9rem;">Á∑®ËºØ</button>
                                <button class="btn" onclick="uiManager.deleteItem(${record.id}, '${record.type}')" 
                                        style="padding: 8px 16px; font-size: 0.9rem;">Âà™Èô§</button>
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            editNote(id) {
                const note = this.dataManager.notes.find(n => n.id === id);
                if (note) {
                    this.editingNoteId = id;
                    document.getElementById('noteCategory').value = note.category;
                    document.getElementById('noteContent').value = note.content;
                    document.getElementById('noteDate').value = note.date;
                    document.getElementById('addNote').textContent = 'üîÑ Êõ¥Êñ∞Á≠ÜË®ò';
                    
                    // ÂàáÊèõÂà∞Á≠ÜË®òÊ®ôÁ±§
                    this.switchTab('notes');
                    
                    // Êç≤ÂãïÂà∞Ë°®ÂñÆ
                    document.querySelector('#notes .form-group').scrollIntoView({ behavior: 'smooth' });
                }
            }

            editWork(id) {
                const work = this.dataManager.workRecords.find(w => w.id === id);
                if (work) {
                    this.editingWorkId = id;
                    document.getElementById('workContent').value = work.content;
                    document.getElementById('workDate').value = work.date;
                    document.getElementById('addWork').textContent = 'üîÑ Êõ¥Êñ∞Â∑•‰ΩúÁ¥ÄÈåÑ';
                    
                    // ÂàáÊèõÂà∞Â∑•‰ΩúÁ¥ÄÈåÑÊ®ôÁ±§
                    this.switchTab('work');
                    
                    // Êç≤ÂãïÂà∞Ë°®ÂñÆ
                    document.querySelector('#work .form-group').scrollIntoView({ behavior: 'smooth' });
                }
            }

            deleteNote(id) {
                if (confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂâáÁ≠ÜË®òÂóéÔºü')) {
                    this.dataManager.deleteItem('note', id);
                    this.renderNotes();
                    this.renderHistory();
                    this.removeDesktopCard(id, 'note');
                    this.showNotification('Á≠ÜË®òÂ∑≤Âà™Èô§ÔºÅ', 'success');
                }
            }

            deleteWork(id) {
                if (confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÁ≠ÜÂ∑•‰ΩúÁ¥ÄÈåÑÂóéÔºü')) {
                    this.dataManager.deleteItem('work', id);
                    this.renderWorkRecords();
                    this.renderHistory();
                    this.removeDesktopCard(id, 'work');
                    this.showNotification('Â∑•‰ΩúÁ¥ÄÈåÑÂ∑≤Âà™Èô§ÔºÅ', 'success');
                }
            }

            editItem(id, type) {
                const item = type === 'note' 
                    ? this.dataManager.notes.find(n => n.id === id)
                    : this.dataManager.workRecords.find(w => w.id === id);
                
                if (!item) return;

                this.currentEditId = id;
                this.currentEditType = type;

                document.getElementById('editCategory').value = item.category || '';
                document.getElementById('editContent').value = item.content;
                document.getElementById('editDate').value = item.date;
                
                document.getElementById('editModal').style.display = 'block';
            }

            saveEdit() {
                const category = document.getElementById('editCategory').value.trim();
                const content = document.getElementById('editContent').value.trim();
                const date = document.getElementById('editDate').value;

                if (!content) {
                    this.showNotification('Ë´ãÂ°´ÂØ´ÂÖßÂÆπ', 'error');
                    return;
                }

                const updatedData = this.currentEditType === 'note' 
                    ? { category, content, date }
                    : { content, date };

                this.dataManager.updateItem(this.currentEditType, this.currentEditId, updatedData);
                
                this.renderNotes();
                this.renderWorkRecords();
                this.renderHistory();
                this.closeModal();
                this.showNotification('Êõ¥Êñ∞ÊàêÂäüÔºÅ', 'success');
            }

            deleteItem(id, type) {
                if (confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÁ≠ÜÁ¥ÄÈåÑÂóéÔºü')) {
                    this.dataManager.deleteItem(type, id);
                    this.renderNotes();
                    this.renderWorkRecords();
                    this.renderHistory();
                    this.removeDesktopCard(id, type);
                    this.showNotification('Á¥ÄÈåÑÂ∑≤Âà™Èô§ÔºÅ', 'success');
                }
            }

            closeModal() {
                document.getElementById('editModal').style.display = 'none';
                this.currentEditId = null;
                this.currentEditType = null;
            }

            handleImport(event) {
                const file = event.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const data = JSON.parse(e.target.result);
                        this.dataManager.importData(data);
                        this.renderNotes();
                        this.renderWorkRecords();
                        this.renderHistory();
                        this.showNotification('Ë≥áÊñôÂåØÂÖ•ÊàêÂäüÔºÅ', 'success');
                    } catch (error) {
                        this.showNotification('ÂåØÂÖ•Â§±ÊïóÔºöÊ™îÊ°àÊ†ºÂºèÈåØË™§', 'error');
                    }
                };
                reader.readAsText(file);
                event.target.value = '';
            }

            // Ê°åÈù¢Âç°ÁâáÂäüËÉΩ
            addDesktopCard(item, type) {
                const card = {
                    id: item.id,
                    type: type,
                    date: item.date,
                    content: item.content,
                    category: item.category || ''
                };

                this.desktopCards.push(card);
                this.renderDesktopCard(card);
                this.saveDesktopCards();
            }

            renderDesktopCard(card) {
                const cardElement = document.createElement('div');
                cardElement.className = 'desktop-card';
                cardElement.id = `desktop-card-${card.type}-${card.id}`;
                cardElement.innerHTML = `
                    <button class="close-btn" onclick="uiManager.removeDesktopCard(${card.id}, '${card.type}')">&times;</button>
                    <div class="note-date">${card.date}</div>
                    ${card.category ? `<div class="note-category">${card.category}</div>` : ''}
                    <div class="note-content">${this.truncateText(card.content, 100)}</div>
                `;
                document.body.appendChild(cardElement);
            }

            removeDesktopCard(id, type) {
                const cardElement = document.getElementById(`desktop-card-${type}-${id}`);
                if (cardElement) {
                    cardElement.remove();
                }
                
                this.desktopCards = this.desktopCards.filter(card => 
                    !(card.id === id && card.type === type)
                );
                this.saveDesktopCards();
            }

            saveDesktopCards() {
                localStorage.setItem('desktopCards', JSON.stringify(this.desktopCards));
            }

            loadDesktopCards() {
                const saved = localStorage.getItem('desktopCards');
                if (saved) {
                    try {
                        this.desktopCards = JSON.parse(saved);
                        this.desktopCards.forEach(card => this.renderDesktopCard(card));
                    } catch (error) {
                        console.error('ËºâÂÖ•Ê°åÈù¢Âç°ÁâáÂ§±Êïó', error);
                    }
                }
            }

            truncateText(text, maxLength) {
                if (text.length <= maxLength) return text;
                return text.substring(0, maxLength) + '...';
            }

            showNotification(message, type) {
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: ${type === 'success' ? 'var(--accent)' : '#e74c3c'};
                    color: white;
                    padding: 15px 20px;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px var(--shadow);
                    z-index: 3000;
                    animation: slideIn 0.3s ease;
                `;
                notification.textContent = message;
                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.style.animation = 'fadeOut 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }
        }

        // ÂàùÂßãÂåñÊáâÁî®
        const dataManager = new DataManager();
        const uiManager = new UIManager(dataManager);

        // Ê∑ªÂä† fadeOut ÂãïÁï´
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeOut {
                from { opacity: 1; transform: translateX(0); }
                to { opacity: 0; transform: translateX(100%); }
            }
        `;
        document.head.appendChild(style);

        // È†ÅÈù¢ËºâÂÖ•ÊôÇÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', () => {
            // ËºâÂÖ•‰øùÂ≠òÁöÑ‰∏ªÈ°å
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            document.getElementById('themeToggle').textContent = 
                savedTheme === 'dark' ? '‚òÄÔ∏è Ê∑∫Ëâ≤Ê®°Âºè' : 'üåô Ê∑±Ëâ≤Ê®°Âºè';
            
            // ÂàùÂßãÂåñ UI
            uiManager.init();
        });
    </script>
</body>
</html>