/speckit.constitution

principles:
Offline-First, Single-File:
僅使用一個 index.html，內含所有 HTML/CSS/JS。
不接任何網路資源與 CDN；僅允許本地檔案匯入／下載。

Zero-Console-Issue:
禁止未處理例外、未定義變數、棄用 API 警告；嚴禁 console.error/console.warn，除非在開發旗標下且預設關閉。
統一錯誤處理（UI toast/inline 提示），確保開啟 DevTools 時 0 錯誤/0警告。

Data Ownership:
以 localStorage 為主要儲存（支援 file:// 開啟）；提供 JSON 匯出、JSON 匯入（覆蓋或合併兩種模式）。
版本化資料結構（schemaVersion），向後相容遷移。

UX 語氣與美學:
低飽和度色盤、充足留白、清晰層級、對齊嚴謹網格。
導向清楚、不做過度隱藏；顯著搜尋框、直覺的資訊架構。
流暢流程：建立→瀏覽→搜尋/篩選→編輯→歷史→備份。

可回復與歷史稽核:
刪除採「可復原」：軟刪除（Trash）+ Undo/Redo 時光軸（可編輯歷史項目之備註）。
每筆操作可逆（Command Pattern）並記錄操作者時間戳。

性能與健壯性:
初始渲染 < 150ms（中等資料量，1000 筆活動）；互動無阻塞（避免長任務）。
防重複寫入與資料損毀（批次寫入、節流、try/catch 回退）。

驗收標準（節選）:
於離線、飛航模式、file:// 打開下功能完整。
匯出檔可於重新開啟後正確匯入；歷史可用以復原刪除。

DevTools Console 無錯誤、無警告。

/speckit.specify

actors:
使用者（單人、單機）
core_objects:
活動（Activity）: id, title, description, tags[], category, status(active/archived/trashed), createdAt, updatedAt
歷史（HistoryEntry）: id, type(create/update/delete/restore/import/export), targetId, diff(before/after), note(可編輯), timestamp
設定（Preferences）: uiDensity, colorMode(auto/light/dark), sort, filters
user_stories:

建立/編輯/刪除/還原活動：作為使用者，我能新增活動、內文支援基本格式（純文字為主），刪除後可在垃圾桶或歷史中復原。
清楚導向：首頁分區「全部、收藏、標籤、分類、垃圾桶、歷史」，不將關鍵操作藏於多層選單。
顯著搜尋：頁首常駐搜尋框＋快捷鍵（⌘/Ctrl+K），可依標題、內容、標籤、分類模糊搜尋；可再加上狀態篩選。
歷史稽核與可編輯：每次操作自動記錄；我能為任一歷史項加註解；可逐步 Undo/Redo。

備份與還原：我能一鍵匯出 JSON（含版本、偏好、活動、歷史）；能選擇「合併匯入」或「覆蓋匯入」。
離線可靠：在無網路、或以 file:// 開啟時，所有功能可用且不觸發資源載入錯誤。
無障礙與鍵盤：完整鍵盤導航；可用快捷鍵快速新增/儲存/搜尋/切換視圖。
極簡高奢視覺：留白、網格、對齊；不使用外部字體；系統字體堆疊；圖示用 inline SVG。
non_functional_requirements:

瀏覽器：Chromium/Firefox/Safari 最新兩版；行動端 Safari/Chrome。
檔案大小：不限制，但建議控制在數 MB 內以維持啟動速度。
安全：不使用 eval；不存敏感隱私（本地端單機）。
相容性：不依賴 Service Worker（file:// 侷限），避免 IndexedDB 跨原點問題；以 localStorage 為主。
acceptance_tests (high-level):

T1 匯出→清空→匯入（合併/覆蓋）資料一致。
T2 刪除後於垃圾桶還原成功；歷史可見該次操作並可 Undo。
T3 搜尋「標題/內容/標籤」皆可命中；清除搜尋還原列表。
T4 打開 DevTools，Console 0 error/0 warning。

T5 行動裝置觸控新增、編輯、刪除、復原皆順暢。
open_questions:

/speckit.plan
architecture:
單檔結構：index.html（<style> 內嵌 CSS、<template> 元件片段、<script type="module"> 內嵌 JS）
模組劃分（同檔內邏輯模組化）:
storage.ts (inlined JS module): localStorage adapter + schema versioning + safe write/read + migration
repo.ts: ActivityRepo / HistoryRepo，提供 CRUD 與查詢、批次操作
history.ts: Command/UndoStack，支援 reversible ops（create/update/delete/restore/import）
search.ts: 簡易模糊比對（標題優先），支援 tags/category/status 條件
ui-core.ts: 事件匯流排、快捷鍵、錯誤處理（UI 呈現，不用 console）
views/: Header（搜尋＋動作列）、Sidebar（導向）、Grid/List View、Editor、Trash、History、Settings
export-import.ts: JSON 序列化/反序列化、驗證、合併與覆蓋策略
data_schema (JSON):

meta: { app: "vogue-notes", schemaVersion: 1, exportedAt }
preferences: { colorMode, sort, filters }
activities: [{ id, title, description, tags:[], category, status, createdAt, updatedAt, pinned?:bool }]
history: [{ id, type, targetId, diff, note, timestamp }]

寫入策略：debounce 300ms；大操作（匯入/批次刪除）使用 transaction-like（先快照、成功後覆蓋）
安全讀寫：try/catch，失敗顯示 UI 錯誤卡片與「還原至上次快照」按鈕
backup:
Export：Blob → a[download] 觸發下載（不依賴任何線上來源）
Import：<input type="file" accept="application/json">，解析後 schema 驗證
Merge 規則：以 id 為主鍵；若衝突則 updatedAt 較新者優先；保留雙方歷史並標註來源
Overwrite 規則：完整覆蓋 activities/preferences/history，並自動在歷史寫入「import-overwrite」紀錄
undo_redo_strategy:
Command Pattern：每個操作附帶 do() / undo()；維護兩個堆疊（undo/redo）
刪除＝軟刪除（status=trashed）；復原＝status 回復；永久刪除提供警示（仍保留歷史記錄可還原內容）
歷史可編輯 note，但不可更改 diff；可將某歷史「標記星號」以便追蹤
ui_ux_spec:
Layout：12-column CSS Grid；min 16px spacing；視圖切換（Grid / List）
色彩：中性灰階＋單一重點色（不指定外部色彩系統）
字體：系統字體堆疊（無外部連結）
圖示：inline SVG（<symbol>/<use>）
導向：Sidebar 清楚列出「全部｜標籤｜分類｜收藏｜垃圾桶｜歷史｜設定」
空狀態：插圖以 SVG 線條（內嵌）；說明文字簡短
動效：CSS transition（不依賴外部庫）；200ms 以內
表單：可撤銷的內嵌編輯（Enter 儲存、Esc 取消）；錯誤顯示 inline
無障礙：語意化標籤、landmark、適當 aria-*、焦點可見
error_handling:
全域 try/catch 包裝初始化；UI 錯誤卡面代替 console；記錄在 history（type="error" 不計入 Undo）
quality_gates:
啟動測試、搜尋測試、匯出匯入測試、Undo/Redo 測試、垃圾桶復原測試、行動裝置瀏覽測試、Console 檢查（0 警告/錯誤）
constraints_alignment:
不使用任何外部連結、CDN、Web 字體、第三方 JS
確保在 file:// 下不觸發 Service Worker 或 CORS 問題
open_points_to_decide:

歷史上限與自動壓縮策略（建議 10k 筆，老舊 diff 壓縮為快照）

/speckit.tasks
設計資料結構與 migration（schemaVersion=1）
建立 storage/repo 層：CRUD、快照、批次寫入
實作 Command/UndoStack：create/update/delete/restore/import/export
匯出/匯入：JSON schema 驗證、合併與覆蓋流程、錯誤提示
搜尋模組：索引 {title, description, tags, category}，支援條件篩選
UI 骨架：Header（搜尋＋動作）、Sidebar（導向）、Main（Grid/List/Editor/Trash/History/Settings）
樣式系統：CSS 變數、Grid、焦點樣式、inline SVG 圖示集
Editor：內嵌編輯、鍵盤快捷鍵、驗證
歷史視圖：時間軸、可編輯 note、標星、Undo/Redo 控件
垃圾桶：軟刪除列表、還原、永久刪除（帶確認）
設定：偏好、匯出/匯入、資料重置（帶雙重確認與自動備份）
全域錯誤處理：UI 提示、回退、避免 console 警告/錯誤
相容性與效能測試：行動/桌機、1000+ 筆資料、啟動/互動指標

/speckit.implement
guardrails:
僅建立單檔 index.html；不引入任何外部連結/字體/腳本。
嚴格處理例外，禁止 console 輸出；所有訊息以 UI 呈現。
deliverables:
/index.html（內含 <style> 與 <script type="module">）
範例資料與自我驗證捷徑（在設定頁一鍵生成 50 筆測試資料）
