<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Annual Task Cloner | Editorial Hybrid Shell</title>
  <style>
    :root {
      --ink-black: #000000;
      --ivory: #F8F8F6;
      --rose-gold: #C7A27C;
      --smoke: #1A1A1A;
      --mist-silver: #C0C4C9;
      --cream: #FAF7F2;
      --soft-gray: #6B7280;
      --fs-display: 40px;
      --lh-display: 48px;
      --fs-h1: 32px;
      --lh-h1: 40px;
      --fs-body: 16px;
      --lh-body: 28px;
      --radius-2xl: 16px;
      --shadow-soft: 0 6px 20px rgba(0,0,0,.07);
      --easing-emphasized: cubic-bezier(0.33, 1, 0.68, 1);
      --dur-stagger: 300ms;
      --dur-breathe-min: 600ms;
      --dur-breathe-max: 1000ms;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    html {
      scroll-behavior: smooth;
    }

    body {
      font-family: Inter, "Helvetica Neue", Arial, system-ui, "Noto Sans TC", "PingFang TC", "Microsoft JhengHei", sans-serif;
      background-color: var(--ivory);
      color: var(--ink-black);
      line-height: var(--lh-body);
      font-size: var(--fs-body);
      overflow-x: hidden;
    }

    .container {
      width: min(1200px, 92vw);
      margin: 0 auto;
      padding: 0 16px;
    }

    header {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      z-index: 1000;
      background: transparent;
      transition: background 0.4s ease, backdrop-filter 0.4s ease;
      backdrop-filter: blur(0);
    }

    header.scrolled {
      background: linear-gradient(to bottom, var(--smoke), transparent 80%);
      backdrop-filter: blur(8px);
      box-shadow: 0 1px 0 var(--mist-silver);
    }

    .header-inner {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 0;
    }

    .logo {
      font-family: "Playfair Display", "Didot", "Bodoni 72", Georgia, serif;
      font-size: 24px;
      font-weight: 600;
      color: var(--ivory);
    }

    header.scrolled .logo {
      color: var(--ink-black);
    }

    .block-hero {
      position: relative;
      height: 60vh;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, var(--cream) 0%, var(--ivory) 100%);
      overflow: hidden;
      margin: 0 -16px;
    }

    .hero-gradient-sweep {
      position: absolute;
      top: 0;
      left: -100%;
      width: 200%;
      height: 100%;
      background: conic-gradient(
        transparent,
        rgba(199, 162, 124, 0.05),
        transparent 30%
      );
      animation: sweep 12s linear infinite;
      opacity: 0.7;
      pointer-events: none;
    }

    @keyframes sweep {
      to { transform: translateX(100%); }
    }

    .hero-content {
      text-align: center;
      max-width: 800px;
      z-index: 2;
      padding: 0 24px;
    }

    .hero-title {
      font-family: "Playfair Display", "Didot", serif;
      font-size: var(--fs-display);
      line-height: var(--lh-display);
      margin-bottom: 20px;
      opacity: 0;
    }

    .hero-subtitle {
      font-size: var(--fs-body);
      color: var(--soft-gray);
      opacity: 0;
      transition: opacity 0.6s var(--easing-emphasized);
    }

    .block-divider {
      height: 48px;
      background: linear-gradient(to bottom, transparent, var(--cream), transparent);
      margin: 56px 0;
    }

    .app-shell {
      margin: 60px 0;
    }

    .section-title {
      font-family: "Playfair Display", serif;
      font-size: var(--fs-h1);
      margin-bottom: 28px;
      position: relative;
      display: inline-block;
    }

    .section-title::after {
      content: "";
      position: absolute;
      bottom: -8px;
      left: 0;
      width: 48px;
      height: 2px;
      background: var(--rose-gold);
    }

    .cloner-form {
      background: white;
      padding: 28px;
      border-radius: var(--radius-2xl);
      box-shadow: var(--shadow-soft);
      margin-bottom: 40px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: var(--smoke);
    }

    input, button, select, textarea {
      width: 100%;
      padding: 12px 16px;
      border: 1px solid var(--mist-silver);
      border-radius: 8px;
      font-size: var(--fs-body);
    }

    textarea {
      resize: vertical;
      min-height: 80px;
    }

    input:focus, button:focus, select:focus, textarea:focus {
      outline: 2px solid var(--mist-silver);
      box-shadow: 0 0 0 2px var(--rose-gold);
    }

    button {
      background: var(--ink-black);
      color: white;
      cursor: pointer;
      font-weight: 600;
      transition: transform 0.2s, background 0.2s;
      width: auto;
    }

    button:hover {
      transform: scale(1.02);
      background: var(--smoke);
    }

    .btn-row {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
    }

    .search-wrapper {
      position: relative;
    }

    .search-wrapper input {
      margin-bottom: 0;
    }

    .search-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: white;
      border: 1px solid var(--mist-silver);
      border-top: none;
      border-radius: 0 0 8px 8px;
      max-height: 200px;
      overflow-y: auto;
      z-index: 100;
      display: none;
    }

    .search-dropdown.show {
      display: block;
    }

    .dropdown-item {
      padding: 10px 16px;
      cursor: pointer;
      border-bottom: 1px solid var(--mist-silver);
    }

    .dropdown-item:last-child {
      border-bottom: none;
    }

    .dropdown-item:hover {
      background: var(--cream);
    }

    .feedback {
      margin-top: 16px;
      padding: 12px;
      border-radius: 8px;
      font-weight: 500;
    }

    .feedback.success {
      background: #e8f5e9;
      color: #2e7d32;
    }

    .feedback.error {
      background: #ffebee;
      color: #c62828;
    }

    footer {
      margin: 100px 0 40px;
      text-align: center;
      color: var(--soft-gray);
      font-size: 14px;
      border-top: 1px solid var(--mist-silver);
      padding-top: 20px;
    }

    .reveal {
      opacity: 0;
      transform: translateY(20px);
      transition: opacity var(--dur-breathe-min) var(--easing-emphasized),
                  transform var(--dur-breathe-min) var(--easing-emphasized);
    }

    .reveal.appear {
      opacity: 1;
      transform: translateY(0);
    }

    @media print {
      header, .block-hero, .cloner-form, footer {
        display: none !important;
      }

      body {
        background: white;
        color: black;
      }
    }
  </style>
</head>
<body>
  <header id="main-header">
    <div class="container">
      <div class="header-inner">
        <div class="logo">Task Vogue</div>
      </div>
    </div>
  </header>

  <main>
    <section class="block-hero reveal">
      <div class="hero-gradient-sweep"></div>
      <div class="hero-content">
        <h1 class="hero-title" id="hero-title">Annual Task Cloner</h1>
        <p class="hero-subtitle">建立年度任務模板，隔年一鍵複製。標題與提醒文字完整繼承，排程留白待編。</p>
      </div>
    </section>

    <div class="container">
      <section class="app-shell reveal">
        <h2 class="section-title">建立任務模板</h2>

        <div class="cloner-form">
          <div class="form-group">
            <label for="newMasterName">新建母任務</label>
            <div class="btn-row">
              <input type="text" id="newMasterName" placeholder="例如：2025 財務規劃" />
              <button type="button" id="createMasterBtn">建立母任務</button>
            </div>
          </div>
        </div>

        <div class="cloner-form">
          <h3 style="margin-bottom:16px; font-family: 'Playfair Display', serif;">新建子任務</h3>
          <div class="form-group">
            <label for="subMasterSelect">所屬母任務</label>
            <select id="subMasterSelect">
              <option value="">— 請先建立母任務 —</option>
            </select>
          </div>
          <div class="form-group">
            <label for="newSubTitle">子任務標題</label>
            <input type="text" id="newSubTitle" placeholder="例如：年度預算規劃" />
          </div>
          <div class="form-group">
            <label for="newSubReminders">提醒文字（可包含多則，自由格式）</label>
            <textarea id="newSubReminders" placeholder="提醒：需包含通膨調整係數，並經法務會簽"></textarea>
          </div>
          <button type="button" id="createSubBtn">建立子任務</button>
        </div>

        <div class="block-divider"></div>

        <h2 class="section-title">複製年度任務模板</h2>
        <form id="clonerForm" class="cloner-form">
          <h3 style="margin-bottom:16px; font-family: 'Playfair Display', serif;">來源設定</h3>

          <div class="form-group">
            <label for="sourceMasterKeyword">來源母任務</label>
            <div class="search-wrapper">
              <input type="text" id="sourceMasterKeyword" placeholder="輸入母任務名稱…" autocomplete="off" />
              <div id="masterDropdown" class="search-dropdown"></div>
            </div>
          </div>

          <div class="form-group">
            <label for="sourceSubKeyword">來源子任務（可搜標題或提醒文字）</label>
            <div class="search-wrapper">
              <input type="text" id="sourceSubKeyword" placeholder="輸入關鍵字…" autocomplete="off" />
              <div id="subDropdown" class="search-dropdown"></div>
            </div>
          </div>

          <h3 style="margin:24px 0 16px; font-family: 'Playfair Display', serif;">目標設定</h3>

          <div class="form-group">
            <label for="targetMaster">目標母任務名稱</label>
            <input type="text" id="targetMaster" placeholder="輸入現有或新母任務名稱" required />
          </div>

          <button type="submit">複製子任務模板</button>
          <div id="feedback" class="feedback" style="display:none;"></div>
        </form>

        <div class="cloner-form">
          <h3 style="margin-bottom:16px; font-family: 'Playfair Display', serif;">資料管理</h3>
          <div class="btn-row">
            <button type="button" id="exportBtn">匯出 JSON</button>
            <button type="button" id="importBtn" style="background:var(--rose-gold);">匯入 JSON</button>
            <input type="file" id="importFile" accept=".json" style="display:none;" />
          </div>
          <p style="margin-top:12px; font-size:14px; color:var(--soft-gray);">
            匯出包含所有母任務、子任務與設定。資料僅儲存於本機。
          </p>
        </div>
      </section>
    </div>

    <footer>
      <div class="container">
        <p>© 2025 Task Vogue × Bazaar Hybrid Shell. All data stored locally.</p>
      </div>
    </footer>
  </main>

  <script>
    let appData = {
      masters: JSON.parse(localStorage.getItem('masters') || '[]'),
      subtasks: JSON.parse(localStorage.getItem('subtasks') || '[]')
    };

    function saveData() {
      localStorage.setItem('masters', JSON.stringify(appData.masters));
      localStorage.setItem('subtasks', JSON.stringify(appData.subtasks));
    }

    function renderMasterSelect() {
      const select = document.getElementById('subMasterSelect');
      select.innerHTML = '<option value="">— 請選擇母任務 —</option>';
      if (appData.masters.length === 0) {
        select.innerHTML = '<option value="">— 請先建立母任務 —</option>';
        return;
      }
      appData.masters.forEach(m => {
        const opt = document.createElement('option');
        opt.value = m.id;
        opt.textContent = m.title;
        select.appendChild(opt);
      });
    }

    function showFeedback(message, type) {
      const el = document.getElementById('feedback');
      el.textContent = message;
      el.className = `feedback ${type}`;
      el.style.display = 'block';
      if (type === 'success') {
        setTimeout(() => { el.style.display = 'none'; }, 5000);
      }
    }

    // CREATE MASTER
    document.getElementById('createMasterBtn').addEventListener('click', () => {
      const name = document.getElementById('newMasterName').value.trim();
      if (!name) return showFeedback('請輸入母任務名稱', 'error');
      const newMaster = { id: 'm' + Date.now(), title: name, createdAt: Date.now() };
      appData.masters.push(newMaster);
      saveData();
      document.getElementById('newMasterName').value = '';
      renderMasterSelect();
      showFeedback(`母任務「${name}」已建立`, 'success');
    });

    // CREATE SUBTASK — REMINDERS AS SINGLE STRING ARRAY
    document.getElementById('createSubBtn').addEventListener('click', () => {
      const masterId = document.getElementById('subMasterSelect').value;
      const title = document.getElementById('newSubTitle').value.trim();
      const remindersText = document.getElementById('newSubReminders').value.trim();
      if (!masterId) return showFeedback('請選擇所屬母任務', 'error');
      if (!title) return showFeedback('請輸入子任務標題', 'error');
      const newSub = {
        id: 's' + Date.now(),
        masterId,
        title,
        reminders: remindersText ? [remindersText] : [],
        createdAt: Date.now()
      };
      appData.subtasks.push(newSub);
      saveData();
      document.getElementById('newSubTitle').value = '';
      document.getElementById('newSubReminders').value = '';
      showFeedback(`子任務「${title}」已建立`, 'success');
    });

    // SEARCH MASTER DROPDOWN
    let selectedSourceMaster = null;
    let selectedSourceSub = null;

    document.getElementById('sourceMasterKeyword').addEventListener('input', () => {
      const term = document.getElementById('sourceMasterKeyword').value.trim().toLowerCase();
      const dropdown = document.getElementById('masterDropdown');
      dropdown.innerHTML = '';
      if (term.length === 0) {
        dropdown.classList.remove('show');
        return;
      }
      const results = appData.masters.filter(m => m.title.toLowerCase().includes(term));
      if (results.length === 0) {
        dropdown.innerHTML = '<div class="dropdown-item" style="color:var(--soft-gray);">無符合母任務</div>';
      } else {
        results.forEach(m => {
          const div = document.createElement('div');
          div.className = 'dropdown-item';
          div.textContent = m.title;
          div.addEventListener('click', () => {
            selectedSourceMaster = m;
            document.getElementById('sourceMasterKeyword').value = m.title;
            dropdown.classList.remove('show');
            selectedSourceSub = null;
            document.getElementById('sourceSubKeyword').value = '';
            document.getElementById('subDropdown').classList.remove('show');
          });
          dropdown.appendChild(div);
        });
      }
      dropdown.classList.add('show');
    });

    // SEARCH SUBTASK DROPDOWN (TITLE + REMINDERS)
    document.getElementById('sourceSubKeyword').addEventListener('input', () => {
      if (!selectedSourceMaster) {
        const dropdown = document.getElementById('subDropdown');
        dropdown.innerHTML = '<div class="dropdown-item" style="color:var(--soft-gray);">請先選擇來源母任務</div>';
        dropdown.classList.add('show');
        return;
      }
      const term = document.getElementById('sourceSubKeyword').value.trim().toLowerCase();
      const dropdown = document.getElementById('subDropdown');
      dropdown.innerHTML = '';
      if (term.length === 0) {
        dropdown.classList.remove('show');
        return;
      }
      const results = appData.subtasks.filter(s =>
        s.masterId === selectedSourceMaster.id &&
        (
          s.title.toLowerCase().includes(term) ||
          (s.reminders && s.reminders.join(' ').toLowerCase().includes(term))
        )
      );
      if (results.length === 0) {
        dropdown.innerHTML = '<div class="dropdown-item" style="color:var(--soft-gray);">此母任務下無符合子任務</div>';
      } else {
        results.forEach(s => {
          const div = document.createElement('div');
          div.className = 'dropdown-item';
          div.dataset.id = s.id;
          let content = `<strong>${s.title}</strong>`;
          if (s.reminders && s.reminders.length) {
            const preview = s.reminders[0].length > 50 ? s.reminders[0].substring(0, 50) + '...' : s.reminders[0];
            content += `<br><small style="color:var(--soft-gray);">提醒：${preview}</small>`;
          }
          div.innerHTML = content;
          div.addEventListener('click', () => {
            selectedSourceSub = s;
            document.getElementById('sourceSubKeyword').value = s.title;
            dropdown.classList.remove('show');
          });
          dropdown.appendChild(div);
        });
      }
      dropdown.classList.add('show');
    });

    // CLOSE DROPDOWN ON CLICK OUTSIDE
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.search-wrapper')) {
        document.querySelectorAll('.search-dropdown').forEach(el => el.classList.remove('show'));
      }
    });

    // CLONE FORM
    document.getElementById('clonerForm').addEventListener('submit', (e) => {
      e.preventDefault();
      if (!selectedSourceMaster) return showFeedback('請選擇來源母任務', 'error');
      if (!selectedSourceSub) return showFeedback('請選擇來源子任務', 'error');
      const targetName = document.getElementById('targetMaster').value.trim();
      if (!targetName) return showFeedback('請輸入目標母任務名稱', 'error');

      let targetMaster = appData.masters.find(m => m.title === targetName);
      if (!targetMaster) {
        targetMaster = { id: 'm' + Date.now(), title: targetName, createdAt: Date.now() };
        appData.masters.push(targetMaster);
      }

      const newSub = {
        id: 's' + Date.now(),
        masterId: targetMaster.id,
        title: selectedSourceSub.title,
        reminders: [...(selectedSourceSub.reminders || [])],
        createdAt: Date.now()
      };
      appData.subtasks.push(newSub);
      saveData();

      showFeedback(`子任務「${newSub.title}」已複製到「${targetMaster.title}」。請手動編輯排程。`, 'success');

      selectedSourceMaster = null;
      selectedSourceSub = null;
      document.getElementById('sourceMasterKeyword').value = '';
      document.getElementById('sourceSubKeyword').value = '';
      document.getElementById('targetMaster').value = '';
    });

    // EXPORT / IMPORT
    document.getElementById('exportBtn').addEventListener('click', () => {
      const data = {
        meta: { version: '1.0', exportedAt: new Date().toISOString() },
        masters: appData.masters,
        subtasks: appData.subtasks
      };
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `annual-task-cloner-${new Date().toISOString().slice(0,10)}.json`;
      a.click();
      URL.revokeObjectURL(url);
    });

    document.getElementById('importBtn').addEventListener('click', () => {
      document.getElementById('importFile').click();
    });

    document.getElementById('importFile').addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = (ev) => {
        try {
          const imported = JSON.parse(ev.target.result);
          if (imported.masters && imported.subtasks) {
            appData.masters = imported.masters;
            appData.subtasks = imported.subtasks;
            saveData();
            renderMasterSelect();
            showFeedback('資料匯入成功！', 'success');
          } else {
            throw new Error('無效資料結構');
          }
        } catch (err) {
          showFeedback('匯入失敗：' + err.message, 'error');
        }
        e.target.value = '';
      };
      reader.readAsText(file);
    });

    // INIT
    document.addEventListener('DOMContentLoaded', () => {
      const header = document.getElementById('main-header');
      window.addEventListener('scroll', () => {
        header.classList.toggle('scrolled', window.scrollY > 48);
      });

      const heroTitle = document.getElementById('hero-title');
      const text = heroTitle.textContent;
      heroTitle.innerHTML = '';
      text.split('').forEach((char, i) => {
        const span = document.createElement('span');
        span.textContent = char === ' ' ? '\u00A0' : char;
        span.style.opacity = '0';
        span.style.display = 'inline-block';
        span.style.animation = `fadeIn 0.6s ${i * 40}ms forwards`;
        heroTitle.appendChild(span);
      });
      const style = document.createElement('style');
      style.textContent = `
        @keyframes fadeIn {
          to { opacity: 1; transform: translateY(0); }
        }
        .hero-title span {
          transform: translateY(20px);
        }
      `;
      document.head.appendChild(style);

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('appear');
          }
        });
      }, { threshold: 0.1 });
      document.querySelectorAll('.reveal').forEach(el => observer.observe(el));

      renderMasterSelect();
    });
  </script>
</body>
</html>