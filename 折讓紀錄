<!DOCTYPE html>
<!--
單一檔案（file:// 離線可用）
- 無外部資源/CDN；純原生 HTML/CSS/JS。
- 所有按鈕 type="button"，避免表單重整。
- 動態元素以事件委派處理（data-action / data-k）。
- 僅使用 localStorage 與 <input type="file"> 進行持久化/匯入。
- 全域錯誤攔截 + Toast。
變更摘要（2025-09-25）
- 歷史紀錄點選即可載入主單（單選圓鈕或雙擊項目）。
- 「新增」：保存當筆→加入歷史→顯示於「當日清單」；保留當天日期並清空其他欄位以便連續輸入。
- 新增「清空」按鈕：建立今日空白表單。
- 明細新增「性質（進項/銷項）」欄位；Schema 升級至 v1.1.0（相容 v1.0.0）。
-->
<html lang="zh-Hant">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>發票折讓紀錄儀表板（離線）</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet">
<style>
  :root{
    --bg:#0B0E12; /* 更深邃的背景 */
    --fg:#F0F2F5; /* 略帶暖意的文字 */
    --muted:#9DA7BD; /* 柔和靜音色 */
    --accent:#5C6BC0; /* 新的品牌主色 */
    --highlight-gold:#D4AF37; /* 輔助高亮色：舊金黃 */
    --fg-strong:#FFFFFF; /* 強化標題文字色 */
    --ok:#27ae60; --warn:#f39c12; --err:#e74c3c; --card:#171a21; --line:#232736;
    --chip:#1e2430; --focus: var(--accent); /* 與新 accent 色一致 */
    /* --hl removed, now uses rgba(accent) directly */
    --red:#ff6b6b; --green:#51cf66; --yellow:#ffd43b;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0; background:var(--bg); color:var(--fg);
       font:14px/1.45 'Inter', "Noto Sans TC", ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "PingFang TC","Microsoft JhengHei","Helvetica Neue", Arial;}
  header.toolbar{position:sticky; top:0; z-index:9; background:linear-gradient(180deg,#11141b,#0f1115);
                 border-bottom:1px solid var(--line); padding:10px;}
  .toolbar .row{display:flex; gap:8px; flex-wrap:wrap; align-items:center}
  .toolbar h1{
    font-size: 28px; /* 大幅提升 */
    font-weight: 300;
    letter-spacing: 0.05em; /* 增加字距 */
    margin: 0 20px 0 0; /* 增加右側留白 */
    color: var(--fg-strong); /* 使用更鮮明的文字色 */
    font-family: 'Playfair Display', serif; /* 新字體 */
  }
  button{background:var(--chip); color:var(--fg); border:1px solid var(--line);
         padding:8px 12px; border-radius:10px; cursor:pointer;
         transition: background 0.25s ease-out, transform 0.25s ease-out, box-shadow 0.25s ease-out;} /* 優化動畫 */
  button:hover{
    background: #2D3447; /* 調整為更具層次的 hover 色 */
    transform: translateY(-2px); /* 輕微上浮效果 */
    box-shadow: 0 4px 12px rgba(0,0,0,0.2); /* 增加陰影深度 */
  }
  button[disabled]{
    opacity:.4; /* 調低透明度 */
    cursor: not-allowed;
    filter: grayscale(80%) blur(0.5px); /* 灰階模糊效果 */
  }
  .btn-warn{border-color:var(--warn); color:var(--warn)}
  .btn-err{border-color:var(--err); color:var(--err)}
  .btn-ok{border-color:var(--ok); color:var(--ok)}
  .layout{display:grid; grid-template-columns: 1fr 420px; gap:24px; padding:12px; max-width:1400px; margin:0 auto} /* 增加主布局間距 */
  @media (max-width:1100px){ .layout{grid-template-columns:1fr} }
  .card{background:var(--card); border:1px solid var(--line); border-radius:12px; padding:24px} /* 增加卡片內邊距 */
  .card h2, .card h3 {
    font-size: 20px;
    font-weight: 500;
    margin: 0 0 24px; /* 增加下方間距 */
    color: var(--fg-strong); /* 強化標題色 */
    font-family: 'Inter', sans-serif; /* 新字體 */
  }
  .grid2{display:grid; grid-template-columns:repeat(2,1fr); gap:8px}
  .grid3{display:grid; grid-template-columns:repeat(3,1fr); gap:8px}
  .field{display:flex; flex-direction:column; gap:10px} /* 增加 field 內間距 */
  .field label{font-size:12px; color:var(--muted)}
  input[type="text"], input[type="number"], input[type="date"], select{
    background:#0c0f14; border:1px solid var(--line); color:var(--fg);
    border-radius:10px; /* 統一圓角與按鈕一致 */
    padding:12px 14px; /* 增加輸入框高度與內邊距 */
    width:100%;
  }
  input:focus, select:focus{outline:2px solid var(--focus); border-color:transparent}
  .hint{font-size:12px; color:var(--muted)} .error{font-size:12px; color:var(--err)}
  table{width:100%; border-collapse:collapse; font-variant-numeric:tabular-nums lining-nums}
  th, td{
    border-bottom:1px dotted var(--line); /* 更輕盈的分隔線 */
    padding:12px 8px; /* 增加表格行高 */
    text-align:left
  }
  thead th{position:sticky; top:0; background:var(--card); z-index:1}
  tbody tr { /* 為行選取和差異高亮添加過渡 */
    transition: background 0.2s ease, border-left 0.2s ease;
  }
  tbody tr.selected{
    background: rgba(92, 107, 192, 0.15); /* 使用 accent 的半透明版本 */
    border-left: 4px solid var(--accent); /* 左側邊框強調選取 */
  }
  .controls{display:flex; gap:8px; flex-wrap:wrap; margin:8px 0}
  .rightcol{display:flex; flex-direction:column; gap:12px}
  .list{max-height:560px; overflow:auto; border-radius:10px}
  .item{display:grid; grid-template-columns:auto 1fr auto; gap:8px; align-items:center; padding:10px; border-bottom:1px solid var(--line)}
  .item:hover{background:#161b25}
  .badge{background:#21283a; color:#c9d4ff; padding:2px 6px; border-radius:6px; font-size:12px}
  .pill{background:#1d2a21; color:#8dffaa; padding:2px 6px; border-radius:6px; font-size:12px}
  .muted{color:var(--muted)} .ok{color:var(--ok)} .warn{color:var(--warn)}
  .diff-add{outline:2px solid var(--green); background-color: rgba(81, 207, 102, 0.08);} /* 差異背景色 */
  .diff-del{outline:2px solid var(--red); background-color: rgba(255, 107, 107, 0.08);} /* 差異背景色 */
  .diff-chg{outline:2px solid var(--yellow); background-color: rgba(255, 212, 59, 0.08);} /* 差異背景色 */
  .flex{display:flex; gap:10px; align-items:center}
  .space{flex:1}
  .totalbar{display:flex; gap:12px; flex-wrap:wrap; align-items:center; padding:16px; border:1px dashed var(--line); border-radius:10px; background:#111521} /* 增加 padding */
  .totalbar strong { /* 關鍵數據高亮 */
    font-size: 16px;
    font-weight: 600;
    color: var(--accent); /* 使用品牌主色 */
  }
  .totalbar strong#lblDelta.ok { color: var(--ok); } /* 確保狀態色優先 */
  .totalbar strong#lblDelta.warn { color: var(--warn); } /* 確保狀態色優先 */
  .toast{position:fixed; right:16px; bottom:16px; min-width:220px; max-width:340px;
         background:rgba(23, 26, 33, 0.95); /* 更精緻的背景 (card-rgb) */
         border:1px solid var(--line); color:var(--fg); padding:12px 14px; border-radius:12px;
         box-shadow:0 12px 40px rgba(0,0,0,0.45); /* 強化陰影 */
         opacity:0; transform:translateY(8px); pointer-events:none;
         transition: opacity 0.35s cubic-bezier(0.2, 0.8, 0.2, 1), transform 0.35s cubic-bezier(0.2, 0.8, 0.2, 1);} /* 優化動畫 */
  .toast.show{opacity:1; transform:translateY(0); pointer-events:auto} /* 修正 transform */
  .hl-badge{background:#282f44; color:#9ecbff; padding:2px 6px; border-radius:8px; font-size:12px}
  .kbd{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace; background:#11161f; border:1px solid #2a3144; padding:1px 6px; border-radius:6px}
  .sticky-sub{position:sticky; top:54px; background:var(--card); z-index:1; padding:8px 0}
  /* 當日清單 */
  .today-box{margin-top:12px; border:1px solid var(--line); border-radius:10px; max-height:220px; overflow:auto}
  .today-item{display:flex; gap:12px; align-items:center; padding:12px 14px; border-bottom:1px dashed #252a39; cursor:pointer} /* 增加 padding 和 gap */
  .today-item:hover{background:#161b25}
</style>
</head>
<body>
<header class="toolbar">
  <div class="row">
    <h1>發票折讓紀錄儀表板</h1>
    <button type="button" data-action="addCurrentAsNew" class="btn-ok" title="保存當筆→加入歷史→顯示於當日清單">新增</button>
    <button type="button" data-action="saveAs" title="命名保存為歷史快照">儲存</button>
    <button type="button" data-action="overwrite" title="以目前表單覆蓋選取的歷史" disabled>覆蓋</button>
    <button type="button" data-action="deleteHistory" class="btn-err" disabled>刪除</button>
    <button type="button" data-action="bulkDeleteHistory" class="btn-warn">批量刪除</button>
    <button type="button" data-action="exportJson" disabled>匯出</button>
    <button type="button" data-action="importJson">匯入</button>
    <button type="button" data-action="newDoc" title="建立今日空白表單">清空</button>
    <span class="space"></span>
    <span class="hint">鍵盤：<span class="kbd">Enter</span> 新增明細、<span class="kbd">Del</span> 刪除、<span class="kbd">Ctrl+D</span> 複製、<span class="kbd">Ctrl+Enter</span> 儲存</span>
    <input type="file" id="fileInp" accept="application/json" hidden />
  </div>
</header>

<div class="layout">
  <!-- 左側：主單 + 明細 + 當日清單 -->
  <section class="card">
    <h2>主單</h2>
    <div class="grid3">
      <div class="field">
        <label>發票年（民國）<span class="hl-badge">自動轉西元</span></label>
        <input id="rocYear" type="number" min="1" step="1" />
        <div class="error" data-err="rocYear"></div>
      </div>
      <div class="field">
        <label>月</label>
        <input id="month" type="number" min="1" max="12" step="1" />
        <div class="error" data-err="month"></div>
      </div>
      <div class="field">
        <label>日</label>
        <input id="day" type="number" min="1" max="31" step="1" />
        <div class="error" data-err="day"></div>
      </div>
    </div>

    <div class="grid2" style="margin-top:8px">
      <div class="field">
        <label>發票號碼 <span class="hint">格式：AA12345678 或 10 碼數字</span></label>
        <input id="invNo" type="text" placeholder="AB12345678" />
        <div class="error" data-err="invNo"></div>
      </div>
      <div class="field">
        <label>金額（中標金額，TWD）</label>
        <input id="total" type="number" min="0.01" step="0.01" placeholder="例如 10000" />
        <div class="error" data-err="total"></div>
      </div>
    </div>

    <div class="hint">西元日期：<span data-bind="greg">—</span></div>

    <div class="sticky-sub">
      <div class="controls">
        <strong>明細</strong>
        <button type="button" data-action="addRow">新增明細</button>
        <button type="button" data-action="dupRows">複製所選</button>
        <button type="button" data-action="delRows" class="btn-err">刪除所選</button>
        <button type="button" data-action="fixDelta" class="btn-warn" title="最大餘數法微調至總和=中標">修正差額</button>
        <span class="space"></span>
        <span class="hint">行選取：點勾選或 Shift 連選</span>
      </div>
    </div>

    <div style="max-height:320px; overflow:auto; border:1px solid var(--line); border-radius:10px">
      <table id="detailTable">
        <thead>
          <tr>
            <th style="width:34px"><input type="checkbox" id="chkAll"></th>
            <th style="width:120px">商品代號</th>
            <th style="width:92px">性質</th>
            <th style="width:90px">數量</th>
            <th style="width:120px">金額</th>
            <th style="width:140px">應回填金額（唯讀）</th>
            <th style="width:90px">狀態</th>
          </tr>
        </thead>
        <tbody><!-- 動態插入 --></tbody>
      </table>
    </div>

    <div class="totalbar" style="margin-top:10px">
      <div>中標金額：<strong id="lblTotal" class="ok">—</strong></div>
      <div>明細金額合計：<strong id="lblSumLine">—</strong></div>
      <div>總應回填金額：<strong id="lblSumBack">—</strong></div>
      <div>差額：<strong id="lblDelta">—</strong></div>
      <div id="deltaMsg" class="muted"></div>
    </div>

    <details style="margin-top:10px">
      <summary>使用說明 / 公式</summary>
      <ul class="hint">
        <li>公式：每筆明細 <code>i</code> 的 <strong>應回填金額</strong> = <code>中標金額 × (明細金額_i ÷ Σ明細金額)</code>，並四捨五入至小數第 2 位。</li>
        <li>若四捨五入造成總額與中標不相等，顯示差額，可按「修正差額」逐分調整至完全相等。</li>
        <li>「新增」：以目前主單日期保存當筆→加入歷史→留存在下方「當日清單」。主單將保留當天日期並清空其他欄位，方便連續輸入。</li>
      </ul>
    </details>

    <section class="today" style="margin-top:14px">
      <div class="flex">
        <h3>當日清單（依目前主單日期）</h3>
        <span class="space"></span>
        <span class="hint">點擊可載入回主單</span>
      </div>
      <div class="today-box" id="todayList"><!-- 動態插入 --></div>
    </section>
  </section>

  <!-- 右側：歷史 + 篩選 + 差異 -->
  <aside class="rightcol">
    <section class="card">
      <h3>歷史紀錄（localStorage）</h3>
      <div class="grid2">
        <div class="field">
          <label>快速搜尋（發票號/名稱）</label>
          <input id="q" type="text" placeholder="輸入關鍵字…" />
        </div>
        <div class="field">
          <label>金額範圍</label>
          <div class="flex">
            <input id="amtMin" type="number" step="0.01" placeholder="最小" />
            <span class="muted">~</span>
            <input id="amtMax" type="number" step="0.01" placeholder="最大" />
          </div>
        </div>
      </div>
      <div class="grid2" style="margin-top:6px">
        <div class="field">
          <label>起迄日期（西元 YYYY-MM-DD）</label>
          <div class="flex">
            <input id="dateFrom" type="date" />
            <span class="muted">~</span>
            <input id="dateTo" type="date" />
          </div>
        </div>
        <div class="field">
          <label>狀態</label>
          <div class="flex">
            <span class="badge">schema v<span id="schemaVer"></span></span>
            <span class="muted">共 <span id="histCount">0</span> 筆</span>
          </div>
        </div>
      </div>
      <div class="list" id="histList"><!-- 動態插入 --></div>
    </section>

    <section class="card" id="diffPanel">
      <h3>差異比較（目前表單 vs. 選取紀錄）</h3>
      <div class="hint">切換列表單選即時比較；不同欄位將外框高亮。</div>
      <div id="diffMsg" class="muted" style="margin-top:8px">尚未選取紀錄。</div>
    </section>
  </aside>
</div>

<div id="toast" class="toast"></div>

<script>
/* =============== 工具 =============== */
const Util = (() => {
  const nf = new Intl.NumberFormat('zh-Hant-TW', { minimumFractionDigits:2, maximumFractionDigits:2 });
  const rnd2 = v => Math.round((+v)*100)/100;
  const fmtTWD = v => Number.isFinite(+v) ? nf.format(rnd2(v)) : '—';
  const uuid = () => 'xxxxxxxx'.replace(/x/g,()=> (Math.random()*16|0).toString(16)) + Date.now().toString(36);
  return { rnd2, fmtTWD, uuid };
})();

/* =============== 日期換算 =============== */
const ROCDate = (() => {
  const toAD = (rocYear, m, d) => {
    if(!rocYear || !m || !d) return null;
    const y = 1911 + parseInt(rocYear,10);
    const dt = new Date(Date.UTC(y, m-1, d));
    if(isNaN(dt.getTime())) return null;
    const iso = dt.toISOString().slice(0,10);
    return { y, m, d, iso };
  };
  const todayROC = () => {
    const now = new Date();
    const y = now.getFullYear() - 1911;
    return { rocYear:y, month: now.getMonth()+1, day: now.getDate(), iso: new Date(Date.UTC(now.getFullYear(),now.getMonth(),now.getDate())).toISOString().slice(0,10) };
  };
  return { toAD, todayROC };
})();

/* =============== 驗證 =============== */
const Validator = (() => {
  const invRegex = /^(?:[A-Z]{2}\d{8}|\d{10})$/;
  function validMain(m){
    const e={};
    if(!m.rocYear || +m.rocYear<=0) e.rocYear='請輸入有效的民國年';
    if(!m.month || +m.month<1 || +m.month>12) e.month='月份需介於 1–12';
    if(!m.day || +m.day<1 || +m.day>31) e.day='日期日需介於 1–31';
    if(!m.invNo || !invRegex.test(String(m.invNo).toUpperCase())) e.invNo='發票號碼格式不符（AA12345678 或 10 碼數字）';
    if(m.total==null || +m.total<=0) e.total='中標金額需 > 0';
    return e;
  }
  function validRows(rows){
    const re={};
    rows.forEach((r,i)=>{
      if(r.lineAmount==null || +r.lineAmount<=0) re[i]='明細金額需 > 0';
      if(r.qty!=null && +r.qty<0) re[i]=(re[i]?re[i]+'；':'')+'數量不可為負';
    });
    return re;
  }
  return { validMain, validRows };
})();

/* =============== 差異 =============== */
const DiffUtil = (() => {
  function diffDoc(a,b){
    const chg={ main:{}, rows:[] };
    if(!a||!b) return chg;
    ['gregISO','rocYear','month','day','invNo','total'].forEach(k=>{
      if(String(a[k])!==String(b[k])) chg.main[k]=[a[k],b[k]];
    });
    const len=Math.max(a.rows.length,b.rows.length);
    for(let i=0;i<len;i++){
      const ra=a.rows[i], rb=b.rows[i];
      if(!ra && rb){ chg.rows.push({idx:i,type:'add'}); continue; }
      if(ra && !rb){ chg.rows.push({idx:i,type:'del'}); continue; }
      const keys=['itemCode','ioType','qty','lineAmount','backfill'];
      const diffk=keys.filter(k=> String(ra[k]??'')!==String(rb[k]??''));
      if(diffk.length) chg.rows.push({idx:i,type:'chg',keys:diffk});
    }
    return chg;
  }
  return { diffDoc };
})();

/* =============== 儲存 =============== */
const Storage = (() => {
  const NS='INV_CREDIT_V1';
  const list=()=> Object.keys(localStorage).filter(k=>k.startsWith(NS+':'))
    .map(k=>{try{return JSON.parse(localStorage.getItem(k))}catch(e){return null}})
    .filter(Boolean).sort((a,b)=>(b.updatedAt||0)-(a.updatedAt||0));
  const save=(doc,overwriteId)=>{
    const id=overwriteId||Util.uuid(), key=NS+':'+id, now=Date.now();
    const obj={...doc,id,createdAt:doc.createdAt||now,updatedAt:now};
    localStorage.setItem(key, JSON.stringify(obj)); return obj;
  };
  const get=id=>{const s=localStorage.getItem(NS+':'+id); return s?JSON.parse(s):null;};
  const remove=id=> localStorage.removeItem(NS+':'+id);
  const bulkRemove=ids=> ids.forEach(remove);
  return { list, save, get, remove, bulkRemove, NS };
})();

/* =============== Schema =============== */
const Schema = (() => {
  const VERSION='1.1.0';
  const SCHEMA_ID='折讓儀表板/v1';
  const wrap=(doc)=>({ schemaId:SCHEMA_ID, version:VERSION, payload:doc });
  function unwrap(obj){
    if(!obj || obj.schemaId!==SCHEMA_ID) throw new Error('不支援的 schemaId');
    // 版本相容：接收 1.0.0/1.1.0，缺欄位給預設
    const payload=obj.payload||{};
    (payload.rows||[]).forEach(r=>{ if(!('ioType' in r)) r.ioType='進項'; });
    return payload;
  }
  return { wrap, unwrap, VERSION };
})();

/* =============== 應用 =============== */
const App = (() => {
  const els={};
  let selectedHistId=null, selectedForBulk=new Set(), shiftAnchor=null;

  function initRefs(){
    els.rocYear = document.getElementById('rocYear');
    els.month   = document.getElementById('month');
    els.day     = document.getElementById('day');
    els.invNo   = document.getElementById('invNo');
    els.total   = document.getElementById('total');
    els.greg    = document.querySelector('[data-bind="greg"]');
    els.tbody   = document.querySelector('#detailTable tbody');
    els.chkAll  = document.getElementById('chkAll');

    els.lblTotal=document.getElementById('lblTotal');
    els.lblSumLine=document.getElementById('lblSumLine');
    els.lblSumBack=document.getElementById('lblSumBack');
    els.lblDelta=document.getElementById('lblDelta');
    els.deltaMsg=document.getElementById('deltaMsg');

    els.todayList=document.getElementById('todayList');

    els.histList=document.getElementById('histList');
    els.schemaVer=document.getElementById('schemaVer');
    els.histCount=document.getElementById('histCount');
    els.diffMsg=document.getElementById('diffMsg');

    els.q=document.getElementById('q');
    els.amtMin=document.getElementById('amtMin');
    els.amtMax=document.getElementById('amtMax');
    els.dateFrom=document.getElementById('dateFrom');
    els.dateTo=document.getElementById('dateTo');

    els.fileInp=document.getElementById('fileInp');

    els.err={
      rocYear:document.querySelector('[data-err="rocYear"]'),
      month:document.querySelector('[data-err="month"]'),
      day:document.querySelector('[data-err="day"]'),
      invNo:document.querySelector('[data-err="invNo"]'),
      total:document.querySelector('[data-err="total"]')
    };
  }

  function bindGlobal(){
    document.body.addEventListener('click', (e)=>{
      const btn=e.target.closest('[data-action]'); if(!btn) return;
      const act=btn.getAttribute('data-action'); if(actions[act]) actions[act](e);
    });

    // 日期改變 → 重新計算與當日清單過濾
    ['rocYear','month','day'].forEach(id=>{
      document.getElementById(id).addEventListener('input', ()=>{ recalc(); renderTodayList(); });
    });

    // 明細表
    els.tbody.addEventListener('input', onTableInput);
    els.tbody.addEventListener('click', onTableClick);
    els.chkAll.addEventListener('change', ()=> setAllRowChecked(els.chkAll.checked));

    // 鍵盤
    document.addEventListener('keydown',(e)=>{
      if(e.key==='Enter' && !e.ctrlKey && !e.metaKey){ e.preventDefault(); actions.addRow(); }
      if((e.ctrlKey||e.metaKey) && e.key==='d'){ e.preventDefault(); actions.dupRows(); }
      if((e.ctrlKey||e.metaKey) && e.key==='Enter'){ e.preventDefault(); actions.saveAs(); }
      if(e.key==='Delete'){ e.preventDefault(); actions.delRows(); }
    });

    // 右側篩選
    ['q','amtMin','amtMax','dateFrom','dateTo'].forEach(id=>{
      document.getElementById(id).addEventListener('input', renderHistList);
    });

    // 匯入
    els.fileInp.addEventListener('change', async (e)=>{
      const f=e.target.files[0]; if(!f) return;
      try{
        const txt=await f.text(); const js=JSON.parse(txt);
        const arr=Array.isArray(js)?js:[js]; let ok=0;
        arr.forEach(o=>{ const doc=Schema.unwrap(o); Storage.save(doc); ok++; });
        toast(`匯入完成，共 ${ok} 筆`); renderHistList(); renderTodayList();
      }catch(err){ toast('匯入失敗：'+(err.message||err),'err'); }
      finally{ els.fileInp.value=''; }
    });

    window.addEventListener('error', e=> toast('錯誤：'+(e.message||'未知'),'err'));
    window.addEventListener('unhandledrejection', e=> toast('非同步錯誤：'+(e.reason?.message||e.reason||'未知'),'err'));
  }

  function toast(msg,type){
    const t=document.getElementById('toast');
    t.textContent=msg;
    t.style.borderColor= type==='err'?'var(--err)':(type==='warn'?'var(--warn)':'var(--line)');
    t.classList.add('show'); setTimeout(()=> t.classList.remove('show'), 2400);
  }

  /* ---- 明細表 ---- */
  function rowTpl(r){
    return `<tr data-id="${r.id}">
      <td><input type="checkbox" class="rowchk"></td>
      <td><input data-k="itemCode" type="text" value="${esc(r.itemCode||'')}" placeholder="商品代號"></td>
      <td>
        <select data-k="ioType">
          <option value="進項" ${r.ioType==='進項'?'selected':''}>進項</option>
          <option value="銷項" ${r.ioType==='銷項'?'selected':''}>銷項</option>
        </select>
      </td>
      <td><input data-k="qty" type="number" step="1" min="0" value="${r.qty ?? ''}" placeholder="數量"></td>
      <td><input data-k="lineAmount" type="number" step="0.01" min="0" value="${r.lineAmount ?? ''}" placeholder="金額"></td>
      <td class="muted"><span data-k="backfill">${Util.fmtTWD(r.backfill ?? 0)}</span></td>
      <td><span class="badge">${r._status||'—'}</span></td>
    </tr>`;
  }
  const esc = s => String(s).replace(/[&<>"']/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));

  function addRow(initial={}){
    const r={ id:Util.uuid(), itemCode:initial.itemCode||'', ioType:initial.ioType||'進項',
              qty: initial.qty ?? 1, lineAmount: initial.lineAmount ?? 0, backfill:0, _status:'new' };
    els.tbody.insertAdjacentHTML('beforeend', rowTpl(r)); recalc();
  }
  const selectedRowEls = () => Array.from(els.tbody.querySelectorAll('tr')).filter(tr => tr.querySelector('.rowchk')?.checked);
  const setAllRowChecked = v => { els.tbody.querySelectorAll('.rowchk').forEach(chk=> chk.checked=v); renderRowSelection(); };
  function renderRowSelection(){ els.tbody.querySelectorAll('tr').forEach(tr=> tr.classList.toggle('selected', !!tr.querySelector('.rowchk')?.checked)); }
  function onTableClick(e){
    const chk=e.target.closest('.rowchk');
    if(chk){
      const rows=Array.from(els.tbody.querySelectorAll('tr'));
      const idx=rows.indexOf(chk.closest('tr'));
      if(e.shiftKey && shiftAnchor!=null){
        const [a,b]=[shiftAnchor,idx].sort((x,y)=>x-y);
        for(let i=a;i<=b;i++) rows[i].querySelector('.rowchk').checked=true;
      }
      shiftAnchor=idx; renderRowSelection();
    }
  }
  function onTableInput(e){
    const inp=e.target.closest('[data-k]'); if(!inp) return;
    const tr=inp.closest('tr'); tr.dataset.dirty='1';
    tr.querySelector('td:last-child .badge').textContent='edit';
    recalc();
  }
  function delRows(){
    const sel=selectedRowEls(); if(sel.length===0){ toast('請先勾選要刪除的明細','warn'); return; }
    sel.forEach(tr=> tr.remove()); els.chkAll.checked=false; recalc();
  }
  function dupRows(){
    const sel=selectedRowEls(); if(sel.length===0){ toast('請先勾選要複製的明細','warn'); return; }
    sel.forEach(tr=>{
      const o=rowToObj(tr);
      addRow({ itemCode:o.itemCode, ioType:o.ioType, qty:o.qty, lineAmount:o.lineAmount });
    });
  }
  function rowToObj(tr){
    const val = k => {
      const el=tr.querySelector(`[data-k="${k}"]`); if(!el) return null;
      if(el.tagName==='INPUT'){ return el.type==='number' ? (el.value===''?null:+el.value) : el.value; }
      if(el.tagName==='SELECT'){ return el.value; }
      return el.textContent;
    };
    return {
      id:tr.dataset.id,
      itemCode:val('itemCode'),
      ioType:val('ioType')||'進項',
      qty:val('qty'),
      lineAmount:val('lineAmount'),
      backfill: parseFloat(String(val('backfill')||'0').replace(/,/g,''))||0
    };
  }
  const tableToRows = () => Array.from(els.tbody.querySelectorAll('tr')).map(rowToObj);

  /* ---- 計算 ---- */
  function computeBackfill(total, rows){
    const valid=rows.filter(r=> +r.lineAmount>0);
    const sumLine=Util.rnd2(valid.reduce((a,b)=> a+(+b.lineAmount||0),0));
    if(sumLine<=0){
      return { rows: rows.map(r=>({...r, backfill:0})), sumLine:0, sumBack:0, delta:Util.rnd2(total-0) };
    }
    const tmp=valid.map(r=>{
      const share=(+r.lineAmount)/sumLine;
      const raw=total*share, rounded=Util.rnd2(raw);
      return { r, raw, rounded };
    });
    const map=new Map(tmp.map(x=>[x.r.id, x.rounded]));
    rows.forEach(r=>{ if(!map.has(r.id)) map.set(r.id,0); });
    const out=rows.map(r=>({...r, backfill: map.get(r.id)||0 }));
    const sumBack=Util.rnd2(out.reduce((a,b)=> a+(+b.backfill||0),0));
    const delta=Util.rnd2(total - sumBack);
    return { rows:out, sumLine, sumBack, delta };
  }
  function fixDelta(total, rows){
    const valid=rows.filter(r=> +r.lineAmount>0);
    const sumLine=Util.rnd2(valid.reduce((a,b)=> a+(+b.lineAmount||0),0));
    if(sumLine<=0) return { rows, sumLine:0, sumBack:0, delta:total };
    const tmp=valid.map(r=>{
      const raw=total*((+r.lineAmount)/sumLine);
      return { r, raw, rounded: Util.rnd2(raw) };
    });
    let sumBack=Util.rnd2(tmp.reduce((a,b)=> a+b.rounded,0));
    let delta=Util.rnd2(total - sumBack);
    if(delta!==0){
      if(delta>0){
        tmp.sort((a,b)=> (b.raw-b.rounded)-(a.raw-a.rounded));
        let cents=Math.round(delta*100);
        for(let i=0;cents>0;i=(i+1)%tmp.length){ tmp[i].rounded=Util.rnd2(tmp[i].rounded+0.01); cents--; }
      }else{
        tmp.sort((a,b)=> (a.rounded-a.raw)-(b.rounded-b.raw));
        let cents=Math.round(Math.abs(delta)*100);
        for(let i=0;cents>0;i=(i+1)%tmp.length){
          const next=Util.rnd2(tmp[i].rounded-0.01);
          if(next>=0){ tmp[i].rounded=next; cents--; }
        }
      }
      sumBack=Util.rnd2(tmp.reduce((a,b)=> a+b.rounded,0));
      delta=Util.rnd2(total - sumBack);
    }
    const map=new Map(tmp.map(x=>[x.r.id,x.rounded]));
    const out=rows.map(r=>({...r, backfill: map.get(r.id)||0 }));
    return { rows:out, sumLine, sumBack, delta };
  }

  function recalc(opts={}){
    const m=readMain(); const rows=tableToRows();
    const errM=Validator.validMain(m); const errR=Validator.validRows(rows);
    for(const k of Object.keys(els.err)) els.err[k].textContent=errM[k]||'';
    Array.from(els.tbody.querySelectorAll('tr')).forEach((tr,i)=>{
      const badge=tr.querySelector('td:last-child .badge');
      if(errR[i]){ badge.textContent='error'; badge.style.color='var(--err)'; }
      else if(tr.dataset.dirty){ badge.textContent='edit'; badge.style.color=''; }
      else { badge.textContent='—'; badge.style.color=''; }
    });
    const ad=ROCDate.toAD(m.rocYear,m.month,m.day);
    els.greg.textContent=ad?ad.iso:'—';

    const { rows:computed, sumLine, sumBack, delta } = computeBackfill(+m.total||0, rows);
    const map=new Map(computed.map(x=>[x.id,x.backfill]));
    els.tbody.querySelectorAll('tr').forEach(tr=>{
      tr.querySelector('[data-k="backfill"]').textContent=Util.fmtTWD(map.get(tr.dataset.id)||0);
    });

    els.lblTotal.textContent=Util.fmtTWD(+m.total||0);
    els.lblSumLine.textContent=Util.fmtTWD(sumLine);
    els.lblSumBack.textContent=Util.fmtTWD(sumBack);
    els.lblDelta.textContent=Util.fmtTWD(delta);
    els.lblDelta.className = delta===0 ? 'ok' : 'warn';
    els.deltaMsg.textContent = delta===0 ? 'OK：總應回填金額等於中標金額。' : '提示：因四捨五入產生差額，可按「修正差額」微調至完全相等。';
    if(opts.fromFix){ els.deltaMsg.textContent = delta===0 ? '已修正差額。' : '仍有差額，請檢查行金額。'; }
  }

  /* ---- 主單讀寫 ---- */
  function readMain(){
    return {
      rocYear:+els.rocYear.value||null,
      month:+els.month.value||null,
      day:+els.day.value||null,
      invNo:(els.invNo.value||'').trim().toUpperCase(),
      total: els.total.value===''?null:+els.total.value
    };
  }
  function writeMain(doc){
    els.rocYear.value=doc.rocYear??'';
    els.month.value=doc.month??'';
    els.day.value=doc.day??'';
    els.invNo.value=doc.invNo??'';
    els.total.value=doc.total??'';
    els.tbody.innerHTML='';
    (doc.rows||[]).forEach(r=> els.tbody.insertAdjacentHTML('beforeend', rowTpl(r)));
    els.chkAll.checked=false; recalc(); renderTodayList();
  }
  function collectDoc(){
    const m=readMain(); const ad=ROCDate.toAD(m.rocYear,m.month,m.day);
    const rows=tableToRows(); const c=computeBackfill(+m.total||0, rows);
    return {
      name: suggestName(m,ad),
      gregISO: ad?.iso || '',
      rocYear:m.rocYear, month:m.month, day:m.day,
      invNo:m.invNo, total: Util.rnd2(+m.total||0),
      rows: c.rows.map(r=>({ id:r.id, itemCode:r.itemCode||'', ioType:r.ioType||'進項',
                              qty:r.qty??0, lineAmount:Util.rnd2(+r.lineAmount||0), backfill:Util.rnd2(+r.backfill||0)})),
      _calc:{ sumLine:c.sumLine, sumBack:c.sumBack, delta:c.delta }
    };
  }
  const suggestName=(m,ad)=> `${m.invNo||'未命名'}@${ad?.iso||'未定'}`;

  /* ---- 歷史清單 ---- */
  function renderHistList(){
    const items=Storage.list(); els.schemaVer.textContent=Schema.VERSION; els.histCount.textContent=items.length;
    const q=(els.q.value||'').trim().toUpperCase();
    const min=els.amtMin.value===''?-Infinity:+els.amtMin.value;
    const max=els.amtMax.value===''? Infinity:+els.amtMax.value;
    const d1=els.dateFrom.value||'0000-00-00', d2=els.dateTo.value||'9999-12-31';
    const fil=items.filter(x=>{
      const hitQ=!q || (x.name||'').toUpperCase().includes(q) || (x.invNo||'').toUpperCase().includes(q);
      const hitA=(x.total||0)>=min && (x.total||0)<=max;
      const date=x.gregISO||'0000-00-00'; const hitD=date>=d1 && date<=d2;
      return hitQ && hitA && hitD;
    });
    els.histList.innerHTML = fil.map(x=>`
      <div class="item" data-hist-id="${x.id}" title="雙擊載入到主單">
        <div><input type="radio" name="histSel" ${x.id===selectedHistId?'checked':''}></div>
        <div>
          <div class="flex">
            <strong class="hist-name">${esc(x.name||'(未命名)')}</strong>
            <span class="badge">${esc(x.invNo||'—')}</span>
            <span class="pill">${x.rows?.length||0} 筆明細</span>
            <span class="muted">${x.gregISO||'—'}</span>
          </div>
          <div class="muted">金額：${Util.fmtTWD(x.total||0)}　更新：${new Date(x.updatedAt||0).toLocaleString()}</div>
        </div>
        <div><input type="checkbox" class="bulkmark" ${selectedForBulk.has(x.id)?'checked':''} title="批量刪除標記"></div>
      </div>
    `).join('') || `<div class="muted" style="padding:10px">沒有符合條件的紀錄。</div>`;

    els.histList.querySelectorAll('.item').forEach(div=>{
      const id=div.dataset.histId;
      // 單選 → 載入 + 差異顯示
      div.querySelector('input[type="radio"]').addEventListener('change', ()=>{
        selectedHistId=id; loadHistToMain(id); updateDiffPanel();
        setHistActionState(true);
      });
      // 雙擊任何區域 → 載入
      div.addEventListener('dblclick', ()=>{ selectedHistId=id; loadHistToMain(id); updateDiffPanel(); setHistActionState(true); });
      // 批量刪除勾選
      div.querySelector('.bulkmark').addEventListener('change', (e)=>{ if(e.target.checked) selectedForBulk.add(id); else selectedForBulk.delete(id); });
    });
    setHistActionState(!!selectedHistId);
  }
  function setHistActionState(enabled){
    document.querySelector('[data-action="overwrite"]').disabled=!enabled;
    document.querySelector('[data-action="deleteHistory"]').disabled=!enabled;
    document.querySelector('[data-action="exportJson"]').disabled=!enabled;
  }
  function loadHistToMain(id){
    const doc=Storage.get(id); if(!doc){ toast('找不到該筆紀錄','err'); return; }
    writeMain(doc); toast('已載入歷史紀錄');
  }
  function updateDiffPanel(){
    const cur=collectDoc(); const hist=selectedHistId?Storage.get(selectedHistId):null;
    if(!hist){ els.diffMsg.textContent='尚未選取紀錄。'; return; }
    const chg=DiffUtil.diffDoc(cur,hist);
    const mkeys=Object.keys(chg.main); let msg=[];
    if(mkeys.length) msg.push('主單：'+mkeys.join('、 '));
    Array.from(els.tbody.querySelectorAll('tr')).forEach((tr,idx)=>{
      tr.classList.remove('diff-add','diff-del','diff-chg');
      const r=chg.rows.find(x=>x.idx===idx); if(!r) return;
      tr.classList.add(r.type==='add'?'diff-add': r.type==='del'?'diff-del':'diff-chg');
    });
    els.diffMsg.textContent = msg.join('； ') || '目前表單與選取紀錄比較：已以外框高亮顯示變更/新增/刪除。';
  }

  /* ---- 當日清單（依目前主單日期） ---- */
  function renderTodayList(){
    const m=readMain(); const ad=ROCDate.toAD(m.rocYear,m.month,m.day);
    const iso=ad?.iso || '';
    if(!iso){ els.todayList.innerHTML = `<div class="muted" style="padding:8px">請先輸入有效日期。</div>`; return; }
    const items=Storage.list().filter(x=> x.gregISO===iso);
    if(items.length===0){ els.todayList.innerHTML = `<div class="muted" style="padding:8px">該日期尚無資料。</div>`; return; }
    els.todayList.innerHTML = items.map(x=>`
      <div class="today-item" data-id="${x.id}" title="點擊載入">
        <span class="badge">${esc(x.invNo||'—')}</span>
        <span>${esc(x.name||'')}</span>
        <span class="muted">金額：${Util.fmtTWD(x.total||0)}</span>
        <span class="pill">${x.rows?.length||0} 明細</span>
      </div>
    `).join('');
    els.todayList.querySelectorAll('.today-item').forEach(div=>{
      div.addEventListener('click', ()=>{
        selectedHistId=div.dataset.id; loadHistToMain(selectedHistId); updateDiffPanel(); setHistActionState(true);
      });
    });
  }

  /* ---- 動作 ---- */
  const actions = {
    newDoc(){ // 建立今日空白表單
      if(!confirm('清空目前表單並建立今日空白？')) return;
      const t=ROCDate.todayROC();
      writeMain({ rocYear:t.rocYear, month:t.month, day:t.day, invNo:'', total:'', rows:[] });
      selectedHistId=null; selectedForBulk.clear(); renderHistList(); toast('已建立今日空白表單');
    },
    addCurrentAsNew(){ // 新增：保存當筆→加入歷史→顯示於當日清單；清空號碼/金額/明細，保留日期
      const doc=collectDoc();
      const errM=Validator.validMain(doc), errR=Validator.validRows(doc.rows);
      if(Object.keys(errM).length){ toast('主單欄位有誤，請修正後再新增。','err'); recalc(); return; }
      if(Object.keys(errR).length){ toast('明細欄位有誤，請修正後再新增。','err'); recalc(); return; }
      const saved=Storage.save(doc);
      // 保留日期，清空其他，準備下一筆
      const keepDate={ rocYear:doc.rocYear, month:doc.month, day:doc.day, invNo:'', total:'', rows:[] };
      writeMain(keepDate);
      renderHistList(); renderTodayList();
      selectedHistId=saved.id; updateDiffPanel(); setHistActionState(true);
      toast('已新增當筆，並加入當日清單');
    },
    addRow(){ addRow(); },
    delRows(){ delRows(); },
    dupRows(){ dupRows(); },
    fixDelta(){
      const m=readMain(); const rows=tableToRows();
      const fixed=fixDelta(+m.total||0, rows);
      const map=new Map(fixed.rows.map(r=>[r.id,r.backfill]));
      els.tbody.querySelectorAll('tr').forEach(tr=>{
        tr.querySelector('[data-k="backfill"]').textContent=Util.fmtTWD(map.get(tr.dataset.id)||0);
      });
      els.lblSumLine.textContent=Util.fmtTWD(fixed.sumLine);
      els.lblSumBack.textContent=Util.fmtTWD(fixed.sumBack);
      els.lblDelta.textContent=Util.fmtTWD(fixed.delta);
      els.lblDelta.className = fixed.delta===0 ? 'ok' : 'warn';
      els.deltaMsg.textContent = fixed.delta===0 ? '已修正差額。' : '仍有差額，請檢查行金額。';
    },
    saveAs(){
      const doc=collectDoc();
      const errM=Validator.validMain(doc), errR=Validator.validRows(doc.rows);
      if(Object.keys(errM).length){ toast('主單欄位有誤，請修正後再保存。','err'); recalc(); return; }
      if(Object.keys(errR).length){ toast('明細欄位有誤，請修正後再保存。','err'); recalc(); return; }
      const name=prompt('請為此快照命名（可留空使用預設）：', doc.name||'');
      if(name!=null && name.trim()!=='') doc.name=name.trim();
      const saved=Storage.save(doc);
      selectedHistId=saved.id; selectedForBulk.clear(); renderHistList(); renderTodayList(); toast('已儲存快照');
    },
    overwrite(){
      if(!selectedHistId){ toast('請先選取要覆蓋的歷史紀錄','warn'); return; }
      if(!confirm('確定以目前表單覆蓋所選紀錄？（不可復原）')) return;
      const doc=collectDoc(); Storage.save(doc, selectedHistId);
      renderHistList(); renderTodayList(); toast('已覆蓋紀錄');
    },
    deleteHistory(){
      if(!selectedHistId){ toast('請先選取紀錄','warn'); return; }
      if(!confirm('確定刪除所選紀錄？')) return;
      Storage.remove(selectedHistId); selectedHistId=null;
      renderHistList(); renderTodayList(); els.diffMsg.textContent='紀錄已刪除。'; setHistActionState(false);
      toast('已刪除');
    },
    bulkDeleteHistory(){
      const ids=Array.from(selectedForBulk); if(ids.length===0){ toast('請先在列表右側勾選要刪除的紀錄','warn'); return; }
      if(!confirm(`確定批量刪除 ${ids.length} 筆紀錄？`)) return;
      Storage.bulkRemove(ids); if(ids.includes(selectedHistId)) selectedHistId=null;
      selectedForBulk.clear(); renderHistList(); renderTodayList(); setHistActionState(!!selectedHistId);
      toast('批量刪除完成');
    },
    exportJson(){
      let payload=[];
      if(selectedHistId){ payload=[Schema.wrap(Storage.get(selectedHistId))]; }
      else{
        const all=Storage.list(); if(all.length===0){ toast('沒有可匯出的資料','warn'); return; }
        if(!confirm('未選取紀錄，是否匯出全部？')) return;
        payload=all.map(x=>Schema.wrap(x));
      }
      const blob=new Blob([ JSON.stringify(payload.length===1?payload[0]:payload, null, 2) ], {type:'application/json'});
      const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=`invoice-credit-${Date.now()}.json`; a.click(); URL.revokeObjectURL(a.href);
      toast('已匯出 JSON 檔');
    },
    importJson(){ els.fileInp.click(); }
  };

  /* ---- 初始化與示例 ---- */
  function seedIfEmpty(){
    if(Storage.list().length) return;
    const demo1 = {
      name:'AB12345678@2025-09-15',
      gregISO:'2025-09-15', rocYear:114, month:9, day:15,
      invNo:'AB12345678', total:10000.00,
      rows:[
        {id:Util.uuid(), itemCode:'FOOD-40x1500', ioType:'進項', qty:1, lineAmount:6000.00, backfill:6000.00},
        {id:Util.uuid(), itemCode:'WRAP-ROLL',    ioType:'銷項', qty:2, lineAmount:4000.00, backfill:4000.00},
      ],
      _calc:{ sumLine:10000.00, sumBack:10000.00, delta:0}
    };
    const demo2 = {
      name:'CD87654321@2025-09-20',
      gregISO:'2025-09-20', rocYear:114, month:9, day:20,
      invNo:'CD87654321', total:12345.67,
      rows:[
        {id:Util.uuid(), itemCode:'A001', ioType:'進項', qty:3, lineAmount:7000.00, backfill:0},
        {id:Util.uuid(), itemCode:'B002', ioType:'進項', qty:1, lineAmount:3456.78, backfill:0},
        {id:Util.uuid(), itemCode:'C003', ioType:'銷項', qty:5, lineAmount:888.89,  backfill:0},
      ]
    };
    const c=computeBackfill(demo2.total, demo2.rows);
    demo2.rows=c.rows; demo2._calc={ sumLine:c.sumLine, sumBack:c.sumBack, delta:c.delta };
    Storage.save(demo1); Storage.save(demo2);
  }

  function start(){
    initRefs(); bindGlobal(); seedIfEmpty();
    const t=ROCDate.todayROC();
    // 今日空白 + 兩筆示範明細
    writeMain({ rocYear:t.rocYear, month:t.month, day:t.day, invNo:'', total:'', rows:[
      { id:Util.uuid(), itemCode:'FOOD-40x1500', ioType:'進項', qty:1, lineAmount:1500, backfill:0, _status:'demo'},
      { id:Util.uuid(), itemCode:'WRAP-FOOD',    ioType:'銷項', qty:2, lineAmount:500,  backfill:0, _status:'demo'},
    ]});
    renderHistList(); renderTodayList(); toast('已載入（今日空白 + 示例資料）');
  }

  return { start };
})();

/* 啟動 */
document.addEventListener('DOMContentLoaded', App.start);

/* ========== 基本 E2E 測試步驟（註解） ==========
1) 歷史載入：在右側「歷史紀錄」點單選或雙擊某筆 → 左側主單應載入該筆，差異面板更新。
2) 新增流程：
   - 在左側輸入今日日期/發票號/金額與明細，按「新增」；
   - 該筆加入歷史，左側「當日清單」出現一列；主單保留日期但清空其他欄位以便輸入下一筆；
   - 連續新增多筆 → 「當日清單」可捲動檢視全部。
3) 明細性質：每行可選「進項/銷項」，保存後在歷史/當日清單載入仍可見。
4) 修正差額：將某行金額改為 3999.99 造成差額，按「修正差額」後差額應為 0。
5) 匯出/匯入：選取某筆匯出 JSON；清空 localStorage 後匯入可還原（v1.0.0 與 v1.1.0 皆可）。
6) 鍵盤：Enter 新增明細；Delete 刪除所選；Ctrl+D 複製；Ctrl+Enter 儲存。
================================================= */
</script>
</body>
</html>
