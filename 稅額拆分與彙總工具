<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>稅額拆分與彙總工具</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover-color: #0056b3;
            --secondary-color: #6c757d;
            --secondary-hover-color: #5a6268;
            --success-color: #28a745;
            --success-hover-color: #218838;
            --error-bg-color: #f8d7da;
            --error-text-color: #721c24;
            --error-border-color: #f5c6cb;
            --success-bg-color: #d4edda;
            --success-text-color: #155724;
            --success-border-color: #c3e6cb;
            --warning-bg-color: #fff3cd;
            --warning-text-color: #856404;
            --background-light: #f4f7f9;
            --background-white: #fff;
            --text-dark: #333;
            --text-heading: #1a2533;
            --border-color-light: #e9ecef;
            --border-color-medium: #ced4da;
            --border-color-dark: #dee2e6;
            --box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            --spacing-sm: 10px;
            --spacing-md: 15px;
            --spacing-lg: 20px;
            --spacing-xl: 25px;
            --border-radius: 8px;
            --border-radius-sm: 4px;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--background-light);
            color: var(--text-dark);
            margin: 0;
            padding: var(--spacing-lg);
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .container {
            width: 100%;
            max-width: 1200px;
            background-color: var(--background-white);
            padding: var(--spacing-xl);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }
        h1, h2 {
            color: var(--text-heading);
            border-bottom: 2px solid var(--border-color-light);
            padding-bottom: var(--spacing-sm);
        }
        .control-panel, .summary-panel, .results-panel {
            margin-bottom: var(--spacing-xl);
        }
        .input-group {
            margin-bottom: var(--spacing-md);
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: var(--spacing-sm);
        }
        .input-group label {
            font-weight: bold;
            margin-right: 5px;
        }
        input[type="file"], select, button {
            padding: 8px 12px;
            border: 1px solid var(--border-color-medium);
            border-radius: var(--border-radius-sm);
            font-size: 1rem;
            cursor: pointer;
        }
        button {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
            transition: background-color 0.2s;
        }
        button:disabled {
            background-color: #a0cfff;
            cursor: not-allowed;
        }
        button:hover:not(:disabled) {
            background-color: var(--primary-hover-color);
        }
        .btn-secondary {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
        }
        .btn-secondary:hover:not(:disabled) {
            background-color: var(--secondary-hover-color);
        }
        .btn-success {
            background-color: var(--success-color);
            border-color: var(--success-color);
        }
        .btn-success:hover:not(:disabled) {
            background-color: var(--success-hover-color);
        }
        #message-area {
            padding: var(--spacing-md);
            border-radius: var(--border-radius-sm);
            margin-top: var(--spacing-md);
            font-weight: bold;
        }
        .message-error {
            background-color: var(--error-bg-color);
            color: var(--error-text-color);
            border: 1px solid var(--error-border-color);
        }
        .message-success {
            background-color: var(--success-bg-color);
            color: var(--success-text-color);
            border: 1px solid var(--success-border-color);
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: var(--spacing-lg);
        }
        .summary-card {
            background-color: #f8f9fa;
            padding: var(--spacing-md);
            border-radius: var(--border-radius-sm);
            border: 1px solid var(--border-color-dark);
        }
        .summary-card h3 {
            margin-top: 0;
            color: var(--primary-hover-color);
        }
        .summary-card p {
            margin: 5px 0;
            display: flex;
            justify-content: space-between;
        }
        .summary-card p span:last-child {
            font-weight: bold;
        }
        .table-container {
            max-height: 500px;
            overflow-y: auto;
            border: 1px solid var(--border-color-dark);
            margin-top: var(--spacing-md);
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        thead {
            position: sticky;
            top: 0;
            background-color: var(--border-color-light);
        }
        th {
            font-weight: bold;
        }
        tr.error-row td {
            background-color: var(--warning-bg-color);
            color: var(--warning-text-color);
        }
        .readonly-input {
            background-color: var(--border-color-light);
            padding: 8px;
            border-radius: var(--border-radius-sm);
            border: 1px solid var(--border-color-medium);
            display: inline-block;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>離線 XLSX 稅額拆分與彙總工具</h1>
        <p>上傳檔案 → 針對統編為 00000000 的列拆分未稅/稅額 → 不改動其他列 → 顯示雙區彙總 → 匯出。</p>
        
        <div class="control-panel">
            <h2>1. 上傳與設定</h2>
            <div class="input-group">
                <label for="file-input">選擇檔案 (.xlsx, .csv):</label>
                <input type="file" id="file-input" accept=".xlsx, .csv">
                <button id="download-template-btn" class="btn-secondary">下載範本</button>
            </div>
            <div class="input-group">
                <label for="sheet-selector">選擇工作表:</label>
                <select id="sheet-selector" disabled></select>
            </div>
            <div class="input-group hidden" id="column-mapper">
                <p>⚠️ 找不到預設欄位，請手動對應：</p>
                <label for="id-col-mapper">統一編號:</label>
                <select id="id-col-mapper"></select>
                <label for="amount-col-mapper">銷售額:</label>
                <select id="amount-col-mapper"></select>
            </div>
            <div class="input-group">
                <label>稅率 (固定):</label>
                <span id="tax-rate-display" class="readonly-input">5%</span>
            </div>
            <button id="process-btn" disabled>開始處理</button>
        </div>

        <div id="message-area" class="hidden"></div>

        <section class="summary-panel hidden" id="summary-section">
            <h2>2. 彙總結果</h2>
            <div class="summary-grid">
                <div class="summary-card" id="summary-meta"></div>
                <div class="summary-card" id="summary-a"></div>
                <div class="summary-card" id="summary-b"></div>
                <div class="summary-card" id="summary-all"></div>
            </div>
        </section>

        <section class="results-panel hidden" id="results-section">
            <h2>3. 處理後明細</h2>
            <div class="input-group">
                <button id="export-xlsx-btn" class="btn-success">下載處理後.xlsx</button>
                <button id="export-csv-btn" class="btn-secondary">下載處理後.csv</button>
            </div>
            <div class="table-container">
                <table id="results-table"></table>
            </div>
        </section>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- Global Constants ---
        const UNIFIED_ID_DEFAULT = '00000000';
        const HEADER_UNIFIED_ID = '統一編號';
        const HEADER_SALES_AMOUNT = '銷售額';
        const HEADER_UNTAXED_SALES = '未稅銷售額';
        const HEADER_TAX_AMOUNT = '稅額';
        const HEADER_STATUS = '處理狀態';
        const HEADER_REMARK = '備註';
        const TAX_RATE = 0.05;
        const MAX_ROWS = 5000;
        const MAX_FILE_SIZE = 20 * 1024 * 1024; // 20MB

        // --- DOM Elements ---
        const fileInput = document.getElementById('file-input');
        const sheetSelector = document.getElementById('sheet-selector');
        const processBtn = document.getElementById('process-btn');
        const downloadTemplateBtn = document.getElementById('download-template-btn');
        const messageArea = document.getElementById('message-area');
        const summarySection = document.getElementById('summary-section');
        const resultsSection = document.getElementById('results-section');
        const columnMapper = document.getElementById('column-mapper');
        const idColMapper = document.getElementById('id-col-mapper');
        const amountColMapper = document.getElementById('amount-col-mapper');
        const exportXlsxBtn = document.getElementById('export-xlsx-btn');
        const exportCsvBtn = document.getElementById('export-csv-btn');

        // --- Global State ---
        let workbook = null;
        let processedData = [];
        let summaryData = {};

        // --- Event Listeners ---
        fileInput.addEventListener('change', handleFile);
        sheetSelector.addEventListener('change', () => {
            processBtn.disabled = !sheetSelector.value;
        });
        processBtn.addEventListener('click', processData);
        downloadTemplateBtn.addEventListener('click', downloadTemplate);
        exportXlsxBtn.addEventListener('click', exportXlsx);
        exportCsvBtn.addEventListener('click', exportCsv);
        
        // --- Functions ---
        function showMessage(type, text, autoHide = false) {
            messageArea.classList.remove('hidden');
            messageArea.className = `message-${type}`;
            messageArea.textContent = text; // Use textContent to prevent XSS

            if (autoHide && type === 'success') {
                setTimeout(() => {
                    messageArea.classList.add('hidden');
                }, 5000);
            }
        }

        function resetUI() {
            summarySection.classList.add('hidden');
            resultsSection.classList.add('hidden');
            messageArea.classList.add('hidden');
            sheetSelector.innerHTML = '';
            sheetSelector.disabled = true;
            processBtn.disabled = true;
            columnMapper.classList.add('hidden');
            document.getElementById('results-table').innerHTML = '';
            workbook = null;
            processedData = [];
            summaryData = {};
        }

        function handleFile(event) {
            resetUI();
            const file = event.target.files[0];
            if (!file) return;

            const validExtensions = ['.xlsx', '.csv'];
            const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
            if (!validExtensions.includes(fileExtension)) {
                showMessage('error', '錯誤：檔案格式不支援，僅接受 .xlsx 或 .csv。');
                return;
            }

            if (file.size > MAX_FILE_SIZE) {
                showMessage('error', `錯誤：檔案大小超過 ${MAX_FILE_SIZE / 1024 / 1024}MB 上限。`);
                return;
            }
            
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    workbook = XLSX.read(data, { type: 'array' });
                    
                    if (workbook.SheetNames.length === 0) {
                       showMessage('error', '錯誤：檔案為空或無法解析。');
                       return;
                    }

                    sheetSelector.innerHTML = '<option value="">-- 請選擇 --</option>';
                    workbook.SheetNames.forEach(name => {
                        const option = document.createElement('option');
                        option.value = name;
                        option.textContent = name;
                        sheetSelector.appendChild(option);
                    });
                    sheetSelector.disabled = false;
                    
                    if (workbook.SheetNames.length === 1) {
                        sheetSelector.value = workbook.SheetNames[0];
                        processBtn.disabled = false;
                    }
                } catch (err) {
                    showMessage('error', `檔案解析失敗：${err.message}`);
                }
            };
            reader.onerror = () => showMessage('error', '讀取檔案時發生錯誤。');
            reader.readAsArrayBuffer(file);
        }

        function processData() {
            const startTime = performance.now();
            const sheetName = sheetSelector.value;
            if (!sheetName) {
                showMessage('error', '請先選擇一個工作表。');
                return;
            }

            const ws = workbook.Sheets[sheetName];
            const data = XLSX.utils.sheet_to_json(ws, { header: 1, defval: "" });

            if (data.length <= 1) {
                showMessage('error', '錯誤：工作表為空或僅有表頭。');
                return;
            }

            if (data.length > MAX_ROWS + 1) { // +1 for header
                showMessage('error', `錯誤：資料筆數超過 ${MAX_ROWS} 筆上限。`);
                return;
            }

            const headers = data[0].map(h => String(h));
            let idColIdx = headers.indexOf(HEADER_UNIFIED_ID);
            let amountColIdx = headers.indexOf(HEADER_SALES_AMOUNT);

            if (idColIdx === -1 || amountColIdx === -1) {
                if (columnMapper.classList.contains('hidden')) {
                    columnMapper.classList.remove('hidden');
                    [idColMapper, amountColMapper].forEach(mapper => {
                        mapper.innerHTML = '<option value="">-- 手動對應 --</option>';
                        headers.forEach((h, i) => {
                            const option = document.createElement('option');
                            option.value = i;
                            option.textContent = h;
                            mapper.appendChild(option);
                        });
                    });
                    showMessage('error', '找不到預設欄位名稱，請手動對應後再按一次「開始處理」。');
                    return;
                } else {
                    idColIdx = parseInt(idColMapper.value, 10);
                    amountColIdx = parseInt(amountColMapper.value, 10);
                    if (isNaN(idColIdx) || isNaN(amountColIdx)) {
                        showMessage('error', '欄位對應不完整，請完成對應。');
                        return;
                    }
                }
            }

            processedData = [];
            const newHeaders = [...headers, HEADER_UNTAXED_SALES, HEADER_TAX_AMOUNT, HEADER_STATUS];
            processedData.push(newHeaders);

            let summary = {
                A: { count: 0, sales: 0, untaxed: 0, tax: 0 },
                B: { count: 0, sales: 0, untaxed: 0, tax: 0 },
                errorCount: 0,
                validCount: 0
            };

            for (let i = 1; i < data.length; i++) {
                const row = [...data[i]]; 
                let status = '';
                
                let unifiedId = String(row[idColIdx] || '').replace(/\s/g, '').replace(/[！-～]/g, s => String.fromCharCode(s.charCodeAt(0) - 0xFEE0));
                let salesAmountStr = String(row[amountColIdx] || '0').replace(/,/g, '');
                let salesAmount = parseFloat(salesAmountStr);

                if (row.every(cell => cell === "")) continue;

                if (!/^\d{8}$/.test(unifiedId)) {
                    status = '統編格式錯誤';
                } else if (isNaN(salesAmount) || salesAmount < 0) {
                    status = '銷售額非法';
                }

                let untaxed = '';
                let tax = '';
                
                if (status) {
                    summary.errorCount++;
                } else {
                    summary.validCount++;
                    if (unifiedId === UNIFIED_ID_DEFAULT) {
                        const untaxedRaw = salesAmount / (1 + TAX_RATE);
                        untaxed = Math.round(untaxedRaw);
                        tax = salesAmount - untaxed;
                        
                        summary.A.count++;
                        summary.A.sales += salesAmount;
                        summary.A.untaxed += untaxed;
                        summary.A.tax += tax;
                    } else {
                        const b_untaxed_conceptual = Math.round(salesAmount / (1 + TAX_RATE));
                        const b_tax_conceptual = salesAmount - b_untaxed_conceptual;

                        summary.B.count++;
                        summary.B.sales += salesAmount;
                        summary.B.untaxed += b_untaxed_conceptual;
                        summary.B.tax += b_tax_conceptual;
                    }
                }
                
                processedData.push([...row, untaxed, tax, status]);
            }
            
            const endTime = performance.now();
            summaryData = {
                ...summary,
                total: {
                    sales: summary.A.sales + summary.B.sales,
                    untaxed: summary.A.untaxed + summary.B.untaxed,
                    tax: summary.A.tax + summary.B.tax,
                },
                processingTime: ((endTime - startTime) / 1000).toFixed(2),
                validation: '通過 (銷售額 = 未稅 + 稅額)',
                sourceFileName: fileInput.files[0].name,
                sourceSheetName: sheetName
            };

            renderSummary(summaryData);
            renderTable(processedData);
            
            showMessage('success', `處理完成！共處理 ${summary.validCount} 筆有效資料，發現 ${summary.errorCount} 筆錯誤。`, true);
            summarySection.classList.remove('hidden');
            resultsSection.classList.remove('hidden');
        }
        
        function formatNumber(num) {
            return new Intl.NumberFormat('en-US').format(num);
        }

        function renderSummary(summary) {
            document.getElementById('summary-meta').innerHTML = `
                <h3>處理資訊</h3>
                <p><span>處理時間:</span> <span>${summary.processingTime} 秒</span></p>
                <p><span>有效筆數:</span> <span>${formatNumber(summary.validCount)}</span></p>
                <p><span>錯誤筆數:</span> <span>${formatNumber(summary.errorCount)}</span></p>
                <p><span>校驗結果:</span> <span>${summary.validation}</span></p>
            `;
            document.getElementById('summary-a').innerHTML = `
                <h3>A 區 (統編 = ${UNIFIED_ID_DEFAULT})</h3>
                <p><span>筆數:</span> <span>${formatNumber(summary.A.count)}</span></p>
                <p><span>銷售額總額:</span> <span>${formatNumber(summary.A.sales)}</span></p>
                <p><span>未稅總額:</span> <span>${formatNumber(summary.A.untaxed)}</span></p>
                <p><span>稅額總額:</span> <span>${formatNumber(summary.A.tax)}</span></p>
            `;
            document.getElementById('summary-b').innerHTML = `
                <h3>B 區 (統編 ≠ ${UNIFIED_ID_DEFAULT})</h3>
                <p><span>筆數:</span> <span>${formatNumber(summary.B.count)}</span></p>
                <p><span>銷售額總額:</span> <span>${formatNumber(summary.B.sales)}</span></p>
                <p><span>未稅總額(概念):</span> <span>${formatNumber(summary.B.untaxed)}</span></p>
                <p><span>稅額總額(概念):</span> <span>${formatNumber(summary.B.tax)}</span></p>
            `;
             document.getElementById('summary-all').innerHTML = `
                <h3>總計</h3>
                <p><span>總筆數:</span> <span>${formatNumber(summary.A.count + summary.B.count)}</span></p>
                <p><span>總銷售額:</span> <span>${formatNumber(summary.total.sales)}</span></p>
                <p><span>總未稅額:</span> <span>${formatNumber(summary.total.untaxed)}</span></p>
                <p><span>總稅額:</span> <span>${formatNumber(summary.total.tax)}</span></p>
            `;
        }
        
        function renderTable(data) {
            const table = document.getElementById('results-table');
            table.innerHTML = '';
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');
            
            const headerRow = document.createElement('tr');
            data[0].forEach(text => {
                const th = document.createElement('th');
                th.textContent = text;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);
            
            const statusColIdx = data[0].length - 1;
            for (let i = 1; i < data.length; i++) {
                const rowData = data[i];
                const tr = document.createElement('tr');
                if (rowData[statusColIdx]) {
                    tr.classList.add('error-row');
                }
                rowData.forEach(cellData => {
                    const td = document.createElement('td');
                    td.textContent = cellData;
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            }
            
            table.appendChild(thead);
            table.appendChild(tbody);
        }

        function downloadTemplate() {
            const templateData = [
                [HEADER_UNIFIED_ID, HEADER_SALES_AMOUNT, HEADER_REMARK],
                [UNIFIED_ID_DEFAULT, 1050, '此為範例資料，銷售額含稅'],
                ['12345678', 2100, '此統編的資料將不會被拆分']
            ];
            const ws = XLSX.utils.aoa_to_sheet(templateData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, '範本');
            XLSX.writeFile(wb, '範本.xlsx');
        }

        function exportXlsx() {
            const detailWs = XLSX.utils.aoa_to_sheet(processedData);
            
            const summaryArray = [
                ['項目', '數值'],
                ['來源檔案', summaryData.sourceFileName],
                ['來源工作表', summaryData.sourceSheetName],
                ['稅率', `${TAX_RATE * 100}%`],
                ['處理時間 (秒)', summaryData.processingTime],
                ['校驗結果', summaryData.validation],
                [],
                ['彙總分類', '筆數', '銷售額總額', '未稅總額', '稅額總額'],
                [`A 區 (統編=${UNIFIED_ID_DEFAULT})`, summaryData.A.count, summaryData.A.sales, summaryData.A.untaxed, summaryData.A.tax],
                [`B 區 (統編≠${UNIFIED_ID_DEFAULT})`, summaryData.B.count, summaryData.B.sales, `(概念) ${summaryData.B.untaxed}`, `(概念) ${summaryData.B.tax}`],
                ['總計', summaryData.A.count + summaryData.B.count, summaryData.total.sales, summaryData.total.untaxed, summaryData.total.tax]
            ];
            const summaryWs = XLSX.utils.aoa_to_sheet(summaryArray);

            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, detailWs, '處理後明細');
            XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');
            XLSX.writeFile(wb, '處理後檔案.xlsx');
        }
        
        function exportCsv() {
            const csvData = processedData.map(row => row.slice(0, -1));
            const ws = XLSX.utils.aoa_to_sheet(csvData);
            const csvString = XLSX.utils.sheet_to_csv(ws);
            
            const blob = new Blob(['\uFEFF' + csvString], { type: 'text/csv;charset=utf-8;' });
            
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', '處理後檔案.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url); // Release memory
        }
    });
    </script>
</body>
</html>
