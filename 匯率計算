<!DOCTYPE html><html lang="zh-Hant">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>匯差計算（離線單檔版）</title>
  <style>
    :root{
      --bg:#0f172a;--panel:#111827;--card:#0b1220;--muted:#94a3b8;--text:#e5e7eb;--accent:#22c55e;--danger:#ef4444;--warn:#f59e0b;--primary:#3b82f6;
      --border:#1f2937
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,"Noto Sans",sans-serif;background:var(--bg);color:var(--text)}
    header{padding:16px 20px;border-bottom:1px solid var(--border);background:var(--panel);position:sticky;top:0;z-index:10}
    h1{margin:0;font-size:18px;letter-spacing:.5px}
    .container{max-width:1200px;margin:0 auto;padding:16px}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:16px}
    .row{display:flex;gap:8px;flex-wrap:wrap}
    .card{background:var(--card);border:1px solid var(--border);border-radius:14px;padding:14px}
    .card h2{margin:0 0 10px 0;font-size:16px}
    label{font-size:12px;color:var(--muted)}
    input,select,button,textarea{background:#0a0f1a;color:var(--text);border:1px solid var(--border);border-radius:10px;padding:8px 10px}
    input,select,textarea{width:100%}
    button{cursor:pointer}
    button.primary{background:var(--primary)}
    button.success{background:var(--accent)}
    button.warn{background:var(--warn)}
    button.danger{background:var(--danger)}
    .toolbar{display:flex;gap:8px;flex-wrap:wrap}
    table{width:100%;border-collapse:collapse}
    th,td{border-bottom:1px solid var(--border);padding:8px;text-align:left;font-size:12px}
    th{color:#cbd5e1}
    .muted{color:var(--muted)}
    .pill{display:inline-block;padding:2px 8px;border-radius:999px;font-size:11px;border:1px solid var(--border)}
    .pill.ok{background:#052e16;color:#86efac;border-color:#14532d}
    .pill.warn{background:#3f2d14;color:#fde68a;border-color:#854d0e}
    .pill.bad{background:#3f1d1d;color:#fecaca;border-color:#7f1d1d}
    .flex{display:flex;gap:8px}
    .grow{flex:1}
    .right{text-align:right}
    .mono{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace}
    details{border:1px solid var(--border);border-radius:12px;padding:8px}
    summary{cursor:pointer}
    .tabs{display:flex;gap:8px;margin:10px 0}
    .tabs button{padding:8px 12px;border-radius:999px;border:1px solid var(--border);background:#0a0f1a}
    .tabs button.active{background:var(--primary)}
    .hidden{display:none}
    .footer{padding:12px 16px;color:var(--muted);text-align:center;border-top:1px solid var(--border)}
    .hr{height:1px;background:var(--border);margin:8px 0}
    .small{font-size:12px}
  </style>
</head>
<body>
  <header>
    <h1>匯差計算（離線單檔）</h1>
  </header>
  <div class="container">
    <div class="tabs">
      <button data-tab="water" class="active">水單</button>
      <button data-tab="trade">進出口報單</button>
      <button data-tab="result">匯兌損益</button>
      <button data-tab="tools">工具/備份</button>
    </div><!-- 水單管理 -->
<section id="tab-water" class="card">
  <h2>水單管理</h2>
  <div class="grid">
    <div class="card">
      <h2>新增/編輯水單</h2>
      <div class="row">
        <div class="grow">
          <label>編號（自動）</label>
          <input id="ws-id" placeholder="新增時留空" disabled />
        </div>
        <div>
          <label>廠商</label>
          <input id="ws-vendor" placeholder="必填" />
        </div>
        <div>
          <label>幣別</label>
          <select id="ws-ccy">
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
            <option value="JPY">JPY</option>
            <option value="CNY">CNY</option>
            <option value="TWD">TWD</option>
          </select>
        </div>
        <div>
          <label>日期</label>
          <input id="ws-date" type="date" />
        </div>
        <div>
          <label>匯率（本幣/外幣）</label>
          <input id="ws-rate" type="number" step="0.000001" placeholder="如 32.123456" />
        </div>
        <div>
          <label>外幣金額</label>
          <input id="ws-amtF" type="number" step="0.0001" placeholder="可為正負" />
        </div>
        <div>
          <label>進/出口（選填）</label>
          <select id="ws-intent">
            <option value="未指定">未指定</option>
            <option value="進口">進口</option>
            <option value="出口">出口</option>
          </select>
        </div>
        <div class="grow">
          <label>備註</label>
          <input id="ws-note" />
        </div>
      </div>
      <div class="toolbar" style="margin-top:8px">
        <button class="primary" id="btn-ws-save">儲存/更新</button>
        <button class="warn" id="btn-ws-reset">清表單</button>
        <button class="danger" id="btn-ws-delete">刪除</button>
      </div>
    </div>
    <div class="card">
      <h2>水單清單</h2>
      <div class="row">
        <div><label>廠商</label><input id="ws-q-vendor" placeholder="關鍵字" /></div>
        <div><label>幣別</label>
          <select id="ws-q-ccy">
            <option value="">全部</option>
            <option>USD</option><option>EUR</option><option>JPY</option><option>CNY</option><option>TWD</option>
          </select>
        </div>
        <div><label>類型</label>
          <select id="ws-q-intent">
            <option value="">全部</option>
            <option>未指定</option><option>進口</option><option>出口</option>
          </select>
        </div>
        <div class="grow"><label>日期區間</label>
          <div class="row"><input id="ws-q-from" type="date"/><input id="ws-q-to" type="date"/></div>
        </div>
        <div style="align-self:end" class="toolbar"><button id="btn-ws-refresh">查詢</button></div>
      </div>
      <div class="hr"></div>
      <table>
        <thead>
          <tr><th>編號</th><th>廠商</th><th>幣別</th><th>日期</th><th>匯率</th><th>外幣金額</th><th>意向</th><th>狀態</th></tr>
        </thead>
        <tbody id="ws-tbody"></tbody>
      </table>
    </div>
  </div>
</section>

<!-- 報單管理 -->
<section id="tab-trade" class="card hidden">
  <h2>進出口報單</h2>
  <div class="grid">
    <div class="card">
      <h2>新增/編輯報單</h2>
      <div class="row">
        <div class="grow"><label>編號（自動）</label><input id="td-id" disabled /></div>
        <div><label>廠商</label><input id="td-vendor" placeholder="必填" /></div>
        <div><label>幣別</label>
          <select id="td-ccy">
            <option>USD</option><option>EUR</option><option>JPY</option><option>CNY</option><option>TWD</option>
          </select>
        </div>
        <div><label>類型</label>
          <select id="td-type">
            <option>進口</option>
            <option>出口</option>
          </select>
        </div>
        <div><label>日期</label><input id="td-date" type="date" /></div>
        <div><label>匯率（本幣/外幣）</label><input id="td-rate" type="number" step="0.000001" /></div>
        <div><label>外幣金額</label><input id="td-amtF" type="number" step="0.0001" /></div>
        <div class="grow"><label>指定水單（可不選，系統自動匹配）</label>
          <select id="td-ws-select"><option value="">— 自動匹配 —</option></select>
        </div>
        <div class="grow"><label>備註</label><input id="td-note" /></div>
      </div>
      <div class="toolbar" style="margin-top:8px">
        <button class="primary" id="btn-td-save">儲存/更新</button>
        <button class="warn" id="btn-td-reset">清表單</button>
        <button class="danger" id="btn-td-delete">刪除</button>
        <button id="btn-td-autopick">自動匹配水單</button>
      </div>
    </div>
    <div class="card">
      <h2>報單清單</h2>
      <div class="row">
        <div><label>廠商</label><input id="td-q-vendor" /></div>
        <div><label>幣別</label>
          <select id="td-q-ccy"><option value="">全部</option><option>USD</option><option>EUR</option><option>JPY</option><option>CNY</option><option>TWD</option></select>
        </div>
        <div><label>類型</label><select id="td-q-type"><option value="">全部</option><option>進口</option><option>出口</option></select></div>
        <div class="grow"><label>日期區間</label>
          <div class="row"><input id="td-q-from" type="date"/><input id="td-q-to" type="date"/></div>
        </div>
        <div style="align-self:end" class="toolbar"><button id="btn-td-refresh">查詢</button></div>
      </div>
      <div class="hr"></div>
      <table>
        <thead>
          <tr><th>編號</th><th>廠商</th><th>幣別</th><th>類型</th><th>日期</th><th>匯率</th><th>外幣金額</th><th>水單</th></tr>
        </thead>
        <tbody id="td-tbody"></tbody>
      </table>
    </div>
  </div>
</section>

<!-- 結果 -->
<section id="tab-result" class="card hidden">
  <h2>匯兌損益結果</h2>
  <div class="toolbar" style="margin-bottom:8px">
    <button id="btn-recompute" class="primary">全部重算</button>
  </div>
  <div id="result-list" class="grid"></div>
</section>

<!-- 工具/備份 -->
<section id="tab-tools" class="card hidden">
  <h2>工具 / 備份</h2>
  <div class="grid">
    <div class="card">
      <h2>資料匯出/匯入</h2>
      <div class="row">
        <button id="btn-export" class="success">匯出 JSON</button>
        <input type="file" id="file-import" accept="application/json" />
        <button id="btn-import" class="primary">匯入 JSON</button>
      </div>
      <p class="small muted">離線可用；僅在本機 IndexedDB 儲存。匯出檔可自行備份。</p>
    </div>
    <div class="card">
      <h2>資料庫</h2>
      <div class="toolbar">
        <button id="btn-db-reset" class="danger">清空資料庫</button>
        <button id="btn-seed">寫入範例資料</button>
      </div>
      <p class="small muted">清空將刪除所有水單與報單。</p>
    </div>
  </div>
</section>

<div class="footer small">Asia/Taipei 本地運行 · IndexedDB 離線儲存 · 版本 <span id="app-ver"></span></div>

  </div><script>
/********************
 * 版本與常數
 ********************/
const APP_VERSION = '1.0.0';
const DB_NAME = 'fx-offline-db';
const DB_VERSION = 2; // schema v2: add intendedTradeType, status
const RATE_SCALE = 1_000_000n; // 匯率 6 位小數
const AMT_SCALE = 10_000n;     // 金額 4 位小數（外幣）

const INTENT = ['未指定','進口','出口'];

/********************
 * 小工具：ID、日期、格式、十進制（BigInt 定點）
 ********************/
const uid = () => 'id-' + Math.random().toString(36).slice(2, 10) + Date.now().toString(36);
const toDateNum = (s) => s ? Number(s.replaceAll('-','')) : 0; // 2025-10-08 -> 20251008
const fmtDate = (s) => s || '';

function toScaled(n, scale){ // number/string -> BigInt scaled
  if (n === '' || n === null || n === undefined) return 0n;
  const neg = Number(n) < 0;
  const abs = Math.abs(Number(n));
  const asStr = abs.toFixed(scale===RATE_SCALE?6:4); // 控制輸入精度
  const raw = BigInt(asStr.replace('.',''));
  return neg ? -raw : raw;
}
function fromScaled(bi, scale, digits){ // BigInt -> number
  const neg = bi < 0n; const abs = neg ? -bi : bi;
  const s = abs.toString();
  const d = scale===RATE_SCALE?6:4;
  const pad = d - (s.length % d);
  const full = pad===d ? s : '0'.repeat(pad)+s;
  const intPart = full.slice(0, full.length - d) || '0';
  const frac = full.slice(-d).replace(/0+$/,'');
  const str = frac ? `${intPart}.${frac}` : intPart;
  const num = Number(str);
  return Number(num.toFixed(digits ?? (scale===RATE_SCALE?6:4))) * (neg ? -1 : 1);
}
function mulDiv(a, b, div){ // (a*b)/div for BigInt, round half up
  const prod = a*b;
  const half = div/2n;
  if (prod >= 0n) return (prod + half) / div; else return (prod - half) / div;
}

/********************
 * IndexedDB 簡易封裝
 ********************/
let db;
function openDB(){
  return new Promise((resolve, reject)=>{
    const req = indexedDB.open(DB_NAME, DB_VERSION);
    req.onupgradeneeded = (e)=>{
      const db = req.result;
      if (!db.objectStoreNames.contains('waterSlips')){
        const os = db.createObjectStore('waterSlips',{keyPath:'id'});
        os.createIndex('byVendor','vendor',{unique:false});
        os.createIndex('byCcy','ccy',{unique:false});
        os.createIndex('byDate','date',{unique:false});
      }
      if (!db.objectStoreNames.contains('tradeDocs')){
        const os2 = db.createObjectStore('tradeDocs',{keyPath:'id'});
        os2.createIndex('byVendor','vendor',{unique:false});
        os2.createIndex('byCcy','ccy',{unique:false});
        os2.createIndex('byDate','date',{unique:false});
      }
    };
    req.onsuccess = ()=>{ db = req.result; resolve(); };
    req.onerror = ()=> reject(req.error);
  });
}
function tx(storeNames, mode='readonly'){
  const t = db.transaction(storeNames, mode);
  const map = {};
  for(const n of (Array.isArray(storeNames)?storeNames:[storeNames])) map[n]=t.objectStore(n);
  return {t, ...map};
}

/********************
 * 資料模型
 ********************/
function newWaterSlip(data){
  return {
    id: data?.id || uid(),
    vendor: data?.vendor?.trim()||'',
    ccy: data?.ccy||'USD',
    date: data?.date||'',
    rateScaled: toScaled(data?.rate||0, RATE_SCALE),
    amtFScaled: toScaled(data?.amtF||0, AMT_SCALE),
    intendedTradeType: data?.intendedTradeType||'未指定',
    status: data?.status||'未配對',
    note: data?.note||''
  };
}
function newTradeDoc(data){
  return {
    id: data?.id || uid(),
    vendor: data?.vendor?.trim()||'',
    ccy: data?.ccy||'USD',
    type: data?.type||'進口',
    date: data?.date||'',
    rateScaled: toScaled(data?.rate||0, RATE_SCALE),
    amtFScaled: toScaled(data?.amtF||0, AMT_SCALE),
    selectedWaterSlipId: data?.selectedWaterSlipId||'',
    note: data?.note||''
  };
}

/********************
 * CRUD：水單
 ********************/
async function saveWaterSlip(ws){
  await new Promise((res,rej)=>{ const {t, waterSlips} = tx('waterSlips','readwrite'); const req = waterSlips.put(ws); req.onsuccess=()=>res(); req.onerror=()=>rej(req.error); });
}
async function deleteWaterSlip(id){
  await new Promise((res,rej)=>{ const {t, waterSlips} = tx('waterSlips','readwrite'); const req = waterSlips.delete(id); req.onsuccess=()=>res(); req.onerror=()=>rej(req.error); });
}
async function listWaterSlips(filter){
  return new Promise((res,rej)=>{
    const out=[]; const {waterSlips} = tx('waterSlips','readonly');
    const req = waterSlips.openCursor();
    req.onsuccess = ()=>{
      const cur = req.result; if (!cur){ res(out); return; }
      const v = cur.value;
      let ok = true;
      if (filter?.vendor) ok = ok && v.vendor.includes(filter.vendor);
      if (filter?.ccy) ok = ok && v.ccy===filter.ccy;
      if (filter?.intent) ok = ok && v.intendedTradeType===filter.intent;
      const dn = toDateNum(v.date);
      if (filter?.from) ok = ok && dn >= toDateNum(filter.from);
      if (filter?.to) ok = ok && dn <= toDateNum(filter.to);
      if (ok) out.push(v);
      cur.continue();
    };
    req.onerror=()=>rej(req.error);
  });
}
async function getWaterSlip(id){
  return new Promise((res,rej)=>{ const {waterSlips}=tx('waterSlips'); const req=waterSlips.get(id); req.onsuccess=()=>res(req.result||null); req.onerror=()=>rej(req.error); });
}

/********************
 * CRUD：報單
 ********************/
async function saveTradeDoc(td){
  await new Promise((res,rej)=>{ const {tradeDocs}=tx('tradeDocs','readwrite'); const req=tradeDocs.put(td); req.onsuccess=()=>res(); req.onerror=()=>rej(req.error); });
}
async function deleteTradeDoc(id){
  await new Promise((res,rej)=>{ const {tradeDocs}=tx('tradeDocs','readwrite'); const req=tradeDocs.delete(id); req.onsuccess=()=>res(); req.onerror=()=>rej(req.error); });
}
async function listTradeDocs(filter){
  return new Promise((res,rej)=>{
    const out=[]; const {tradeDocs}=tx('tradeDocs'); const req=tradeDocs.openCursor();
    req.onsuccess=()=>{
      const cur=req.result; if(!cur){res(out);return;}
      const v=cur.value; let ok=true;
      if (filter?.vendor) ok = ok && v.vendor.includes(filter.vendor);
      if (filter?.ccy) ok = ok && v.ccy===filter.ccy;
      if (filter?.type) ok = ok && v.type===filter.type;
      const dn=toDateNum(v.date);
      if (filter?.from) ok = ok && dn >= toDateNum(filter.from);
      if (filter?.to) ok = ok && dn <= toDateNum(filter.to);
      if (ok) out.push(v);
      cur.continue();
    };
    req.onerror=()=>rej(req.error);
  });
}
async function getTradeDoc(id){
  return new Promise((res,rej)=>{ const {tradeDocs}=tx('tradeDocs'); const req=tradeDocs.get(id); req.onsuccess=()=>res(req.result||null); req.onerror=()=>rej(req.error); });
}

/********************
 * 匹配與計算
 ********************/
function pickWaterSlipForTrade(trade, waterSlips){
  const cands = waterSlips.filter(ws=>ws.vendor===trade.vendor && ws.ccy===trade.ccy && (ws.intendedTradeType===trade.type || ws.intendedTradeType==='未指定'));
  if (cands.length===0) return '';
  // 排序：不晚於報單日期且最近，否則距離最近
  const tdn = toDateNum(trade.date);
  const scored = cands.map(ws=>{
    const dn = toDateNum(ws.date);
    const notLater = dn <= tdn ? 0 : 1; // 0 優先
    const dist = Math.abs(dn-tdn);
    return {id:ws.id, notLater, dist, dn};
  }).sort((a,b)=> a.notLater-b.notLater || a.dist-b.dist || b.dn-a.dn);
  return scored[0]?.id || '';
}

function computePL(trade, ws){
  // F：外幣金額（已為 scaled）
  const F = trade.amtFScaled;
  const Rw = ws.rateScaled; // 水單匯率
  const Rt = trade.rateScaled; // 報單匯率
  const baseLocalRw = mulDiv(F, Rw, RATE_SCALE);
  const baseLocalRt = mulDiv(F, Rt, RATE_SCALE);
  const delta = baseLocalRw - baseLocalRt; // 本幣差額（Rw-Rt）*F
  const importRule = (Rw < Rt) ? '兌換盈餘' : (Rw > Rt ? '兌換損失' : '無損益');
  const exportRule = (Rw < Rt) ? '兌換損失' : (Rw > Rt ? '兌換盈餘' : '無損益');
  const dir = trade.type==='進口' ? importRule : exportRule;
  const rel = toDateNum(ws.date) < toDateNum(trade.date) ? (trade.type==='進口'?'預付':'預收') : (trade.type==='進口'?'應付':'應收');
  return {
    F, Rw, Rt, baseLocalRw, baseLocalRt, delta, direction:dir, relation:rel
  };
}

/********************
 * UI 綁定與渲染
 ********************/
function setActiveTab(id){
  for(const btn of document.querySelectorAll('.tabs button')) btn.classList.toggle('active', btn.dataset.tab===id);
  document.querySelector('#tab-water').classList.toggle('hidden', id!=='water');
  document.querySelector('#tab-trade').classList.toggle('hidden', id!=='trade');
  document.querySelector('#tab-result').classList.toggle('hidden', id!=='result');
  document.querySelector('#tab-tools').classList.toggle('hidden', id!=='tools');
}

// 水單表單讀寫
function readWSForm(){
  return newWaterSlip({
    id: document.getElementById('ws-id').value || undefined,
    vendor: document.getElementById('ws-vendor').value,
    ccy: document.getElementById('ws-ccy').value,
    date: document.getElementById('ws-date').value,
    rate: document.getElementById('ws-rate').value,
    amtF: document.getElementById('ws-amtF').value,
    intendedTradeType: document.getElementById('ws-intent').value,
    note: document.getElementById('ws-note').value
  });
}
function writeWSForm(ws){
  document.getElementById('ws-id').value = ws?.id||'';
  document.getElementById('ws-vendor').value = ws?.vendor||'';
  document.getElementById('ws-ccy').value = ws?.ccy||'USD';
  document.getElementById('ws-date').value = ws?.date||'';
  document.getElementById('ws-rate').value = ws? fromScaled(ws.rateScaled,RATE_SCALE,6):'';
  document.getElementById('ws-amtF').value = ws? fromScaled(ws.amtFScaled,AMT_SCALE,4):'';
  document.getElementById('ws-intent').value = ws?.intendedTradeType||'未指定';
  document.getElementById('ws-note').value = ws?.note||'';
}

async function refreshWSList(){
  const rows = await listWaterSlips({
    vendor: document.getElementById('ws-q-vendor').value.trim(),
    ccy: document.getElementById('ws-q-ccy').value || undefined,
    intent: document.getElementById('ws-q-intent').value || undefined,
    from: document.getElementById('ws-q-from').value || undefined,
    to: document.getElementById('ws-q-to').value || undefined,
  });
  rows.sort((a,b)=> toDateNum(b.date)-toDateNum(a.date));
  const tbody = document.getElementById('ws-tbody');
  tbody.innerHTML='';
  for(const v of rows){
    const tr=document.createElement('tr');
    tr.innerHTML = `<td><button data-id="${v.id}" class="pick-ws">${v.id.slice(0,6)}</button></td>
      <td>${v.vendor}</td>
      <td>${v.ccy}</td>
      <td>${fmtDate(v.date)}</td>
      <td>${fromScaled(v.rateScaled,RATE_SCALE,6).toFixed(6)}</td>
      <td class="right mono">${fromScaled(v.amtFScaled,AMT_SCALE,4).toFixed(4)}</td>
      <td><span class="pill">${v.intendedTradeType}</span></td>
      <td><span class="pill ${v.status==='未配對'?'warn':'ok'}">${v.status}</span></td>`;
    tbody.appendChild(tr);
  }
  // 行為：點 id 載入表單
  tbody.querySelectorAll('button.pick-ws').forEach(btn=>{
    btn.onclick = async ()=>{ const v = await getWaterSlip(btn.dataset.id); writeWSForm(v); };
  });
  // 更新報單頁的水單下拉
  await populateWSSelectForTradeForm();
}

// 報單表單
function readTDForm(){
  return newTradeDoc({
    id: document.getElementById('td-id').value || undefined,
    vendor: document.getElementById('td-vendor').value,
    ccy: document.getElementById('td-ccy').value,
    type: document.getElementById('td-type').value,
    date: document.getElementById('td-date').value,
    rate: document.getElementById('td-rate').value,
    amtF: document.getElementById('td-amtF').value,
    selectedWaterSlipId: document.getElementById('td-ws-select').value || '',
    note: document.getElementById('td-note').value
  });
}
function writeTDForm(td){
  document.getElementById('td-id').value = td?.id||'';
  document.getElementById('td-vendor').value = td?.vendor||'';
  document.getElementById('td-ccy').value = td?.ccy||'USD';
  document.getElementById('td-type').value = td?.type||'進口';
  document.getElementById('td-date').value = td?.date||'';
  document.getElementById('td-rate').value = td? fromScaled(td.rateScaled,RATE_SCALE,6):'';
  document.getElementById('td-amtF').value = td? fromScaled(td.amtFScaled,AMT_SCALE,4):'';
  document.getElementById('td-ws-select').value = td?.selectedWaterSlipId||'';
  document.getElementById('td-note').value = td?.note||'';
}

async function populateWSSelectForTradeForm(){
  const vendor = document.getElementById('td-vendor').value.trim();
  const ccy = document.getElementById('td-ccy').value;
  const type = document.getElementById('td-type').value;
  const wsList = await listWaterSlips({vendor, ccy});
  const sel = document.getElementById('td-ws-select');
  const keep = sel.value;
  sel.innerHTML = '<option value="">— 自動匹配 —</option>' + wsList
    .filter(ws=> ws.intendedTradeType===type || ws.intendedTradeType==='未指定')
    .sort((a,b)=> toDateNum(b.date)-toDateNum(a.date))
    .map(ws=>`<option value="${ws.id}">${ws.id.slice(0,6)}｜${ws.date}｜${ws.intendedTradeType}｜${fromScaled(ws.amtFScaled,AMT_SCALE,4).toFixed(4)}</option>`)
    .join('');
  if ([...sel.options].some(o=>o.value===keep)) sel.value = keep;
}

async function refreshTDList(){
  const rows = await listTradeDocs({
    vendor: document.getElementById('td-q-vendor').value.trim(),
    ccy: document.getElementById('td-q-ccy').value || undefined,
    type: document.getElementById('td-q-type').value || undefined,
    from: document.getElementById('td-q-from').value || undefined,
    to: document.getElementById('td-q-to').value || undefined,
  });
  rows.sort((a,b)=> toDateNum(b.date)-toDateNum(a.date));
  const tbody = document.getElementById('td-tbody');
  tbody.innerHTML='';
  for(const v of rows){
    const tr=document.createElement('tr');
    tr.innerHTML = `<td><button data-id="${v.id}" class="pick-td">${v.id.slice(0,6)}</button></td>
      <td>${v.vendor}</td><td>${v.ccy}</td><td>${v.type}</td>
      <td>${fmtDate(v.date)}</td>
      <td>${fromScaled(v.rateScaled,RATE_SCALE,6).toFixed(6)}</td>
      <td class="right mono">${fromScaled(v.amtFScaled,AMT_SCALE,4).toFixed(4)}</td>
      <td>${v.selectedWaterSlipId? v.selectedWaterSlipId.slice(0,6): '<span class="muted">自動</span>'}</td>`;
    tbody.appendChild(tr);
  }
  tbody.querySelectorAll('button.pick-td').forEach(btn=>{
    btn.onclick = async ()=>{ const v = await getTradeDoc(btn.dataset.id); writeTDForm(v); await populateWSSelectForTradeForm(); };
  });
}

/********************
 * 結果渲染與重算
 ********************/
async function recomputeAll(){
  const trades = await listTradeDocs({});
  const waters = await listWaterSlips({});
  const resDiv = document.getElementById('result-list');
  resDiv.innerHTML = '';
  for(const td of trades){
    const wsId = td.selectedWaterSlipId || pickWaterSlipForTrade(td, waters);
    const ws = waters.find(w=>w.id===wsId);
    const card = document.createElement('div');
    card.className='card';
    if (!ws){
      card.innerHTML = `<h2>報單 ${td.id.slice(0,6)}｜${td.type}｜${td.vendor}｜${td.ccy}</h2>
        <p class="muted">未找到合適的水單，請在報單頁面手動選擇或新增水單。</p>`;
      resDiv.appendChild(card); continue;
    }
    const R = computePL(td, ws);
    const dirClass = R.direction.includes('盈')? 'ok' : (R.direction.includes('損')? 'bad':'warn');
    card.innerHTML = `
      <h2>報單 ${td.id.slice(0,6)}｜${td.type}｜${td.vendor}｜${td.ccy}</h2>
      <div class="row">
        <div class="pill ${dirClass}">${R.direction}</div>
        <div class="pill">${R.relation}</div>
        <div class="pill">水單 ${ws.id.slice(0,6)}｜${ws.date}｜${ws.intendedTradeType}</div>
      </div>
      <div class="hr"></div>
      <details open>
        <summary>計算過程</summary>
        <div class="row mono">
          <div class="grow">外幣金額 F = ${fromScaled(R.F,AMT_SCALE,4).toFixed(4)}</div>
          <div>Rw(水單匯率) = ${fromScaled(R.Rw,RATE_SCALE,6).toFixed(6)}</div>
          <div>Rt(報單匯率) = ${fromScaled(R.Rt,RATE_SCALE,6).toFixed(6)}</div>
        </div>
        <div class="row mono">
          <div class="grow">本幣@Rw = F×Rw = ${fromScaled(R.baseLocalRw,AMT_SCALE,2).toFixed(2)}</div>
          <div class="grow">本幣@Rt = F×Rt = ${fromScaled(R.baseLocalRt,AMT_SCALE,2).toFixed(2)}</div>
          <div class="grow">差額 Δ = ${fromScaled(R.delta,AMT_SCALE,2).toFixed(2)}</div>
        </div>
      </details>`;
    resDiv.appendChild(card);
  }
}

/********************
 * 匯出 / 匯入 / 重置 / 範例
 ********************/
async function exportJSON(){
  const data = { ver: APP_VERSION, waterSlips: await listWaterSlips({}), tradeDocs: await listTradeDocs({}) };
  const blob = new Blob([JSON.stringify(data,null,2)],{type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href=url; a.download = `fx-offline-${Date.now()}.json`; a.click(); URL.revokeObjectURL(url);
}
async function importJSON(file){
  const txt = await file.text();
  const data = JSON.parse(txt);
  const {t, waterSlips, tradeDocs} = tx(['waterSlips','tradeDocs'],'readwrite');
  await Promise.all((data.waterSlips||[]).map(v=> new Promise((res,rej)=>{ const req=waterSlips.put(v); req.onsuccess=()=>res(); req.onerror=()=>rej(req.error); })));
  await Promise.all((data.tradeDocs||[]).map(v=> new Promise((res,rej)=>{ const req=tradeDocs.put(v); req.onsuccess=()=>res(); req.onerror=()=>rej(req.error); })));
}
async function resetDB(){
  db.close(); await new Promise((res)=>{ const del = indexedDB.deleteDatabase(DB_NAME); del.onsuccess=()=>res(); del.onerror=()=>res(); del.onblocked=()=>res(); });
  await openDB();
}
async function seedData(){
  const samples = [
    newWaterSlip({vendor:'ACME', ccy:'USD', date:'2025-09-01', rate:32.123456, amtF:1000, intendedTradeType:'進口'}),
    newWaterSlip({vendor:'ACME', ccy:'USD', date:'2025-09-10', rate:32.500000, amtF:800, intendedTradeType:'未指定'}),
    newWaterSlip({vendor:'OMEGA', ccy:'EUR', date:'2025-09-05', rate:35.400000, amtF:500, intendedTradeType:'出口'}),
  ];
  const trades = [
    newTradeDoc({vendor:'ACME', ccy:'USD', type:'進口', date:'2025-09-12', rate:32.400000, amtF:900}),
    newTradeDoc({vendor:'ACME', ccy:'USD', type:'出口', date:'2025-09-20', rate:32.200000, amtF:500}),
    newTradeDoc({vendor:'OMEGA', ccy:'EUR', type:'出口', date:'2025-09-08', rate:35.600000, amtF:500}),
  ];
  for(const v of samples) await saveWaterSlip(v);
  for(const v of trades) await saveTradeDoc(v);
}

/********************
 * 事件綁定
 ********************/
function bindEvents(){
  document.getElementById('app-ver').textContent = APP_VERSION;
  // tabs
  document.querySelectorAll('.tabs button').forEach(btn=> btn.onclick = ()=> setActiveTab(btn.dataset.tab));

  // WS form
  document.getElementById('btn-ws-save').onclick = async ()=>{
    const ws = readWSForm();
    if (!ws.vendor || !ws.date || ws.rateScaled===0n || ws.ccy==='') { alert('水單：廠商/日期/匯率/幣別必填'); return; }
    await saveWaterSlip(ws); writeWSForm({}); await refreshWSList(); alert('已儲存');
  };
  document.getElementById('btn-ws-reset').onclick = ()=> writeWSForm({});
  document.getElementById('btn-ws-delete').onclick = async ()=>{
    const id = document.getElementById('ws-id').value; if(!id){alert('無選擇水單');return;}
    await deleteWaterSlip(id); writeWSForm({}); await refreshWSList(); alert('已刪除');
  };
  document.getElementById('btn-ws-refresh').onclick = refreshWSList;

  // TD form
  document.getElementById('td-vendor').addEventListener('input', populateWSSelectForTradeForm);
  document.getElementById('td-ccy').addEventListener('change', populateWSSelectForTradeForm);
  document.getElementById('td-type').addEventListener('change', populateWSSelectForTradeForm);

  document.getElementById('btn-td-autopick').onclick = async ()=>{
    const td = readTDForm();
    const wsList = await listWaterSlips({vendor: td.vendor, ccy: td.ccy});
    const pick = pickWaterSlipForTrade(td, wsList);
    document.getElementById('td-ws-select').value = pick;
    alert(pick?`自動匹配：${pick}`:'未找到合適水單');
  };

  document.getElementById('btn-td-save').onclick = async ()=>{
    const td = readTDForm();
    if (!td.vendor || !td.date || td.rateScaled===0n || td.ccy==='') { alert('報單：廠商/日期/匯率/幣別必填'); return; }
    await saveTradeDoc(td); writeTDForm({}); await refreshTDList(); alert('已儲存');
  };
  document.getElementById('btn-td-reset').onclick = ()=> writeTDForm({});
  document.getElementById('btn-td-delete').onclick = async ()=>{
    const id = document.getElementById('td-id').value; if(!id){alert('無選擇報單');return;}
    await deleteTradeDoc(id); writeTDForm({}); await refreshTDList(); alert('已刪除');
  };
  document.getElementById('btn-td-refresh').onclick = refreshTDList;

  // 結果
  document.getElementById('btn-recompute').onclick = recomputeAll;

  // 工具
  document.getElementById('btn-export').onclick = exportJSON;
  document.getElementById('btn-import').onclick = async ()=>{
    const f = document.getElementById('file-import').files[0]; if(!f){alert('請先選擇 JSON 檔'); return;}
    await importJSON(f); await refreshWSList(); await refreshTDList(); alert('匯入完成');
  };
  document.getElementById('btn-db-reset').onclick = async ()=>{ if(!confirm('確認清空資料庫？'))return; await resetDB(); await refreshWSList(); await refreshTDList(); document.getElementById('result-list').innerHTML=''; alert('已清空'); };
  document.getElementById('btn-seed').onclick = async ()=>{ await seedData(); await refreshWSList(); await refreshTDList(); alert('已寫入範例資料'); };
}

/********************
 * 開始
 ********************/
(async function main(){
  await openDB();
  bindEvents();
  await refreshWSList();
  await refreshTDList();
})();
</script></body>
</html>