<!DOCTYPE html>
<html lang="zh-Hant-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>離線客戶與營業稅管理系統</title>
    <style>
        /* --- 全域與基本樣式 --- */
        :root {
            --bg-color: #2c3e50;
            --text-color: #ecf0f1;
            --primary-color: #3498db;
            --secondary-color: #2980b9;
            --accent-color: #e74c3c;
            --success-color: #2ecc71;
            --border-color: #4a627a;
            --header-bg: #34495e;
            --input-bg: #4a627a;
            --table-row-hover: #4a627a;
            --details-bg: #3a5067;
            --font-family: 'Segoe UI', 'Microsoft JhengHei', 'PingFang TC', sans-serif;
        }
        body {
            font-family: var(--font-family);
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }
        main {
            max-width: 1400px;
            margin: 0 auto;
            background: var(--header-bg);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        /* --- UI 元件 --- */
        h1, h2, h3 {
            color: var(--primary-color);
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 10px;
        }
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: var(--secondary-color);
        }
        button.danger {
            background-color: var(--accent-color);
        }
        button.danger:hover {
            background-color: #c0392b;
        }
        button.success {
            background-color: var(--success-color);
        }
        button.success:hover {
            background-color: #27ae60;
        }
        input, select, textarea {
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 8px;
            border-radius: 4px;
            width: 100%;
            box-sizing: border-box;
            margin-bottom: 10px;
        }
        ::placeholder {
            color: #bdc3c7;
            opacity: 0.7;
        }
        fieldset {
            border: 1px solid var(--border-color);
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
        }
        legend {
            color: var(--primary-color);
            padding: 0 10px;
            font-weight: bold;
        }
        small {
            color: #bdc3c7;
            display: block;
            margin-top: -8px;
            margin-bottom: 10px;
        }

        /* --- 分頁 UI --- */
        .tab-nav {
            display: flex;
            border-bottom: 2px solid var(--border-color);
            margin-bottom: 20px;
        }
        .tab-link {
            padding: 10px 20px;
            cursor: pointer;
            background-color: var(--input-bg);
            border: none;
            color: var(--text-color);
            font-size: 1.1em;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
            position: relative;
            bottom: -2px;
        }
        .tab-link.active {
            background-color: var(--header-bg);
            border: 2px solid var(--border-color);
            border-bottom: 2px solid var(--header-bg);
            font-weight: bold;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* --- 表格樣式 --- */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 12px;
            border: 1px solid var(--border-color);
            text-align: left;
            vertical-align: top;
        }
        th {
            background-color: var(--bg-color);
            color: var(--primary-color);
        }
        tbody tr:hover {
            background-color: var(--table-row-hover);
        }
        td .actions {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
        }
        td .actions button {
            padding: 5px 10px;
            font-size: 0.9em;
        }

        /* --- 備註詳情 (<details>) --- */
        details {
            background-color: var(--details-bg);
            border-radius: 4px;
            margin-top: 5px;
            padding: 5px 10px;
        }
        summary {
            cursor: pointer;
            font-weight: bold;
            color: var(--text-color);
        }
        .note-history {
            list-style: none;
            padding: 0;
            margin-top: 10px;
        }
        .note-history li {
            font-size: 0.9em;
            white-space: pre-wrap;
            word-break: break-word;
            padding: 8px;
            border-top: 1px dashed var(--border-color);
        }
        .note-history li:first-child {
            border-top: none;
        }
        .note-history .timestamp {
            display: block;
            font-size: 0.8em;
            color: #bdc3c7;
        }

        /* --- 營業稅模組特殊樣式 --- */
        .tax-header, .upcoming-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--bg-color);
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }
        .upcoming-section {
             display: block;
        }
        .upcoming-section h3 {
            margin-top: 0;
        }
        .upcoming-list {
            list-style-type: none;
            padding-left: 0;
        }
        .upcoming-list li {
            background: var(--details-bg);
            padding: 8px;
            border-radius: 4px;
            margin-bottom: 5px;
        }
        .readonly-data {
            color: #bdc3c7;
            font-size: 0.9em;
            pointer-events: none;
            opacity: 0.8;
        }

        /* --- 控制項與匯出入 --- */
        .global-controls {
            margin: 20px 0;
            padding: 15px;
            background: var(--bg-color);
            border-radius: 5px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }
        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }
        .file-input-wrapper input[type=file] {
            font-size: 100px;
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            cursor: pointer;
        }
        .file-input-wrapper button {
            width: 100%;
        }

        /* --- 輔助 class --- */
        .hidden {
            display: none !important;
        }
        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        .grid-4 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        /* --- 友善列印 --- */
        @media print {
            body {
                background-color: white;
                color: black;
                font-size: 10pt;
            }
            main {
                box-shadow: none;
                padding: 0;
                max-width: 100%;
            }
            .screen-only, .tab-nav, header, fieldset, .global-controls, button, input, select, textarea, .actions {
                display: none !important;
            }
            .tab-content.active {
                display: block !important;
            }
            table, th, td {
                border: 1px solid #ccc;
                color: black;
                background-color: white !important;
            }
            th {
                background-color: #f2f2f2 !important;
            }
            h1, h2, h3 {
                color: black;
                border-bottom: 1px solid #ccc;
            }
            details {
                background-color: transparent;
                padding: 0;
                border: 1px solid #eee;
                margin-bottom: 5px;
            }
            details summary {
                 font-weight: bold;
            }
            /* 預設展開 details 以便列印 */
            details[open] {
                page-break-inside: avoid;
            }
            /* 針對營業稅模組的日期群組進行分頁 */
            .tax-date-group {
                page-break-after: auto; /* 預設 auto，可改為 always */
                page-break-inside: avoid;
            }
            .readonly-data {
                color: #555;
            }
            a {
                text-decoration: none;
                color: black;
            }
        }
    </style>
</head>
<body>

<main>
    <header>
        <h1>離線客戶與營業稅管理系統</h1>
        <p>所有資料皆儲存在您的本機瀏覽器中，不會上傳至任何伺服器。</p>
    </header>

    <nav class="tab-nav">
        <button type="button" class="tab-link active" data-tab="customers">客戶資料庫</button>
        <button type="button" class="tab-link" data-tab="tax">營業稅</button>
    </nav>
    
    <div class="global-controls">
        <button type="button" id="printButton" class="screen-only">🖨️ 列印目前頁面</button>
        <button type="button" id="backupAll" class="success screen-only">⚡ 一鍵備份快照</button>
        <div class="file-input-wrapper screen-only">
             <button type="button">🔄 從快照還原</button>
             <input type="file" id="restoreAllInput" accept=".json">
        </div>
        <small class="screen-only">快照包含客戶、營業稅及收發票設定。</small>
    </div>

    <div id="tab-customers" class="tab-content active">
        <h2>客戶資料庫</h2>
        <fieldset class="screen-only">
            <legend>新增 / 修改客戶</legend>
            <form id="customerForm">
                <input type="hidden" id="customerId">
                <div class="grid-4">
                    <div>
                        <label for="customerCode">客戶代號</label>
                        <input type="text" id="customerCode" required>
                        <small>獨一無二的代號，例如：C001</small>
                    </div>
                    <div>
                        <label for="companyName">公司名稱</label>
                        <input type="text" id="companyName" required>
                    </div>
                    <div>
                        <label for="taxId">統一編號</label>
                        <input type="text" id="taxId" pattern="\d{8}">
                        <small>8 位數字</small>
                    </div>
                    <div>
                        <label for="contactPerson">聯絡人</label>
                        <input type="text" id="contactPerson">
                    </div>
                    <div>
                        <label for="phone">聯絡電話</label>
                        <input type="tel" id="phone">
                    </div>
                    <div>
                        <label for="address">地址</label>
                        <input type="text" id="address">
                    </div>
                </div>
                <div>
                    <button type="submit" id="saveCustomerBtn">儲存客戶</button>
                    <button type="button" id="clearCustomerFormBtn">清除表單</button>
                </div>
            </form>
        </fieldset>

        <div class="global-controls screen-only">
            <input type="search" id="customerSearch" placeholder="搜尋代號/公司/統編/人名/電話...">
            <button type="button" id="exportCustomersJson">匯出 JSON</button>
            <div class="file-input-wrapper">
                 <button type="button">匯入 JSON</button>
                 <input type="file" id="importCustomersJsonInput" accept=".json">
            </div>
            <div class="file-input-wrapper">
                 <button type="button">匯入 CSV</button>
                 <input type="file" id="importCustomersCsvInput" accept=".csv">
            </div>
        </div>

        <div style="overflow-x:auto;">
            <table id="customerTable">
                <thead>
                    <tr>
                        <th>代號</th>
                        <th>公司名稱</th>
                        <th>統一編號</th>
                        <th>聯絡人</th>
                        <th>電話</th>
                        <th>地址</th>
                        <th>備註</th>
                        <th class="screen-only">操作</th>
                    </tr>
                </thead>
                <tbody>
                    </tbody>
            </table>
        </div>
    </div>

    <div id="tab-tax" class="tab-content">
        <h2>營業稅模組</h2>
        
        <div class="tax-header">
            <div>
                <label for="rocYearSelect">民國年度</label>
                <select id="rocYearSelect"></select>
            </div>
            <div>
                <label for="taxPeriodSelect">期別</label>
                <select id="taxPeriodSelect">
                    <option value="1">01-02月</option>
                    <option value="2">03-04月</option>
                    <option value="3">05-06月</option>
                    <option value="4">07-08月</option>
                    <option value="5">09-10月</option>
                    <option value="6">11-12月</option>
                </select>
            </div>
            <div id="currentDateDisplay"></div>
        </div>

        <div class="upcoming-section">
            <h3>預定收回清單</h3>
            <div class="grid-2">
                <div>
                    <h4>📅 今日預定收回</h4>
                    <ul id="today-collection" class="upcoming-list"><li>無</li></ul>
                </div>
                <div>
                    <h4>🔔 未來三日預定收回</h4>
                    <ul id="future-collection" class="upcoming-list"><li>無</li></ul>
                </div>
            </div>
        </div>

        <fieldset class="screen-only">
            <legend>新增 / 修改營業稅項目</legend>
            <form id="taxForm">
                <input type="hidden" id="taxRecordId">
                <div class="grid-4">
                    <div>
                        <label for="taxCustomerSelect">選擇客戶</label>
                        <select id="taxCustomerSelect" required></select>
                        <small>資料來自客戶資料庫，此處唯讀</small>
                    </div>
                    <div>
                        <label for="invoiceType">收/發票方式</label>
                        <select id="invoiceType">
                            <option value="收">我方向客戶收款 (銷項)</option>
                            <option value="發">我支付給客戶 (進項)</option>
                        </select>
                    </div>
                    <div>
                        <label for="invoiceDate">預定收/發票日</label>
                        <input type="date" id="invoiceDate" required>
                    </div>
                    <div>
                        <label for="invoiceAmount">金額 (未稅)</label>
                        <input type="number" id="invoiceAmount" required min="0">
                    </div>
                </div>
                <div>
                     <label for="taxRemark">備註</label>
                     <textarea id="taxRemark" rows="2"></textarea>
                </div>
                <div>
                    <button type="submit" id="saveTaxBtn">儲存項目</button>
                    <button type="button" id="clearTaxFormBtn">清除表單</button>
                </div>
            </form>
        </fieldset>

         <div class="global-controls screen-only">
            <button type="button" id="exportTaxJson">匯出 JSON</button>
            <div class="file-input-wrapper">
                 <button type="button">匯入 JSON</button>
                 <input type="file" id="importTaxJsonInput" accept=".json">
            </div>
        </div>

        <div style="overflow-x:auto;" id="tax-table-container">
             </div>
    </div>
</main>

<script type="application/json" id="demo-data">
{
  "customers": [
    { "id": "cust-1", "code": "C001", "name": "創新科技", "taxId": "12345678", "contact": "陳經理", "phone": "02-1234-5678", "address": "台北市信義區市府路1號", "notes": [{ "text": "長期合作夥伴，付款準時。", "timestamp": "2025-01-15T10:00:00.000Z" }] },
    { "id": "cust-2", "code": "C002", "name": "環球貿易", "taxId": "87654321", "contact": "林小姐", "phone": "03-9876-5432", "address": "桃園市中壢區中央路2號", "notes": [] },
    { "id": "cust-3", "code": "C003", "name": "設計美學有限公司", "taxId": "11223344", "contact": "王總監", "phone": "04-1122-3344", "address": "台中市西屯區文心路3號", "notes": [{ "text": "需要先收款才出貨。", "timestamp": "2025-03-20T14:30:00.000Z" }, { "text": "2025 Q2 專案洽談中。", "timestamp": "2025-04-10T11:00:00.000Z" }] }
  ],
  "taxRecords": [
    { "id": "tax-1", "customerId": "cust-1", "type": "收", "date": "2025-09-10", "amount": 50000, "remark": "Q3 服務費" },
    { "id": "tax-2", "customerId": "cust-2", "type": "發", "date": "2025-09-25", "amount": 12000, "remark": "採購辦公用品" },
    { "id": "tax-3", "customerId": "cust-1", "type": "收", "date": "2025-11-15", "amount": 75000, "remark": "Q4 顧問費" }
  ]
}
</script>

<script>
// --- 全域錯誤處理 ---
// 註記: 若要使用 Service Worker / fetch() / ES Modules，需以本機伺服器啟動 (e.g., python -m http.server)
window.onerror = function(message, source, lineno, colno, error) {
    const errorMsg = `程式碼發生錯誤:\n訊息: ${message}\n檔案: ${source}\n行號: ${lineno}:${colno}\n錯誤物件: ${error}`;
    console.error(errorMsg);
    alert(errorMsg);
    return true; // 防止瀏覽器預設行為
};
window.addEventListener('unhandledrejection', function(event) {
    const errorMsg = `非同步操作發生錯誤:\n原因: ${event.reason}`;
    console.error(errorMsg);
    alert(errorMsg);
});

// --- 主應用程式 ---
const App = {
    state: {
        customers: [],
        taxRecords: [],
    },

    // --- 初始化 ---
    init() {
        this.loadState();
        this.setupEventListeners();
        this.renderAll();
    },

    // --- 狀態管理 (localStorage) ---
    loadState() {
        try {
            const savedState = localStorage.getItem('appState');
            if (savedState) {
                this.state = JSON.parse(savedState);
            } else {
                // 如果 localStorage 為空，載入範例資料
                const demoDataEl = document.getElementById('demo-data');
                if (demoDataEl) {
                    const demoData = JSON.parse(demoDataEl.textContent);
                    this.state.customers = demoData.customers || [];
                    this.state.taxRecords = demoData.taxRecords || [];
                    this.saveState();
                }
            }
        } catch (e) {
            console.error("無法載入或解析狀態:", e);
            alert("載入資料時發生錯誤，將使用空資料庫。");
            this.state = { customers: [], taxRecords: [] };
        }
    },

    saveState() {
        try {
            localStorage.setItem('appState', JSON.stringify(this.state));
        } catch (e) {
            console.error("無法儲存狀態:", e);
            alert("儲存資料時發生錯誤！您的資料可能不會被保留。");
        }
    },

    // --- 事件監聽器設定 ---
    setupEventListeners() {
        // 分頁切換
        document.querySelector('.tab-nav').addEventListener('click', e => {
            if (e.target.classList.contains('tab-link')) {
                const tabId = e.target.dataset.tab;
                this.switchTab(tabId);
            }
        });

        // 模組1: 客戶資料庫
        document.getElementById('customerForm').addEventListener('submit', this.handleCustomerFormSubmit.bind(this));
        document.getElementById('clearCustomerFormBtn').addEventListener('click', this.clearCustomerForm.bind(this));
        document.getElementById('customerTable').addEventListener('click', this.handleCustomerTableClick.bind(this));
        document.getElementById('customerSearch').addEventListener('input', e => this.renderCustomerTable(e.target.value));
        document.getElementById('exportCustomersJson').addEventListener('click', () => this.exportJSON('customers', 'customers.json'));
        document.getElementById('importCustomersJsonInput').addEventListener('change', e => this.importJSON(e, 'customers'));
        document.getElementById('importCustomersCsvInput').addEventListener('change', e => this.importCSV(e));

        // 模組2: 營業稅
        document.getElementById('taxForm').addEventListener('submit', this.handleTaxFormSubmit.bind(this));
        document.getElementById('clearTaxFormBtn').addEventListener('click', this.clearTaxForm.bind(this));
        document.getElementById('rocYearSelect').addEventListener('change', () => this.renderTaxTable());
        document.getElementById('taxPeriodSelect').addEventListener('change', () => this.renderTaxTable());
        document.getElementById('tax-table-container').addEventListener('click', this.handleTaxTableClick.bind(this));
        document.getElementById('exportTaxJson').addEventListener('click', () => this.exportJSON('taxRecords', 'tax_records.json'));
        document.getElementById('importTaxJsonInput').addEventListener('change', e => this.importJSON(e, 'taxRecords'));

        // 全域控制
        document.getElementById('printButton').addEventListener('click', () => window.print());
        document.getElementById('backupAll').addEventListener('click', this.backupAll.bind(this));
        document.getElementById('restoreAllInput').addEventListener('change', this.restoreAll.bind(this));
        
        // 列印事件鉤子
        window.onbeforeprint = this.handleBeforePrint;
        window.onafterprint = this.handleAfterPrint;
    },

    // --- 渲染函式 ---
    renderAll() {
        this.renderCustomerTable();
        this.renderTaxModule();
    },
    
    // --- UI 互動 ---
    switchTab(tabId) {
        document.querySelectorAll('.tab-content').forEach(el => el.classList.remove('active'));
        document.querySelectorAll('.tab-link').forEach(el => el.classList.remove('active'));
        document.getElementById(`tab-${tabId}`).classList.add('active');
        document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');
    },

    // --- 輔助工具 ---
    generateId(prefix = 'id') {
        return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    },
    
    formatDate(dateStr) {
        if (!dateStr) return '';
        const date = new Date(dateStr);
        return date.toLocaleDateString('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\//g, '-');
    },
    
    showAlert(message, type = 'info') {
        const color = type === 'error' ? '#e74c3c' : '#3498db';
        alert(message);
        console.log(`[${type.toUpperCase()}] ${message}`);
    },

    // --- 模組1: 客戶資料庫 ---
    renderCustomerTable(filter = '') {
        const tbody = document.getElementById('customerTable').querySelector('tbody');
        const searchTerm = filter.trim().toLowerCase();
        
        const filteredCustomers = this.state.customers.filter(c => {
            return !searchTerm ||
                   (c.code && c.code.toLowerCase().includes(searchTerm)) ||
                   (c.name && c.name.toLowerCase().includes(searchTerm)) ||
                   (c.taxId && c.taxId.toLowerCase().includes(searchTerm)) ||
                   (c.contact && c.contact.toLowerCase().includes(searchTerm)) ||
                   (c.phone && c.phone.toLowerCase().includes(searchTerm));
        });

        if (filteredCustomers.length === 0) {
            tbody.innerHTML = `<tr><td colspan="8" style="text-align:center;">找不到符合條件的客戶。</td></tr>`;
            return;
        }

        tbody.innerHTML = filteredCustomers.map(customer => `
            <tr data-id="${customer.id}">
                <td>${customer.code || ''}</td>
                <td>${customer.name || ''}</td>
                <td>${customer.taxId || ''}</td>
                <td>${customer.contact || ''}</td>
                <td>${customer.phone || ''}</td>
                <td>${customer.address || ''}</td>
                <td>
                    <details>
                        <summary>${customer.notes && customer.notes.length > 0 ? `有 ${customer.notes.length} 則備註` : '新增備註'}</summary>
                        <ul class="note-history">
                            ${customer.notes && customer.notes.map(note => `
                                <li>
                                    <span class="timestamp">${new Date(note.timestamp).toLocaleString()}</span>
                                    ${note.text}
                                </li>
                            `).join('')}
                        </ul>
                        <textarea class="note-input screen-only" placeholder="輸入新備註..."></textarea>
                        <button type="button" class="add-note-btn screen-only" data-id="${customer.id}">新增備註</button>
                    </details>
                </td>
                <td class="actions screen-only">
                    <button type="button" class="edit-customer-btn" data-id="${customer.id}">編輯</button>
                    <button type="button" class="delete-customer-btn danger" data-id="${customer.id}">刪除</button>
                </td>
            </tr>
        `).join('');
    },

    handleCustomerFormSubmit(e) {
        e.preventDefault();
        const id = document.getElementById('customerId').value;
        const customerData = {
            id: id || this.generateId('cust'),
            code: document.getElementById('customerCode').value.trim(),
            name: document.getElementById('companyName').value.trim(),
            taxId: document.getElementById('taxId').value.trim(),
            contact: document.getElementById('contactPerson').value.trim(),
            phone: document.getElementById('phone').value.trim(),
            address: document.getElementById('address').value.trim(),
        };

        if (!customerData.code || !customerData.name) {
            this.showAlert('客戶代號與公司名稱為必填項目！', 'error');
            return;
        }

        if (id) { // 更新
            const index = this.state.customers.findIndex(c => c.id === id);
            if (index > -1) {
                // 保留現有的 notes
                customerData.notes = this.state.customers[index].notes;
                this.state.customers[index] = customerData;
            }
        } else { // 新增
             // 檢查代號是否重複
            if (this.state.customers.some(c => c.code === customerData.code)) {
                this.showAlert('客戶代號已存在，請使用不同的代號。', 'error');
                return;
            }
            customerData.notes = [];
            this.state.customers.push(customerData);
        }

        this.saveState();
        this.renderCustomerTable();
        this.renderTaxCustomerOptions();
        this.clearCustomerForm();
    },
    
    handleCustomerTableClick(e) {
        const target = e.target;
        const customerId = target.dataset.id;
        
        if (target.classList.contains('edit-customer-btn')) {
            const customer = this.state.customers.find(c => c.id === customerId);
            if (customer) {
                document.getElementById('customerId').value = customer.id;
                document.getElementById('customerCode').value = customer.code;
                document.getElementById('companyName').value = customer.name;
                document.getElementById('taxId').value = customer.taxId;
                document.getElementById('contactPerson').value = customer.contact;
                document.getElementById('phone').value = customer.phone;
                document.getElementById('address').value = customer.address;
                window.scrollTo(0, 0); // 滾動到頁首方便編輯
            }
        } else if (target.classList.contains('delete-customer-btn')) {
            if (confirm(`確定要刪除這位客戶嗎？\n關聯的營業稅記錄將會失去客戶資訊！`)) {
                this.state.customers = this.state.customers.filter(c => c.id !== customerId);
                this.saveState();
                this.renderAll();
            }
        } else if (target.classList.contains('add-note-btn')) {
            const row = target.closest('tr');
            const noteInput = row.querySelector('.note-input');
            const text = noteInput.value.trim();
            if (text) {
                const customer = this.state.customers.find(c => c.id === customerId);
                if (customer) {
                    const newNote = { text, timestamp: new Date().toISOString() };
                    customer.notes.unshift(newNote); // 加到最前面
                    this.saveState();
                    this.renderCustomerTable();
                    noteInput.value = '';
                }
            }
        }
    },
    
    clearCustomerForm() {
        document.getElementById('customerForm').reset();
        document.getElementById('customerId').value = '';
    },

    // --- 模組2: 營業稅 ---
    renderTaxModule() {
        this.setupTaxDateSelectors();
        this.renderTaxCustomerOptions();
        this.renderUpcomingCollections();
        this.renderTaxTable();
    },

    setupTaxDateSelectors() {
        const today = new Date();
        const currentYear = today.getFullYear();
        const rocYear = currentYear - 1911;
        
        // 設定民國年度下拉選單
        const yearSelect = document.getElementById('rocYearSelect');
        if (yearSelect.options.length === 0) { // 只在首次載入時填充
            for (let y = rocYear + 2; y >= rocYear - 5; y--) {
                yearSelect.add(new Option(y, y));
            }
        }
        yearSelect.value = rocYear;

        // 設定期別
        const currentMonth = today.getMonth() + 1;
        const period = Math.ceil(currentMonth / 2);
        document.getElementById('taxPeriodSelect').value = period;

        // 顯示今天日期
        document.getElementById('currentDateDisplay').textContent = `今天日期: ${today.toLocaleDateString('sv-SE')}`;
    },

    renderTaxCustomerOptions() {
        const select = document.getElementById('taxCustomerSelect');
        const currentVal = select.value;
        select.innerHTML = '<option value="">-- 選擇客戶 --</option>';
        this.state.customers
            .sort((a, b) => a.code.localeCompare(b.code, 'zh-Hant-TW-u-co-stroke'))
            .forEach(c => {
                const option = new Option(`[${c.code}] ${c.name}`, c.id);
                select.add(option);
            });
        select.value = currentVal; // 嘗試還原之前選擇的值
    },

    renderUpcomingCollections() {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const todayStr = today.toISOString().split('T')[0];

        const todayList = document.getElementById('today-collection');
        const futureList = document.getElementById('future-collection');
        todayList.innerHTML = '';
        futureList.innerHTML = '';
        
        const futureDates = [];
        for (let i = 1; i <= 3; i++) {
            const futureDay = new Date(today);
            futureDay.setDate(today.getDate() + i);
            futureDates.push({
                date: futureDay,
                dateStr: futureDay.toISOString().split('T')[0],
                dayOfWeek: futureDay.toLocaleDateString('zh-TW', { weekday: 'long' })
            });
        }
        
        let todayFound = false;
        
        this.state.taxRecords.forEach(record => {
            const customer = this.state.customers.find(c => c.id === record.customerId);
            const customerName = customer ? `[${customer.code}] ${customer.name}` : '[客戶資料已刪除]';
            const recordDate = record.date;

            // 今日預定
            if (recordDate === todayStr) {
                const li = document.createElement('li');
                li.textContent = `${customerName} - ${record.type === '收' ? '收款' : '付款'} $${Number(record.amount).toLocaleString()}`;
                todayList.appendChild(li);
                todayFound = true;
            }
            
            // 未來三日
            futureDates.forEach(fd => {
                 if (recordDate === fd.dateStr) {
                    futureList.innerHTML += `<li>${fd.dateStr} (${fd.dayOfWeek}): ${customerName} - ${record.type === '收' ? '收款' : '付款'} $${Number(record.amount).toLocaleString()}</li>`;
                 }
            });
        });

        if (!todayFound) todayList.innerHTML = '<li>無</li>';
        if (futureList.innerHTML === '') futureList.innerHTML = '<li>無</li>';
    },

    renderTaxTable() {
        const container = document.getElementById('tax-table-container');
        const rocYear = parseInt(document.getElementById('rocYearSelect').value, 10);
        const period = parseInt(document.getElementById('taxPeriodSelect').value, 10);
        const year = rocYear + 1911;
        const startMonth = (period - 1) * 2 + 1;
        const endMonth = startMonth + 1;

        const startDate = new Date(year, startMonth - 1, 1);
        const endDate = new Date(year, endMonth, 0); // 0日會自動變成上個月的最後一天

        const filteredRecords = this.state.taxRecords.filter(r => {
            const recordDate = new Date(r.date);
            return recordDate >= startDate && recordDate <= endDate;
        }).sort((a,b) => new Date(a.date) - new Date(b.date));

        // 按日期分組
        const groupedByDate = filteredRecords.reduce((acc, record) => {
            (acc[record.date] = acc[record.date] || []).push(record);
            return acc;
        }, {});
        
        const dates = Object.keys(groupedByDate).sort();
        
        if (dates.length === 0) {
            container.innerHTML = `<p style="text-align:center;">此期間無營業稅項目。</p>`;
            return;
        }

        let totalIncome = 0;
        let totalExpense = 0;
        
        let html = '';
        dates.forEach(date => {
            const records = groupedByDate[date];
            html += `
            <div class="tax-date-group">
                <h3>${this.formatDate(date)}</h3>
                <table class="tax-table">
                    <thead>
                        <tr>
                            <th>客戶資料</th>
                            <th>類型</th>
                            <th>金額 (未稅)</th>
                            <th>稅額 (5%)</th>
                            <th>總額 (含稅)</th>
                            <th>備註</th>
                            <th class="screen-only">操作</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            records.forEach(record => {
                const customer = this.state.customers.find(c => c.id === record.customerId);
                const tax = Math.round(record.amount * 0.05);
                const total = record.amount + tax;
                if (record.type === '收') {
                    totalIncome += record.amount;
                } else {
                    totalExpense += record.amount;
                }
                
                html += `
                    <tr data-id="${record.id}">
                        <td>
                            ${customer ? `<strong>[${customer.code}] ${customer.name}</strong>` : `<strong class="danger">[客戶資料已刪除]</strong>`}
                            <div class="readonly-data">${customer ? `統編: ${customer.taxId || 'N/A'}` : ''}</div>
                        </td>
                        <td>${record.type === '收' ? '銷項' : '進項'}</td>
                        <td>$${Number(record.amount).toLocaleString()}</td>
                        <td>$${tax.toLocaleString()}</td>
                        <td>$${total.toLocaleString()}</td>
                        <td>${record.remark || ''}</td>
                        <td class="actions screen-only">
                            <button type="button" class="edit-tax-btn" data-id="${record.id}">編輯</button>
                            <button type="button" class="delete-tax-btn danger" data-id="${record.id}">刪除</button>
                        </td>
                    </tr>
                `;
            });
            html += `</tbody></table></div>`;
        });
        
        // 加上總計
        const totalTaxIncome = Math.round(totalIncome * 0.05);
        const totalTaxExpense = Math.round(totalExpense * 0.05);
        const finalTax = totalTaxIncome - totalTaxExpense;

        html += `
            <div class="tax-summary" style="margin-top: 20px; padding: 15px; background: var(--bg-color); border-radius: 5px;">
                <h3>本期總計</h3>
                <p>銷項總額 (未稅): $${totalIncome.toLocaleString()} | 稅額: $${totalTaxIncome.toLocaleString()}</p>
                <p>進項總額 (未稅): $${totalExpense.toLocaleString()} | 稅額: $${totalTaxExpense.toLocaleString()}</p>
                <h4 style="color: ${finalTax >= 0 ? 'var(--success-color)' : 'var(--accent-color)'};">
                    本期應納稅額: $${finalTax.toLocaleString()}
                </h4>
            </div>
        `;

        container.innerHTML = html;
    },

    handleTaxFormSubmit(e) {
        e.preventDefault();
        const id = document.getElementById('taxRecordId').value;
        const recordData = {
            id: id || this.generateId('tax'),
            customerId: document.getElementById('taxCustomerSelect').value,
            type: document.getElementById('invoiceType').value,
            date: document.getElementById('invoiceDate').value,
            amount: parseFloat(document.getElementById('invoiceAmount').value),
            remark: document.getElementById('taxRemark').value.trim(),
        };

        if (!recordData.customerId || !recordData.date || isNaN(recordData.amount)) {
            this.showAlert('客戶、日期與金額為必填項目！', 'error');
            return;
        }

        if (id) { // 更新
            const index = this.state.taxRecords.findIndex(r => r.id === id);
            if (index > -1) this.state.taxRecords[index] = recordData;
        } else { // 新增
            this.state.taxRecords.push(recordData);
        }

        this.saveState();
        this.renderUpcomingCollections();
        this.renderTaxTable();
        this.clearTaxForm();
    },

    handleTaxTableClick(e) {
        const target = e.target;
        const recordId = target.dataset.id;
        
        if (target.classList.contains('edit-tax-btn')) {
            const record = this.state.taxRecords.find(r => r.id === recordId);
            if (record) {
                document.getElementById('taxRecordId').value = record.id;
                document.getElementById('taxCustomerSelect').value = record.customerId;
                document.getElementById('invoiceType').value = record.type;
                document.getElementById('invoiceDate').value = record.date;
                document.getElementById('invoiceAmount').value = record.amount;
                document.getElementById('taxRemark').value = record.remark;
                window.scrollTo(0, 0);
            }
        } else if (target.classList.contains('delete-tax-btn')) {
            if (confirm('確定要刪除此項目嗎？')) {
                this.state.taxRecords = this.state.taxRecords.filter(r => r.id !== recordId);
                this.saveState();
                this.renderUpcomingCollections();
                this.renderTaxTable();
            }
        }
    },
    
    clearTaxForm() {
        document.getElementById('taxForm').reset();
        document.getElementById('taxRecordId').value = '';
    },
    
    // --- 匯入 / 匯出 ---
    exportJSON(key, filename) {
        const dataStr = JSON.stringify(this.state[key], null, 2);
        const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
        const link = document.createElement('a');
        link.setAttribute('href', dataUri);
        link.setAttribute('download', filename);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    },

    importJSON(event, key) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = JSON.parse(e.target.result);
                if (!Array.isArray(data)) throw new Error('JSON 格式不正確，需要是陣列。');
                
                // 以 ID 覆蓋
                data.forEach(newItem => {
                    const index = this.state[key].findIndex(oldItem => oldItem.id === newItem.id);
                    if (index > -1) {
                        this.state[key][index] = newItem;
                    } else {
                        this.state[key].push(newItem);
                    }
                });

                this.saveState();
                this.renderAll();
                this.showAlert('JSON 資料匯入成功！', 'success');
            } catch (err) {
                this.showAlert(`匯入失敗: ${err.message}`, 'error');
            } finally {
                event.target.value = ''; // 清空 file input
            }
        };
        reader.readAsText(file);
    },

    parseCSV(text) {
        // 簡易但支援引號的 CSV 解析器
        const result = [];
        let row = [];
        let current = '';
        let inQuote = false;
        for (let i = 0; i < text.length; i++) {
            const char = text[i];
            if (inQuote) {
                if (char === '"' && text[i+1] === '"') { // 處理 "" 轉義
                    current += '"';
                    i++;
                } else if (char === '"') {
                    inQuote = false;
                } else {
                    current += char;
                }
            } else {
                if (char === '"') {
                    inQuote = true;
                } else if (char === ',') {
                    row.push(current);
                    current = '';
                } else if (char === '\n' || char === '\r') {
                    if (i > 0 && text[i-1] !== '\n' && text[i-1] !== '\r') {
                        row.push(current);
                        result.push(row);
                        row = [];
                        current = '';
                    }
                    if (char === '\r' && text[i+1] === '\n') i++; // 處理 CRLF
                } else {
                    current += char;
                }
            }
        }
        if (current || row.length > 0) {
            row.push(current);
            result.push(row);
        }
        return result;
    },

    importCSV(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const text = e.target.result;
                const parsed = this.parseCSV(text);
                const headers = parsed[0].map(h => h.trim());
                const data = parsed.slice(1);
                
                const requiredHeaders = ['id', 'code', 'name'];
                if (!requiredHeaders.every(h => headers.includes(h))) {
                    throw new Error(`CSV 缺少必要欄位，至少需要: ${requiredHeaders.join(', ')}`);
                }
                
                let updatedCount = 0;
                let addedCount = 0;

                data.forEach(row => {
                    if (row.length < headers.length) return; // 跳過空行或不完整的行
                    const newItem = {};
                    headers.forEach((header, index) => {
                        newItem[header] = row[index];
                    });
                    
                    if (!newItem.id) return;

                    // notes 欄位需要特殊處理
                    if (newItem.notes && typeof newItem.notes === 'string') {
                        try {
                            newItem.notes = JSON.parse(newItem.notes);
                        } catch {
                            newItem.notes = [{ text: newItem.notes, timestamp: new Date().toISOString() }];
                        }
                    } else {
                        newItem.notes = [];
                    }

                    const index = this.state.customers.findIndex(c => c.id === newItem.id);
                    if (index > -1) {
                        this.state.customers[index] = { ...this.state.customers[index], ...newItem };
                        updatedCount++;
                    } else {
                        this.state.customers.push(newItem);
                        addedCount++;
                    }
                });

                this.saveState();
                this.renderAll();
                this.showAlert(`CSV 匯入完成！\n更新了 ${updatedCount} 筆資料，新增了 ${addedCount} 筆資料。`, 'success');

            } catch (err) {
                this.showAlert(`匯入 CSV 失敗: ${err.message}`, 'error');
            } finally {
                event.target.value = '';
            }
        };
        reader.readAsText(file);
    },
    
    // --- 備份與還原 ---
    backupAll() {
        const backupData = JSON.stringify(this.state, null, 2);
        const blob = new Blob([backupData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `backup-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    },

    restoreAll(event) {
        const file = event.target.files[0];
        if (!file) return;
        if (!confirm('還原快照將會覆蓋所有現有資料，確定要繼續嗎？')) {
             event.target.value = '';
             return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const newState = JSON.parse(e.target.result);
                if ('customers' in newState && 'taxRecords' in newState) {
                    this.state = newState;
                    this.saveState();
                    this.renderAll();
                    this.showAlert('已成功從快照還原！', 'success');
                } else {
                    throw new Error('快照檔案格式不正確。');
                }
            } catch (err) {
                this.showAlert(`還原失敗: ${err.message}`, 'error');
            } finally {
                event.target.value = '';
            }
        };
        reader.readAsText(file);
    },
    
    // --- 列印處理 ---
    handleBeforePrint() {
        // 儲存目前 details 的開關狀態
        document.querySelectorAll('details').forEach(detail => {
            if (detail.open) {
                detail.dataset.wasOpen = 'true';
            }
            detail.open = true; // 列印時全部展開
        });
    },
    
    handleAfterPrint() {
        // 恢復 details 的原始狀態
        document.querySelectorAll('details').forEach(detail => {
            if (detail.dataset.wasOpen === 'true') {
                detail.open = true;
                delete detail.dataset.wasOpen;
            } else {
                detail.open = false;
            }
        });
    }
};

// --- DOM 載入後啟動應用 ---
document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
</script>

</body>
</html>
