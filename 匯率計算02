<!DOCTYPE html>
<html lang="zh-Hant" data-app>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>離線匯差計算器 v3｜水單 & 進出口報單</title>
  <style>
    /* ===== Theme System (Light / Dark) ===== */
    :root{
      /* light theme defaults */
      --bg:#f8fafc;          /* slate-50 */
      --panel:#ffffff;       /* white */
      --panel-2:#f1f5f9;     /* slate-100 */
      --muted:#475569;       /* slate-600 */
      --text:#0f172a;        /* slate-900 */
      --accent:#0284c7;      /* sky-600 */
      --accent-2:#06b6d4;    /* cyan-500 */
      --ok:#10b981;          /* emerald-500 */
      --bad:#ef4444;         /* red-500 */
      --warn:#d97706;        /* amber-600 */
      --card:#ffffff;
      --border:#e2e8f0;      /* slate-200 */
      --input-bg:#ffffff;
      --input-text:#0f172a;
      --table-stripe:#f8fafc;
      --shadow:0 10px 30px rgba(2,6,23,.06);
      --code:#0f172a;
    }

    [data-theme="dark"]{
      --bg:#0b1220;          /* deep blue */
      --panel:#0f172a;       /* slate-900 */
      --panel-2:#0a1220;
      --muted:#94a3b8;       /* slate-400 */
      --text:#e2e8f0;        /* slate-200 */
      --accent:#22d3ee;      /* cyan-400 */
      --accent-2:#38bdf8;    /* sky-400 */
      --ok:#34d399;          /* green-400 */
      --bad:#fb7185;         /* rose-400 */
      --warn:#f59e0b;        /* amber-500 */
      --card:#0f172a;
      --border:#1f2a44;
      --input-bg:#0a1220;
      --input-text:#e2e8f0;
      --table-stripe:#0b1628;
      --shadow:0 10px 30px rgba(0,0,0,.25);
      --code:#e2e8f0;
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;background:radial-gradient(1200px 600px at 10% -10%,var(--panel-2) 0%,transparent 60%),linear-gradient(0deg,var(--bg),var(--bg));color:var(--text);font:14px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,"Noto Sans","Apple Color Emoji","Segoe UI Emoji"}
    h1,h2{margin:.2rem 0 1rem}
    h1{font-size:1.3rem}
    h2{font-size:1.1rem;color:var(--text)}
    .wrap{max-width:1200px;margin:0 auto;padding:20px}

    .topbar{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px}
    .theme-toggle{display:flex;gap:8px;align-items:center}
    .theme-btn{border:1px solid var(--border);background:var(--panel);color:var(--text);border-radius:999px;padding:6px 10px;cursor:pointer;box-shadow:var(--shadow)}

    .tabs{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:12px;align-items:center}
    .tab{border:1px solid var(--border);background:var(--panel);color:var(--text);border-radius:999px;padding:8px 12px;cursor:pointer;transition:.18s;box-shadow:var(--shadow)}
    .tab.active{background:linear-gradient(90deg,var(--accent),var(--accent-2));color:#0b1220;font-weight:700;border-color:transparent}

    .grid{display:grid;gap:12px}
    .grid.cols-2{grid-template-columns:1fr 1fr}
    .grid.cols-3{grid-template-columns:repeat(3,1fr)}
    .split{display:grid;grid-template-columns: 1.3fr .7fr;gap:12px}
    @media (max-width: 900px){.grid.cols-2,.grid.cols-3,.split{grid-template-columns:1fr}}

    .row{display:flex;gap:8px;align-items:flex-end}
    .card{background:var(--card);border:1px solid var(--border);border-radius:16px;padding:14px;box-shadow:var(--shadow)}
    label{font-size:.85rem;color:var(--muted)}

    input,select,textarea{width:100%;background:var(--input-bg);color:var(--input-text);border:1px solid var(--border);border-radius:10px;padding:8px 10px;outline:none}
    input:focus,select:focus,textarea:focus{border-color:var(--accent);box-shadow:0 0 0 3px color-mix(in oklab, var(--accent) 25%, transparent)}
    textarea{min-height:100px}

    table{width:100%;border-collapse:collapse;background:var(--panel)}
    thead{position:sticky;top:0;background:var(--panel)}
    th,td{border-bottom:1px solid var(--border);padding:8px;text-align:left;color:var(--text)}
    tbody tr:nth-child(odd){background:var(--table-stripe)}

    .btn{background:var(--panel);border:1px solid var(--border);color:var(--text);border-radius:10px;padding:8px 12px;cursor:pointer;box-shadow:var(--shadow)}
    .btn.primary{background:linear-gradient(90deg,var(--accent),var(--accent-2));border:none;color:#082f49;font-weight:700}
    .btn.ghost{background:transparent}
    .btn.warn{background:linear-gradient(90deg,#f59e0b,#f97316);border:none;color:#111;font-weight:700}
    .btn.danger{background:linear-gradient(90deg,#fb7185,#ef4444);border:none;color:#111;font-weight:700}

    .pill{padding:2px 8px;border-radius:999px;border:1px solid var(--border);font-size:.75rem;opacity:.9}
    .gain{background:color-mix(in oklab, var(--ok) 18%, transparent);color:var(--ok)}
    .loss{background:color-mix(in oklab, var(--bad) 18%, transparent);color:var(--bad)}
    .muted{color:var(--muted)}
    .mono{font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;color:var(--code)}
    .right{display:flex;justify-content:flex-end;gap:8px}
    .hint{font-size:.8rem;color:var(--muted)}
    .sticky{position:sticky;top:8px}
    .footer{margin-top:16px;color:var(--muted);font-size:.8rem}
    .small{font-size:.85rem}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="topbar">
      <h1>離線匯差計算器 v3｜水單 & 進出口報單</h1>
      <div class="theme-toggle">
        <span class="muted">主題</span>
        <button id="theme-btn" class="theme-btn" title="切換亮/暗">🌗 切換</button>
      </div>
    </div>

    <!-- Quick bar: Global Customer/Vendor + Allocation actions -->
    <div class="row" id="quickbar" style="margin-bottom:8px">
      <div style="flex:1" class="card">
        <label>客戶（預設廠商/篩選）</label>
        <input id="globalVendor" list="global-vendor-list" placeholder="輸入或選擇客戶/廠商" />
        <datalist id="global-vendor-list"></datalist>
        <div class="hint">此欄會：① 自動帶入新增表單的「廠商」；② 作為列表/分析預設篩選；可隨時清空。</div>
      </div>
      <div class="card" style="min-width:260px">
        <label>分攤快速動作（針對上方客戶）</label>
        <div class="row">
          <button class="btn" id="fifoAlloc">FIFO 自動分攤</button>
          <button class="btn" id="clearAlloc">清空分攤</button>
        </div>
      </div>
    </div>

    <div class="tabs" id="tabs"></div>
    <div id="panel-container" class="grid"></div>

    <div class="footer">資料皆儲存在此瀏覽器的 <span class="mono">localStorage</span>，可離線使用。建議定期「匯出備份」。</div>
  </div>

<script>
(function(){
  // ===== Theme: auto-detect & toggle =====
  const THEME_KEY = 'fx-theme';
  const GLOBAL_VENDOR_KEY='fx-current-vendor';
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  const savedTheme = localStorage.getItem(THEME_KEY);
  const theme = savedTheme || (prefersDark ? 'dark' : 'light');
  setTheme(theme);
  document.getElementById('theme-btn').onclick = ()=>{
    setTheme(document.documentElement.getAttribute('data-theme')==='dark'?'light':'dark');
  };
  function setTheme(t){
    document.documentElement.setAttribute('data-theme', t);
    localStorage.setItem(THEME_KEY, t);
  }

  // ------------------ Data Layer ------------------
  const storeKey = 'fx-offline-v3';
  const state = load() || {
    settings:{ rateMode:'mul', vendorHint:'', defaultCurrency:'USD', baseCurrency:'TWD' },
    slips:[], // 水單
    decls:[], // 報單
    allocs:[], // 分攤: {id, declId, slipId, amount}
    audit:[] // 稽核: {id,time,action,entity,entityId,detail}
  };
  function save(){ localStorage.setItem(storeKey, JSON.stringify(state)); }
  function load(){ try{ return JSON.parse(localStorage.getItem(storeKey)); }catch(e){ return null; } }
  function uid(){ return Math.random().toString(36).slice(2,10); }
  function nowISO(){ return new Date().toISOString(); }
  function log(action, entity, entityId, detail){ state.audit.unshift({id:uid(), time:nowISO(), action, entity, entityId, detail}); if(state.audit.length>2000) state.audit.length=2000; }
  function parseNum(x){ const n=Number(String(x).replace(/,/g,'')); return isFinite(n)?n:0; }
  function format(n, d=2){ return (isFinite(n)?n:0).toLocaleString(undefined,{minimumFractionDigits:d,maximumFractionDigits:d}); }
  function vendors(){ const set=new Set([...(state.slips||[]).map(x=>x.vendor), ...(state.decls||[]).map(x=>x.vendor)]); return Array.from(set).filter(Boolean).sort(); }

  // Allocation helpers
  function totalAllocatedForDecl(declId){ return state.allocs.filter(a=>a.declId===declId).reduce((s,a)=>s+parseNum(a.amount),0); }
  function totalAllocatedForSlip(slipId){ return state.allocs.filter(a=>a.slipId===slipId).reduce((s,a)=>s+parseNum(a.amount),0); }
  function slipAvailable(slip){ return Math.max(0, parseNum(slip.amount) - totalAllocatedForSlip(slip.id)); }
  function declAvailable(decl){ return Math.max(0, parseNum(decl.amount) - totalAllocatedForDecl(decl.id)); }

  // Compute FX (supports allocations)
  function computeFx(decl){
    const relevantAllocs = state.allocs.filter(a=>a.declId===decl.id);
    const rDecl = parseNum(decl.rate);

    if(relevantAllocs.length>0){
      let sumLocalSlip=0, sumLocalDecl=0;
      let arapList=[]; let stepLines=[];
      relevantAllocs.forEach(a=>{
        const slip = state.slips.find(s=>s.id===a.slipId); if(!slip) return;
        const rSlip = parseNum(slip.rate);
        const part = parseNum(a.amount);
        const localBySlip = state.settings.rateMode==='mul' ? part * rSlip : (rSlip? part / rSlip : 0);
        const localByDecl = state.settings.rateMode==='mul' ? part * rDecl : (rDecl? part / rDecl : 0);
        sumLocalSlip += localBySlip; sumLocalDecl += localByDecl;
        const slipDate = new Date(slip.date); const declDate=new Date(decl.date);
        arapList.push(slipDate < declDate ? '預收付' : (slipDate > declDate ? '應收付' : '同日'));
        // Updated formula display for each allocation step
        const currencySymbol = decl.currency || '外幣';
        stepLines.push(`${format(part)}${currencySymbol} @ ${format(rDecl,4)}-${format(rSlip,4)} (差額: ${format(localByDecl-localBySlip)})`);
      });
      const diff = sumLocalDecl - sumLocalSlip;
      let label='', kind='';
      if(decl.type==='進口'){
        label = diff>0 ? '兌換盈餘' : (diff<0 ? '兌換損失':'無差額');
        kind = diff>0 ? 'gain' : (diff<0 ? 'loss':'even');
      }else{ // 出口
        label = diff>0 ? '兌換損失' : (diff<0 ? '兌換盈餘':'無差額');
        kind = diff>0 ? 'loss' : (diff<0 ? 'gain':'even');
      }
      return { slip:null, localBySlip:sumLocalSlip, localByDecl:sumLocalDecl, diff, label, kind, arap:arapList.join(' / '), steps:stepLines.join('\n') };
    }

    // Original single-slip matching logic removed. If no allocations, diff is 0 and status is '未分攤'.
    return { slip:null, note:'尚未分攤', localBySlip:0, localByDecl:0, diff:0, label:'未分攤', kind:'none', arap:null, steps:'尚未進行分攤。請在右側「分攤配置」區塊新增水單進行分配。' };
  }

  // ------------------ UI Helpers ------------------
  const elTabs = document.getElementById('tabs');
  const elPanels = document.getElementById('panel-container');
  const tabs = [
    { id:'slip', name:'水單管理' },
    { id:'decl', name:'進出口報單' },
    { id:'fx',   name:'匯差分析' },
    { id:'audit',name:'稽核軌跡' },
    { id:'data', name:'資料管理' }
  ];
  let activeTab = 'slip';
  let selectedDeclForDetailId = null; // Store the ID of the decl to show detail for

  function renderTabs(){
    elTabs.innerHTML = '';
    tabs.forEach(t=>{
      const b=document.createElement('button');
      b.className = 'tab'+(activeTab===t.id?' active':'');
      b.textContent = t.name;
      b.onclick = ()=>{ activeTab=t.id; render(); };
      elTabs.appendChild(b);
    })
  }

  function wrapField(labelText, input){ const w=document.createElement('div'); const l=document.createElement('label'); l.textContent=labelText; w.appendChild(l); w.appendChild(input); return w; }
  function button(text, kind, onclick){ const b=document.createElement('button'); b.className='btn '+(kind||''); b.textContent=text; b.onclick=onclick; return b; }
  function esc(s){ return String(s||'').replace(/[&<>\"]/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;"}[c])); }

  // ------------------ Panels ------------------
  function panelSlip(){
    const box = document.createElement('div'); box.className='grid';

    const p = document.createElement('div'); p.className='card';
    p.innerHTML = `<h2>新增水單</h2>`;
    const row1 = document.createElement('div'); row1.className='grid cols-3';
    const date = document.createElement('input'); date.type='date';
    const currency = document.createElement('input'); currency.placeholder='幣別 (如: USD)'; currency.value = state.settings.defaultCurrency; // Added currency input
    const rate = document.createElement('input'); rate.type='number'; rate.step='0.0001';
    const amount = document.createElement('input'); amount.type='number'; amount.step='0.01';
    const vendor = document.createElement('input'); vendor.placeholder='廠商/客戶'; vendor.setAttribute('list','vendor-list');
    const vendorsList = document.createElement('datalist'); vendorsList.id='vendor-list'; vendors().forEach(v=>{ const o=document.createElement('option'); o.value=v; vendorsList.appendChild(o); });
    const note = document.createElement('input'); note.placeholder='備註 (選填)';

    // default vendor from quickbar
    const gv = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); if(gv) vendor.value=gv;

    row1.appendChild(wrapField('日期',date));
    row1.appendChild(wrapField('幣別',currency)); // Added currency field
    row1.appendChild(wrapField('匯率',rate));
    row1.appendChild(wrapField('外幣金額',amount));
    row1.appendChild(wrapField('廠商',vendor));
    row1.appendChild(wrapField('備註',note));
    const actions=document.createElement('div'); actions.className='right';
    const btn = button('新增水單','primary',()=>{
      if(!date.value||!vendor.value||!currency.value){ alert('請填寫 日期、幣別 與 廠商'); return; }
      const obj={id:uid(), date:date.value, currency:currency.value.toUpperCase().trim(), rate:parseNum(rate.value), amount:parseNum(amount.value), vendor:vendor.value.trim(), note:note.value.trim()}; // Save currency
      state.slips.push(obj); log('新增','水單',obj.id, JSON.stringify(obj));
      save(); render();
    });
    actions.appendChild(btn);

    const batch = document.createElement('textarea');
    batch.placeholder = `批量新增：每行輸入「日期,幣別,匯率,金額,廠商,備註」
例如：
2025-01-05,USD,31.25,10000,Acme Ltd,TT匯入
2025-01-08,JPY,0.215,500000,Acme Ltd,部分預收`; // Updated batch placeholder for currency
    const rowBatch = document.createElement('div'); rowBatch.className='row';
    rowBatch.appendChild(batch);
    const btnBatch = button('批量匯入水單', 'warn', ()=>{
      const lines = batch.value.split(/\n+/).map(s=>s.trim()).filter(Boolean);
      let ok=0, bad=0; const added=[];
      lines.forEach(line=>{
        const [d,c,r,a,v, n] = line.split(',').map(x=>x!=null?x.trim():x);
        if(d && c && v){ const obj={id:uid(), date:d, currency:c.toUpperCase(), rate:parseNum(r), amount:parseNum(a), vendor:v, note:n||''}; state.slips.push(obj); added.push(obj); ok++; } else bad++;
      });
      if(added.length) log('批量匯入','水單','-', `${added.length} 筆`);
      save(); alert(`成功 ${ok} 筆，略過 ${bad} 筆。`); render();
    });
    rowBatch.appendChild(btnBatch);

    p.appendChild(row1); p.appendChild(actions); p.appendChild(document.createElement('hr')); p.appendChild(rowBatch); p.appendChild(vendorsList);
    box.appendChild(p);

    const list = document.createElement('div'); list.className='card';
    list.innerHTML = `<h2>水單歷史</h2>`;
    const filter = document.createElement('div'); filter.className='row';
    const fVendor = document.createElement('input'); fVendor.placeholder='搜尋廠商';
    const fFrom = document.createElement('input'); fFrom.type='date';
    const fTo = document.createElement('input'); fTo.type='date';
    filter.appendChild(wrapField('廠商', fVendor));
    filter.appendChild(wrapField('起', fFrom));
    filter.appendChild(wrapField('迄', fTo));
    list.appendChild(filter);

    const tbl = document.createElement('table');
    const thead = document.createElement('thead'); thead.innerHTML = `<tr><th>日期</th><th>廠商</th><th class="small">幣別</th><th class="small">匯率</th><th class="small">外幣金額</th><th>可用金額</th><th>備註</th><th></th></tr>`; tbl.appendChild(thead); // Added currency to header
    const tbody = document.createElement('tbody');
    function drawBody(){
      tbody.innerHTML='';
      state.slips
        .filter(s=>!fVendor.value || (s.vendor||'').toLowerCase().includes(fVendor.value.toLowerCase()))
        .filter(s=>!fFrom.value || new Date(s.date)>=new Date(fFrom.value))
        .filter(s=>!fTo.value || new Date(s.date)<=new Date(fTo.value))
        .sort((a,b)=>new Date(b.date)-new Date(a.date))
        .forEach(s=>{
          const tr=document.createElement('tr');
          tr.innerHTML = `<td>${s.date}</td><td>${esc(s.vendor)}</td><td>${esc(s.currency||'N/A')}</td><td>${format(s.rate,4)}</td><td>${format(s.amount)}</td><td>${format(slipAvailable(s))}</td><td>${esc(s.note||'')}</td>`; // Display currency
          const td=document.createElement('td');
          const del=button('刪除','danger',()=>{ if(confirm('確定刪除？')){ log('刪除', '水單', s.id, JSON.stringify(s)); state.slips=state.slips.filter(x=>x.id!==s.id); state.allocs=state.allocs.filter(a=>a.slipId!==s.id); save(); render(); }});
          td.appendChild(del); tr.appendChild(td); tbody.appendChild(tr);
        });
    }
    [fVendor,fFrom,fTo].forEach(el=>el.oninput=drawBody);
    const gv1 = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); if(gv1) fVendor.value=gv1;
    drawBody();

    tbl.appendChild(tbody); list.appendChild(tbl); box.appendChild(list);
    return box;
  }

  function panelDecl(){
    const box = document.createElement('div'); box.className='grid';

    const p = document.createElement('div'); p.className='card'; p.innerHTML='<h2>新增進出口報單</h2>';
    const row = document.createElement('div'); row.className='grid cols-3';
    const date = document.createElement('input'); date.type='date';
    const currency = document.createElement('input'); currency.placeholder='幣別 (如: USD)'; currency.value = state.settings.defaultCurrency; // Added currency input
    const rate = document.createElement('input'); rate.type='number'; rate.step='0.0001';
    const amount = document.createElement('input'); amount.type='number'; amount.step='0.01';
    const vendor = document.createElement('input'); vendor.placeholder='廠商/客戶'; vendor.setAttribute('list','vendor-list');
    const type = document.createElement('select'); type.innerHTML = '<option value="進口">進口</option><option value="出口">出口</option>';
    const note = document.createElement('input'); note.placeholder='備註 (選填)';

    const gv = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); if(gv) vendor.value=gv;

    row.appendChild(wrapField('日期',date));
    row.appendChild(wrapField('幣別',currency)); // Added currency field
    row.appendChild(wrapField('匯率',rate));
    row.appendChild(wrapField('外幣金額',amount));
    row.appendChild(wrapField('廠商',vendor));
    row.appendChild(wrapField('類型',type));
    row.appendChild(wrapField('備註',note));

    // Removed "指定對應水單 (可選)" as multiple allocations are now primary

    const actions=document.createElement('div'); actions.className='right';
    const btn = button('新增報單','primary',()=>{
      if(!date.value||!vendor.value||!currency.value){ alert('請填寫 日期、幣別 與 廠商'); return; }
      const obj={id:uid(), date:date.value, currency:currency.value.toUpperCase().trim(), rate:parseNum(rate.value), amount:parseNum(amount.value), vendor:vendor.value.trim(), type:type.value, note:note.value.trim()}; // Removed linkSlipId
      state.decls.push(obj); log('新增','報單',obj.id, JSON.stringify(obj));
      save(); render();
    });
    actions.appendChild(btn);

    const batch = document.createElement('textarea');
    batch.placeholder = `批量新增：每行「日期,幣別,匯率,金額,廠商,類型(進口/出口),備註」
例如：
2025-01-09,USD,31.50,8000,Acme Ltd,進口,1月進口
2025-01-12,JPY,0.218,1200000,Acme Ltd,出口,1月出口`; // Updated batch placeholder for currency
    const rowBatch = document.createElement('div'); rowBatch.className='row';
    rowBatch.appendChild(batch);
    const btnBatch = button('批量匯入報單', 'warn', ()=>{
      const lines = batch.value.split(/\n+/).map(s=>s.trim()).filter(Boolean);
      let ok=0, bad=0;
      lines.forEach(line=>{
        const [d,c,r,a,v,t,n] = line.split(',').map(x=>x!=null?x.trim():x);
        if(d && c && v && (t==='進口'||t==='出口')){ const obj={id:uid(), date:d, currency:c.toUpperCase(), rate:parseNum(r), amount:parseNum(a), vendor:v, type:t, note:n||''}; state.decls.push(obj); ok++; log('批量新增','報單',obj.id, JSON.stringify(obj)); } // Removed linkSlipId
        else bad++;
      });
      save(); alert(`成功 ${ok} 筆，略過 ${bad} 筆。`); render();
    });
    rowBatch.appendChild(btnBatch);

    p.appendChild(row);
    p.appendChild(actions); p.appendChild(document.createElement('hr')); p.appendChild(rowBatch);
    box.appendChild(p);

    const list = document.createElement('div'); list.className='card';
    list.innerHTML = `<h2>報單歷史</h2>`;
    const filter = document.createElement('div'); filter.className='row';
    const fVendor = document.createElement('input'); fVendor.placeholder='搜尋廠商';
    const fType = document.createElement('select'); fType.innerHTML='<option value="">全部</option><option>進口</option><option>出口</option>';
    const fFrom = document.createElement('input'); fFrom.type='date';
    const fTo = document.createElement('input'); fTo.type='date';
    filter.appendChild(wrapField('廠商', fVendor));
    filter.appendChild(wrapField('類型', fType));
    filter.appendChild(wrapField('起', fFrom));
    filter.appendChild(wrapField('迄', fTo));
    list.appendChild(filter);

    const tbl = document.createElement('table');
    const thead = document.createElement('thead'); thead.innerHTML = `<tr><th>日期</th><th>類型</th><th>廠商</th><th class="small">幣別</th><th>匯率</th><th>外幣金額</th><th>已分攤</th><th>分攤水單</th><th></th></tr>`; tbl.appendChild(thead); // Changed "對應水單" to "分攤水單", added currency
    const tbody = document.createElement('tbody');
    function drawBody(){
      tbody.innerHTML='';
      state.decls
        .filter(s=>!fVendor.value || (s.vendor||'').toLowerCase().includes(fVendor.value.toLowerCase()))
        .filter(s=>!fType.value || s.type===fType.value)
        .filter(s=>!fFrom.value || new Date(s.date)>=new Date(fFrom.value))
        .filter(s=>!fTo.value || new Date(s.date)<=new Date(fTo.value))
        .sort((a,b)=>new Date(b.date)-new Date(a.date))
        .forEach(s=>{
          const tr=document.createElement('tr');
          const totalAllocated = totalAllocatedForDecl(s.id);
          const slipTxt = totalAllocated > 0 ? `已分攤 (${format(totalAllocated)} ${s.currency||'外幣'})` : '未分攤'; // Updated to reflect allocations
          tr.innerHTML = `<td>${s.date}</td><td>${s.type}</td><td>${esc(s.vendor)}</td><td>${esc(s.currency||'N/A')}</td><td>${format(s.rate,4)}</td><td>${format(s.amount)}</td><td>${format(totalAllocated)}</td><td class="small">${slipTxt}</td>`; // Display currency and allocated status
          const td=document.createElement('td');
          const del=button('刪除','danger',()=>{ if(confirm('確定刪除？')){ log('刪除','報單',s.id, JSON.stringify(s)); state.decls=state.decls.filter(x=>x.id!==s.id); state.allocs=state.allocs.filter(a=>a.declId!==s.id); save(); render(); }});
          td.appendChild(del); tr.appendChild(td); tbody.appendChild(tr);
          tr.onclick=()=>{ activeTab='fx'; selectedDeclForDetailId = s.id; render(); }; // Set the ID to show detail for
          tr.setAttribute('data-decl-id', s.id); // Add data attribute for easier selection
        });
    }
    [fVendor,fType,fFrom,fTo].forEach(el=>el.oninput=drawBody);
    const gv2 = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); if(gv2) fVendor.value=gv2;
    drawBody();

    tbl.appendChild(tbody); list.appendChild(tbl); box.appendChild(list);
    return box;
  }

  function panelFx(){
    const box = document.createElement('div'); box.className='split';

    const left = document.createElement('div'); left.className='grid';
    const p = document.createElement('div'); p.className='card'; p.innerHTML = '<h2>匯差分析</h2>';

    const filter = document.createElement('div'); filter.className='row';
    const fVendor = document.createElement('input'); fVendor.placeholder='搜尋廠商';
    const fType = document.createElement('select'); fType.innerHTML='<option value="">全部</option><option>進口</option><option>出口</option>';
    const fFrom = document.createElement('input'); fFrom.type='date';
    const fTo = document.createElement('input'); fTo.type='date';
    filter.appendChild(wrapField('廠商', fVendor));
    filter.appendChild(wrapField('類型', fType));
    filter.appendChild(wrapField('起', fFrom));
    filter.appendChild(wrapField('迄', fTo));
    p.appendChild(filter);

    const tbl = document.createElement('table');
    const thead = document.createElement('thead'); thead.innerHTML='<tr><th>日期</th><th>類型</th><th>廠商</th><th class="small">幣別</th><th>金額(外幣)</th><th>報單匯率</th><th>分攤水單數</th><th>差額</th><th>判斷</th></tr>'; // Added currency, changed header
    tbl.appendChild(thead);
    const tbody = document.createElement('tbody');

    function draw(){
      tbody.innerHTML='';
      const filtered = state.decls
        .filter(s=>!fVendor.value || (s.vendor||'').toLowerCase().includes(fVendor.value.toLowerCase()))
        .filter(s=>!fType.value || s.type===fType.value)
        .filter(s=>!fFrom.value || new Date(s.date)>=new Date(fFrom.value))
        .filter(s=>!fTo.value || new Date(s.date)<=new Date(fTo.value))
        .sort((a,b)=>new Date(b.date)-new Date(a.date));

      let sumGain=0, sumLoss=0;
      filtered.forEach(d=>{
        const r = computeFx(d);
        const tr=document.createElement('tr');
        const numSlipsAllocated = state.allocs.filter(a=>a.declId===d.id).length;
        tr.innerHTML = `<td>${d.date}</td><td>${d.type}</td><td>${esc(d.vendor)}</td><td>${esc(d.currency||'N/A')}</td><td>${format(d.amount)}</td><td>${format(d.rate,4)}</td><td>${numSlipsAllocated || '-'}</td>`; // Display currency, numSlips
        const tdDiff = document.createElement('td');
        tdDiff.innerHTML = `<span class="mono">${format(Math.abs(r.diff))}</span>`; // Keep absolute difference here
        const tdLabel = document.createElement('td');
        const pill = document.createElement('span'); pill.className='pill '+(r.kind==='gain'?'gain':(r.kind==='loss'?'loss':'')); pill.textContent=r.label;
        tdLabel.appendChild(pill);
        tr.appendChild(tdDiff); tr.appendChild(tdLabel);
        tr.onclick = ()=> showDetail(d); // Direct call to showDetail as we are on the FX panel
        tr.setAttribute('data-decl-id', d.id); // Add data attribute for easier selection from other panels
        tbody.appendChild(tr);
        if(r.kind==='gain') sumGain += Math.abs(r.diff);
        if(r.kind==='loss') sumLoss += Math.abs(r.diff);
      });

      sumBar.textContent = `總盈餘：${format(sumGain)} ｜ 總損失：${format(sumLoss)}`;
    }

    [fVendor,fType,fFrom,fTo].forEach(el=>el.oninput=draw);
    const gv3 = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); if(gv3) fVendor.value=gv3;
    tbl.appendChild(tbody); p.appendChild(tbl);

    const sumBar = document.createElement('div'); sumBar.className='hint'; p.appendChild(sumBar);

    left.appendChild(p);

    const right = document.createElement('div'); right.className='card sticky'; right.innerHTML='<h2>明細 / 計算過程</h2><div id="detail" class="small muted">點擊左側任一筆資料以查看</div><div id="alloc" style="margin-top:10px"></div>';

    function showDetail(d){
      const r = computeFx(d);
      const box = document.getElementById('detail');
      const allocBox = document.getElementById('alloc');
      if(!r){ box.textContent='發生錯誤'; return; }
      box.className='small';
      const currencySymbol = d.currency || '外幣';
      // Updated slipInfo to reflect multiple allocations
      const slipInfo = state.allocs.filter(a=>a.declId===d.id).length > 0 ? `已分攤多筆水單` : '尚未分攤';
      box.innerHTML = `
      <div class="grid">
        <div><label>報單</label><div class="mono">${d.date}｜${d.type}｜${esc(d.vendor)}｜外幣 ${currencySymbol} ${format(d.amount)}｜匯率 ${format(d.rate,4)}</div></div>
        <div><label>配對水單</label><div class="mono">${slipInfo}</div></div>
        <div><label>應收應付判定</label><div>${r.arap||'—'}</div></div>
        <div><label>判斷</label><div><span class="pill ${r.kind==='gain'?'gain':(r.kind==='loss'?'loss':'')}">${r.label}</span></div></div>
        <div><label>差額絕對值（本幣）</label><div class="mono">${format(Math.abs(r.diff))}</div></div>
        <div><label>計算過程</label><pre class="mono" style="white-space:pre-wrap;background:var(--panel-2);border:1px solid var(--border);padding:8px;border-radius:10px">${esc(r.steps||'—')}</pre></div>
      </div>`;

      // 分攤配置 UI
      const sameVendorSlips = state.slips.filter(s=>s.vendor===d.vendor && s.currency===d.currency).sort((a,b)=>new Date(a.date)-new Date(b.date)); // Filter by currency too
      const currentAllocs = state.allocs.filter(a=>a.declId===d.id);
      const totalAvailDecl = declAvailable(d);
      allocBox.innerHTML = '';
      const wrap = document.createElement('div'); wrap.className='card';
      const title = document.createElement('h2'); title.textContent='部分沖銷 / 分攤配置'; wrap.appendChild(title);
      const hint = document.createElement('div'); hint.className='hint'; hint.textContent='可為此報單分配多筆水單與分攤外幣金額。若未設定分攤，則匯差結果為零。'; wrap.appendChild(hint);

      const tbl = document.createElement('table');
      tbl.innerHTML = '<thead><tr><th>水單日期</th><th>幣別</th><th>匯率</th><th>水單可用(外幣)</th><th>分攤金額(外幣)</th><th></th></tr></thead>'; // Added currency to header
      const tbody = document.createElement('tbody');
      currentAllocs.forEach(a=>{
        const slip = state.slips.find(s=>s.id===a.slipId); if(!slip) return;
        const tr=document.createElement('tr');
        tr.innerHTML = `<td>${slip.date}</td><td>${esc(slip.currency||'N/A')}</td><td>${format(slip.rate,4)}</td><td>${format(slipAvailable(slip))}</td>`; // Display currency
        const tdAmt = document.createElement('td');
        const inp = document.createElement('input'); inp.type='number'; inp.step='0.01'; inp.value=a.amount; inp.onchange=()=>{ a.amount=parseNum(inp.value); log('修改分攤','分攤',a.id, `新金額 ${a.amount}`); save(); render(); showDetail(d); };
        tdAmt.appendChild(inp); tr.appendChild(tdAmt);
        const tdAct=document.createElement('td');
        const del=button('移除','danger',()=>{ state.allocs=state.allocs.filter(x=>x.id!==a.id); log('移除分攤','分攤',a.id, JSON.stringify(a)); save(); render(); showDetail(d); });
        tdAct.appendChild(del); tr.appendChild(tdAct);
        tbody.appendChild(tr);
      });
      tbl.appendChild(tbody); wrap.appendChild(tbl);

      // Add new allocation controls
      const addRow = document.createElement('div'); addRow.className='row';
      const sel = document.createElement('select');
      sel.innerHTML = sameVendorSlips.map(s=>`<option value="${s.id}">${s.date}｜${esc(s.currency||'N/A')}｜可用${format(slipAvailable(s))}｜匯率${format(s.rate,4)}</option>`).join(''); // Display currency in options
      const addAmt = document.createElement('input'); addAmt.type='number'; addAmt.step='0.01'; addAmt.placeholder='分攤外幣金額';
      addRow.appendChild(wrapField('選擇水單', sel));
      addRow.appendChild(wrapField('金額(外幣)', addAmt));
      const addBtn = button('新增分攤','primary',()=>{
        const slip = state.slips.find(s=>s.id===sel.value);
        if(!slip){ alert('請選擇水單'); return; }
        if(slip.currency !== d.currency){ alert('水單與報單幣別不符，無法分攤。'); return; } // Currency check
        const want = parseNum(addAmt.value);
        if(want<=0){ alert('金額需大於 0'); return; }
        const max = Math.min(slipAvailable(slip), declAvailable(d));
        if(want>max){ alert(`超過可分配金額，最大可分配：${format(max)} ${currencySymbol}`); return; } // Display currency
        const obj={id:uid(), declId:d.id, slipId:slip.id, amount:want};
        state.allocs.push(obj); log('新增分攤','分攤',obj.id, JSON.stringify(obj)); save(); render(); showDetail(d);
      });
      addRow.appendChild(addBtn);
      wrap.appendChild(addRow);

      const info = document.createElement('div'); info.className='hint'; info.textContent = `此報單剩餘可分配：${format(totalAvailDecl)} ${currencySymbol}`; // Display currency
      wrap.appendChild(info);

      // Wire quickbar buttons to current vendor
      // These buttons will act globally or on current global vendor, not specific to this decl detail
      const fifoBtn = document.getElementById('fifoAlloc'); if(fifoBtn) fifoBtn.onclick = ()=>{ const v=(localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); autoFIFO(v||null); };
      const clearBtn = document.getElementById('clearAlloc'); if(clearBtn) clearBtn.onclick = ()=>{ if(confirm('確定清空所有分攤？此操作無法撤銷。')){ state.allocs=[]; log('清空','分攤','-','全部清除'); save(); render(); } };

      allocBox.appendChild(wrap);
    }

    // helper: auto FIFO distribute within vendor context
    function autoFIFO(vendor){
      const decls = state.decls.filter(d=>!vendor || d.vendor===vendor).sort((a,b)=>new Date(a.date)-new Date(b.date));
      const slips = state.slips.filter(s=>!vendor || s.vendor===vendor).sort((a,b)=>new Date(a.date)-new Date(b.date));
      // reset vendor-related allocs
      if(vendor){
        const allocsToRemove = new Set();
        state.decls.filter(d => d.vendor === vendor).forEach(d => {
          state.allocs.filter(a => a.declId === d.id).forEach(a => allocsToRemove.add(a.id));
        });
        state.allocs = state.allocs.filter(a => !allocsToRemove.has(a.id));
      }
      let si=0;
      decls.forEach(d=>{
        let need = declAvailable(d);
        while(need>0 && si<slips.length){
          const s = slips[si];
          if (s.currency !== d.currency) { // Skip if currencies don't match
              si++;
              continue;
          }
          let avail = slipAvailable(s);
          if(avail<=0){ si++; continue; }
          const take = Math.min(need, avail);
          const obj={id:uid(), declId:d.id, slipId:s.id, amount:take};
          state.allocs.push(obj); need -= take; log('FIFO分攤','分攤',obj.id, `${d.id} ⇄ ${s.id} / ${take}`);
          if(slipAvailable(s)<=0) si++;
        }
      });
      save(); render();
    }

    box.appendChild(left); box.appendChild(right);
    return box;
  }

  function panelAudit(){
    const box=document.createElement('div'); box.className='card';
    box.innerHTML='<h2>稽核軌跡</h2>';
    const hint=document.createElement('div'); hint.className='hint'; hint.textContent='記錄新增/刪除/批量匯入/分攤等操作（僅存本機）。'; box.appendChild(hint);
    const tbl=document.createElement('table');
    tbl.innerHTML='<thead><tr><th>時間</th><th>動作</th><th>類型</th><th>ID</th><th>說明</th></tr></thead>';
    const tbody=document.createElement('tbody');
    state.audit.forEach(a=>{
      const tr=document.createElement('tr');
      const t = new Date(a.time).toLocaleString();
      tr.innerHTML=`<td>${t}</td><td>${esc(a.action)}</td><td>${esc(a.entity)}</td><td class="mono">${esc(a.entityId)}</td><td class="small">${esc(a.detail||'')}</td>`;
      tbody.appendChild(tr);
    });
    tbl.appendChild(tbody); box.appendChild(tbl);
    return box;
  }

  function panelData(){
    const box = document.createElement('div'); box.className='grid';

    const s = document.createElement('div'); s.className='card'; s.innerHTML='<h2>系統設定</h2>';
    const mode = document.createElement('select'); mode.innerHTML='<option value="mul">本幣=外幣×匯率</option><option value="div">本幣=外幣÷匯率</option>';
    mode.value = state.settings.rateMode;
    mode.onchange = ()=>{ state.settings.rateMode=mode.value; log('修改設定','系統','rateMode', mode.value); save(); };

    const defaultCurrencyInput = document.createElement('input');
    defaultCurrencyInput.placeholder = '預設外幣幣別 (如: USD)';
    defaultCurrencyInput.value = state.settings.defaultCurrency;
    defaultCurrencyInput.onchange = () => {
      state.settings.defaultCurrency = defaultCurrencyInput.value.toUpperCase().trim();
      log('修改設定', '系統', 'defaultCurrency', defaultCurrencyInput.value);
      save(); render();
    };

    const note = document.createElement('div'); note.className='hint';
    note.textContent = '主題自動調整文字顏色；匯率模式依您公司習慣調整。';

    s.appendChild(wrapField('匯率解讀', mode));
    s.appendChild(wrapField('預設外幣幣別', defaultCurrencyInput)); // Added default currency setting
    s.appendChild(note);

    const d = document.createElement('div'); d.className='card'; d.innerHTML='<h2>資料備份</h2>';
    const ta = document.createElement('textarea'); ta.value = JSON.stringify(state, null, 2);
    const row = document.createElement('div'); row.className='right';
    row.appendChild(button('重新載入預覽','ghost',()=>{ ta.value = JSON.stringify(state,null,2); }));
    row.appendChild(button('從文字匯入','warn',()=>{ try{ const obj=JSON.parse(ta.value); Object.assign(state,obj); log('匯入','資料','JSON',''); save(); render(); }catch(e){ alert('JSON 格式錯誤'); } }));
    row.appendChild(button('清空所有資料','danger',()=>{ if(confirm('此動作無法復原，確定？')){ localStorage.removeItem(storeKey); location.reload(); } }));

    d.appendChild(ta); d.appendChild(row);

    box.appendChild(s); box.appendChild(d);
    return box;
  }

  // ------------------ Render Root ------------------
  function render(){
    // quickbar vendor list + default
    const gl = document.getElementById('global-vendor-list'); if(gl){ gl.innerHTML = vendors().map(v=>`<option value="${v}"></option>`).join(''); }
    const gv = document.getElementById('globalVendor'); if(gv){
      const savedGV = localStorage.getItem(GLOBAL_VENDOR_KEY)||''; if(gv.value!==savedGV) gv.value=savedGV;
      gv.oninput = ()=>{ localStorage.setItem(GLOBAL_VENDOR_KEY, gv.value.trim()); render(); };
    }

    renderTabs();
    elPanels.innerHTML='';
    const panel =
      activeTab==='slip' ? panelSlip() :
      activeTab==='decl' ? panelDecl() :
      activeTab==='fx' ? panelFx() :
      activeTab==='audit' ? panelAudit() :
      panelData();
    elPanels.appendChild(panel);

    // If there's a pending detail to show, and we're on the FX tab, show it
    if (activeTab === 'fx' && selectedDeclForDetailId) {
      const decl = state.decls.find(d => d.id === selectedDeclForDetailId);
      if (decl) {
        // showDetail is defined within panelFx, so we need to trigger the row click
        // after the panel is rendered.
        setTimeout(() => {
          const detailDeclRow = elPanels.querySelector(`table tbody tr[data-decl-id="${decl.id}"]`);
          if (detailDeclRow) {
            detailDeclRow.click();
          }
        }, 0);
      }
      selectedDeclForDetailId = null; // Clear after attempting to show
    }
  }

  // boot
  render();
})();
</script>
</body>
</html>