<!DOCTYPE html>
<html lang="zh-Hant" data-app>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Èõ¢Á∑öÂåØÂ∑ÆË®àÁÆóÂô® v3ÔΩúÊ∞¥ÂñÆ & ÈÄ≤Âá∫Âè£Â†±ÂñÆ</title>
  <script src="https://unpkg.com/localforage@1.10.0/dist/localforage.min.js"></script>
  <style>
    /* ===== Theme System (Light / Dark) ===== */
    :root{
      /* light theme defaults */
      --bg:#f8fafc;          /* slate-50 */
      --panel:#ffffff;       /* white */
      --panel-2:#f1f5f9;     /* slate-100 */
      --muted:#475569;       /* slate-600 */
      --text:#0f172a;        /* slate-900 */
      --accent:#0056b3;      /* Deep Midnight Blue (formerly #0284c7) */
      --accent-2:#007bff;    /* Vibrant Azure (formerly #06b6d4) */
      --ok:#10b981;          /* emerald-500 */
      --bad:#ef4444;         /* red-500 */
      --warn:#d97706;        /* amber-600 */
      --card:#ffffff;
      --border:#e2e8f0;      /* slate-200 */
      --input-bg:#ffffff;
      --input-text:#0f172a;
      --table-stripe:#f8fafc;
      --shadow:0 10px 30px rgba(2,6,23,.06);
      --shadow-hover:0 12px 35px rgba(2,6,23,.12);
      --shadow-focus:0 0 0 3px color-mix(in oklab, var(--accent) 25%, transparent), inset 0 1px 3px rgba(0,0,0,.1);
      --code:#0f172a;
      --highlight-bg: color-mix(in oklab, var(--accent) 10%, transparent);
      --highlight-border: var(--accent);
    }

    [data-theme="dark"]{
      --bg:#0b1220;          /* deep blue */
      --panel:#0f172a;       /* slate-900 */
      --panel-2:#0a1220;
      --muted:#94a3b8;       /* slate-400 */
      --text:#e2e8f0;        /* slate-200 */
      --accent:#3d8bdc;      /* Lighter Deep Midnight Blue for dark theme (formerly #22d3ee) */
      --accent-2:#5cacef;    /* Lighter Vibrant Azure for dark theme (formerly #38bdf8) */
      --ok:#34d399;          /* green-400 */
      --bad:#fb7185;         /* rose-400 */
      --warn:#f59e0b;        /* amber-500 */
      --card:#0f172a;
      --border:#1f2a44;
      --input-bg:#0a1220;
      --input-text:#e2e8f0;
      --table-stripe:#0b1628;
      --shadow:0 10px 30px rgba(0,0,0,.25);
      --shadow-hover:0 12px 35px rgba(0,0,0,.35);
      --shadow-focus:0 0 0 3px color-mix(in oklab, var(--accent) 25%, transparent), inset 0 1px 3px rgba(0,0,0,.25);
      --code:#e2e8f0;
      --highlight-bg: color-mix(in oklab, var(--accent) 10%, transparent);
      --highlight-border: var(--accent);
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;background:radial-gradient(1200px 600px at 10% -10%,var(--panel-2) 0%,transparent 60%),linear-gradient(0deg,var(--bg),var(--bg));color:var(--text);font:14px/1.7 system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,"Noto Sans","Apple Color Emoji","Segoe UI Emoji"}
    h1,h2{margin:.2rem 0 1rem;line-height:1.3}
    h1{font-size:1.6rem} /* Increased font size */
    h2{font-size:1.2rem;color:var(--text)} /* Increased font size */
    .wrap{max-width:1200px;margin:0 auto;padding:30px 20px;} /* Increased padding */

    .topbar{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px} /* Increased margin */
    .theme-toggle{display:flex;gap:8px;align-items:center}
    .theme-btn{border:1px solid var(--border);background:var(--panel);color:var(--text);border-radius:999px;padding:6px 10px;cursor:pointer;box-shadow:var(--shadow);transition:.18s}
    .theme-btn:hover{transform:translateY(-2px);box-shadow:var(--shadow-hover)}

    .tabs{display:flex;gap:12px;flex-wrap:wrap;margin-bottom:20px;align-items:center} /* Increased gap and margin */
    .tab{
      border:1px solid var(--border);background:var(--panel);color:var(--text);border-radius:999px;padding:8px 16px;cursor:pointer;transition:.18s;box-shadow:var(--shadow);
    }
    .tab:hover{transform:translateY(-2px);box-shadow:var(--shadow-hover)}
    .tab.active{background:linear-gradient(90deg,var(--accent),var(--accent-2));color:#fff;font-weight:700;border-color:transparent;box-shadow:var(--shadow-hover)}

    .grid{display:grid;gap:16px} /* Increased gap */
    .grid.cols-2{grid-template-columns:1fr 1fr}
    .grid.cols-3{grid-template-columns:repeat(3,1fr)}
    .split{display:grid;grid-template-columns: 1.3fr .7fr;gap:16px} /* Increased gap */
    @media (max-width: 900px){.grid.cols-2,.grid.cols-3,.split{grid-template-columns:1fr}}

    .row{display:flex;gap:12px;align-items:flex-end} /* Increased gap */
    .card{background:var(--card);border:1px solid var(--border);border-radius:16px;padding:20px;box-shadow:var(--shadow);margin-bottom:16px;} /* Increased padding, added margin */
    .panel-content-spacing { margin-bottom: 20px; }
    label{font-size:.85rem;color:var(--muted);margin-bottom:4px;display:block;}

    input,select,textarea{width:100%;background:var(--input-bg);color:var(--input-text);border:1px solid var(--border);border-radius:10px;padding:10px 12px;outline:none;transition:.18s} /* Increased padding */
    input:focus,select:focus,textarea:focus{border-color:var(--accent);box-shadow:var(--shadow-focus);}
    textarea{min-height:100px}

    table{width:100%;border-collapse:collapse;background:var(--panel);border-radius:12px;overflow:hidden;}
    thead{position:sticky;top:0;background:var(--panel)}
    th,td{border-bottom:1px solid var(--border);padding:12px 10px;text-align:left;color:var(--text)} /* Increased padding */
    tbody tr:nth-child(odd){background:var(--table-stripe)}
    tbody tr:hover{background:color-mix(in oklab, var(--accent) 5%, transparent);cursor:pointer;} /* Added hover effect */
    tbody tr.is-selected{background:var(--highlight-bg);border-left:4px solid var(--highlight-border);} /* Selected row style */
    tbody tr.is-selected td{font-weight:600;}

    .base-btn{
      border:1px solid var(--border);
      background:var(--panel);
      color:var(--text);
      border-radius:10px;
      padding:8px 12px;
      cursor:pointer;
      box-shadow:var(--shadow);
      transition:.18s ease;
      font-weight:500;
    }
    .base-btn:hover{transform:translateY(-2px);box-shadow:var(--shadow-hover);}
    .btn{
      composes: base-btn; /* Inherits base-btn styles */
    }
    .btn.primary{background:linear-gradient(90deg,var(--accent),var(--accent-2));border:none;color:#fff;font-weight:700;}
    .btn.primary:hover{box-shadow:var(--shadow-hover);background:linear-gradient(90deg,color-mix(in oklab, var(--accent) 80%, black),color-mix(in oklab, var(--accent-2) 80%, black));}
    .btn.ghost{background:transparent;border:none;box-shadow:none;}
    .btn.ghost:hover{background:color-mix(in oklab, var(--muted) 10%, transparent);box-shadow:none;}
    .btn.warn{background:linear-gradient(90deg,#f59e0b,#f97316);border:none;color:#111;font-weight:700;}
    .btn.warn:hover{box-shadow:var(--shadow-hover);background:linear-gradient(90deg,color-mix(in oklab, #f59e0b 80%, black),color-mix(in oklab, #f97316 80%, black));}
    .btn.danger{background:linear-gradient(90deg,#fb7185,#ef4444);border:none;color:#111;font-weight:700;}
    .btn.danger:hover{box-shadow:var(--shadow-hover);background:linear-gradient(90deg,color-mix(in oklab, #fb7185 80%, black),color-mix(in oklab, #ef4444 80%, black));}


    .pill{padding:4px 10px;border-radius:999px;border:1px solid var(--border);font-size:.75rem;opacity:.9} /* Increased padding */
    .gain{background:color-mix(in oklab, var(--ok) 18%, transparent);color:var(--ok)}
    .loss{background:color-mix(in oklab, var(--bad) 18%, transparent);color:var(--bad)}
    .muted{color:var(--muted)}
    .mono{font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;color:var(--code)}
    .right{display:flex;justify-content:flex-end;gap:8px}
    .hint{font-size:.8rem;color:var(--muted);line-height:1.4;margin-top:8px;}
    .sticky{position:sticky;top:20px;} /* Increased top */
    .footer{margin-top:24px;color:var(--muted);font-size:.8rem} /* Increased margin */
    .small{font-size:.85rem}
    .allocation-detail-row td {
      padding-top: 0;
      padding-bottom: 0;
    }
    .allocation-detail-content {
      padding: 12px; /* Increased padding */
      background: var(--panel-2);
      border-radius: 8px;
      margin: 12px 0; /* Increased margin */
    }
    .allocation-detail-content table {
      width: calc(100% - 16px);
      margin: 0 8px;
    }
    .allocation-detail-content th,
    .allocation-detail-content td {
      padding: 6px 8px; /* Increased padding */
      font-size: 0.8rem;
    }
    .allocation-detail-content tbody tr:nth-child(odd) {
      background: transparent; /* No stripe for nested table */
    }

    /* Panel transition animation */
    .panel-container {
      position: relative;
      min-height: 200px; /* Prevent layout shift during transitions */
    }
    .panel-wrapper {
      position: absolute;
      width: 100%;
      top: 0;
      left: 0;
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.3s ease-out, transform 0.3s ease-out;
    }
    .panel-wrapper.is-active {
      opacity: 1;
      transform: translateY(0);
      position: relative;
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="topbar">
      <h1 id="appTitle">Èõ¢Á∑öÂåØÂ∑ÆË®àÁÆóÂô® v3ÔΩúÊ∞¥ÂñÆ & ÈÄ≤Âá∫Âè£Â†±ÂñÆ</h1>
      <div class="theme-toggle">
        <span class="muted">‰∏ªÈ°å</span>
        <button id="theme-btn" class="theme-btn" title="ÂàáÊèõ‰∫Æ/Êöó">üåó ÂàáÊèõ</button>
      </div>
    </div>

    <!-- Quick bar: Global Customer/Vendor + Allocation actions -->
    <div class="row card panel-content-spacing">
      <div style="flex:1;">
        <label for="globalVendor">ÂÆ¢Êà∂ÔºàÁØ©ÈÅ∏Âª†ÂïÜÔºâ</label>
        <input id="globalVendor" list="global-vendor-list" placeholder="Ëº∏ÂÖ•ÊàñÈÅ∏ÊìáÂÆ¢Êà∂/Âª†ÂïÜ" />
        <datalist id="global-vendor-list"></datalist>
        <div class="hint">Ê≠§Ê¨Ñ‰ΩúÁÇ∫ÂàóË°®/ÂàÜÊûêÈ†êË®≠ÁØ©ÈÅ∏ÔºõÂèØÈö®ÊôÇÊ∏ÖÁ©∫„ÄÇ</div>
      </div>
      <div style="min-width:260px;">
        <label>ÂàÜÊî§Âø´ÈÄüÂãï‰ΩúÔºàÈáùÂ∞ç‰∏äÊñπÂÆ¢Êà∂Ôºâ</label>
        <div class="row">
          <button class="btn" id="fifoAlloc">FIFO Ëá™ÂãïÂàÜÊî§</button>
          <button class="btn" id="clearAlloc">Ê∏ÖÁ©∫ÂàÜÊî§</button>
        </div>
      </div>
    </div>

    <div class="tabs" id="tabs"></div>
    <div id="panel-container" class="panel-container"></div>

    <div class="footer">Ë≥áÊñôÁöÜÂÑ≤Â≠òÂú®Ê≠§ÁÄèË¶ΩÂô®ÁöÑ <span class="mono">localStorage</span>ÔºåÂèØÈõ¢Á∑ö‰ΩøÁî®„ÄÇÂª∫Ë≠∞ÂÆöÊúü„ÄåÂåØÂá∫ÂÇô‰ªΩ„Äç„ÄÇ</div>
  </div>

  <!-- Datalists for vendors -->
  <datalist id="all-vendor-list"></datalist>
  <datalist id="slip-vendor-list"></datalist>

<script>
(function(){
  // Global error handling
  window.onerror = function(message, source, lineno, colno, error) {
      console.error('Unhandled error:', { message, source, lineno, colno, error });
      alert('ÁôºÁîüÈåØË™§Ôºö' + (error ? error.message : message) + '\nË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢„ÄÇ');
      return true; // Prevent default error handling
  };
  window.onunhandledrejection = function(event) {
      console.error('Unhandled Promise rejection:', event.reason);
      alert('ÁôºÁîüÈåØË™§Ôºö' + (event.reason ? event.reason.message || event.reason : 'Êú™Áü•ÁöÑ Promise ÈåØË™§') + '\nË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢„ÄÇ');
      event.preventDefault(); // Prevent default error handling
  };

  // Utility: Debounce function
  function debounce(func, delay) {
    let timeout;
    return function(...args) {
      const context = this;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), delay);
    };
  }

  // ===== Theme: auto-detect & toggle =====
  const THEME_KEY = 'fx-theme';
  const GLOBAL_VENDOR_KEY='fx-current-vendor';
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  const savedTheme = localStorage.getItem(THEME_KEY);
  const theme = savedTheme || (prefersDark ? 'dark' : 'light');
  setTheme(theme);
  document.getElementById('theme-btn').onclick = ()=>{
    setTheme(document.documentElement.getAttribute('data-theme')==='dark'?'light':'dark');
  };
  function setTheme(t){
    document.documentElement.setAttribute('data-theme', t);
    localStorage.setItem(THEME_KEY, t);
  }

  // ------------------ Data Layer ------------------
  const storeKey = 'fx-offline-v3';
  let state = {
    settings:{ rateMode:'mul', vendorHint:'', defaultCurrency:'USD', baseCurrency:'TWD' },
    slips:[], // Ê∞¥ÂñÆ
    decls:[], // Â†±ÂñÆ
    allocs:[], // ÂàÜÊî§: {id, declId, slipId, amount}
    audit:[], // Á®ΩÊ†∏: {id,time,action,entity,entityId,detail}
    _dataVersion: 0, // For caching
    _vendorCache: { all: null, slips: null, version: -1 },
  };

  async function saveAppState(){
    try{
      await localforage.setItem(storeKey, JSON.stringify(state));
    } catch (e) {
      if (e.name === 'QuotaExceededError') {
        alert('ÂÑ≤Â≠òÁ©∫ÈñìÂ∑≤ÊªøÔºåË´ãÊ∏ÖÈô§ÈÉ®ÂàÜË≥áÊñôÊàñÂåØÂá∫ÂÇô‰ªΩÂæåÂÜçË©¶„ÄÇ');
      } else {
        console.error('Failed to save state:', e);
        alert('ÂÑ≤Â≠òË≥áÊñôÊôÇÁôºÁîüÈåØË™§Ôºö' + e.message);
      }
    }
  }
  async function loadAppState(){
    try{
      const data = await localforage.getItem(storeKey);
      if (data) {
        const loadedState = JSON.parse(data);
        // Ensure _dataVersion exists if loaded from old version
        if (typeof loadedState._dataVersion === 'undefined') {
            loadedState._dataVersion = 0;
        }
        return loadedState;
      }
    }catch(e){
      console.error('Failed to load state:', e);
      return null;
    }
    return null;
  }
  function incrementDataVersion() {
      state._dataVersion++;
      // Invalidate computeFx cache on all decls
      state.decls.forEach(d => delete d._fxResult);
  }
  function uid(){ return Math.random().toString(36).slice(2,10); }
  function nowISO(){ return new Date().toISOString(); }
  function log(action, entity, entityId, detail){
    state.audit.unshift({id:uid(), time:nowISO(), action, entity, entityId, detail});
    if(state.audit.length>2000) state.audit.length=2000;
  }
  function parseNum(x){ const n=Number(String(x).replace(/,/g,'')); return isFinite(n)?n:0; }
  function format(n, d=2){ return (isFinite(n)?n:0).toLocaleString(undefined,{minimumFractionDigits:d,maximumFractionDigits:d}); }
  
  function allVendors(){
    if (state._vendorCache.version !== state._dataVersion || !state._vendorCache.all) {
      const set=new Set([...(state.slips||[]).map(x=>x.vendor), ...(state.decls||[]).map(x=>x.vendor)]);
      state._vendorCache.all = Array.from(set).filter(Boolean).sort();
      state._vendorCache.version = state._dataVersion;
    }
    return state._vendorCache.all;
  }
  function slipVendors(){
    if (state._vendorCache.version !== state._dataVersion || !state._vendorCache.slips) {
      const set=new Set((state.slips||[]).map(x=>x.vendor));
      state._vendorCache.slips = Array.from(set).filter(Boolean).sort();
      state._vendorCache.version = state._dataVersion;
    }
    return state._vendorCache.slips;
  }

  // Allocation helpers
  function totalAllocatedForDecl(declId){ return state.allocs.filter(a=>a.declId===declId).reduce((s,a)=>s+parseNum(a.amount),0); }
  function totalAllocatedForSlip(slipId){ return state.allocs.filter(a=>a.slipId===slipId).reduce((s,a)=>s+parseNum(a.amount),0); }
  function slipAvailable(slip){ return Math.max(0, parseNum(slip.amount) - totalAllocatedForSlip(slip.id)); }
  function declAvailable(decl){ return Math.max(0, parseNum(decl.amount) - totalAllocatedForDecl(decl.id)); }

  // Compute FX (supports allocations) with caching
  function computeFx(decl){
    // Check if result is cached and still valid
    if (decl._fxResult && decl._fxResult.version === state._dataVersion) {
        return decl._fxResult;
    }

    const relevantAllocs = state.allocs.filter(a=>a.declId===decl.id);
    const rDecl = parseNum(decl.rate);

    if(relevantAllocs.length>0){
      let sumLocalSlip=0, sumLocalDecl=0;
      let arapList=[]; let stepLines=[];
      relevantAllocs.forEach(a=>{
        const slip = state.slips.find(s=>s.id===a.slipId); if(!slip) return;
        const rSlip = parseNum(slip.rate);
        const part = parseNum(a.amount);
        const localBySlip = state.settings.rateMode==='mul' ? part * rSlip : (rSlip? part / rSlip : 0);
        const localByDecl = state.settings.rateMode==='mul' ? part * rDecl : (rDecl? part / rDecl : 0);
        sumLocalSlip += localBySlip; sumLocalDecl += localByDecl;
        const slipDate = new Date(slip.date); const declDate=new Date(decl.date);
        arapList.push(slipDate < declDate ? 'È†êÊî∂‰ªò' : (slipDate > declDate ? 'ÊáâÊî∂‰ªò' : 'ÂêåÊó•'));
        const currencySymbol = decl.currency || 'Â§ñÂπ£';
        stepLines.push(`${format(part)}${currencySymbol} @ Â†±ÂñÆ${format(rDecl,4)}-Ê∞¥ÂñÆ${format(rSlip,4)} (Â∑ÆÈ°ç: ${format(localByDecl-localBySlip)})`);
      });
      const diff = sumLocalDecl - sumLocalSlip;
      let label='', kind='';
      if(decl.type==='ÈÄ≤Âè£'){
        label = diff>0 ? 'ÂÖåÊèõÁõàÈ§ò' : (diff<0 ? 'ÂÖåÊèõÊêçÂ§±':'ÁÑ°Â∑ÆÈ°ç');
        kind = diff>0 ? 'gain' : (diff<0 ? 'loss':'even');
      }else{ // Âá∫Âè£
        label = diff>0 ? 'ÂÖåÊèõÊêçÂ§±' : (diff<0 ? 'ÂÖåÊèõÁõàÈ§ò':'ÁÑ°Â∑ÆÈ°ç');
        kind = diff>0 ? 'loss' : (diff<0 ? 'gain':'even');
      }
      decl._fxResult = { version: state._dataVersion, slip:null, localBySlip:sumLocalSlip, localByDecl:sumLocalDecl, diff, label, kind, arap:arapList.join(' / '), steps:stepLines.join('\n') };
    } else {
        decl._fxResult = { version: state._dataVersion, slip:null, note:'Â∞öÊú™ÂàÜÊî§', localBySlip:0, localByDecl:0, diff:0, label:'Êú™ÂàÜÊî§', kind:'none', arap:null, steps:'Â∞öÊú™ÈÄ≤Ë°åÂàÜÊî§„ÄÇË´ãÂú®Âè≥ÂÅ¥„ÄåÂàÜÊî§ÈÖçÁΩÆ„ÄçÂçÄÂ°äÊñ∞Â¢ûÊ∞¥ÂñÆÈÄ≤Ë°åÂàÜÈÖç„ÄÇ' };
    }
    return decl._fxResult;
  }

  // ------------------ UI Helpers ------------------
  const elTabs = document.getElementById('tabs');
  const elPanels = document.getElementById('panel-container');
  const tabs = [
    { id:'slip', name:'Ê∞¥ÂñÆÁÆ°ÁêÜ' },
    { id:'decl', name:'ÈÄ≤Âá∫Âè£Â†±ÂñÆ' },
    { id:'fx',   name:'ÂåØÂ∑ÆÂàÜÊûê' },
    { id:'audit',name:'Á®ΩÊ†∏ËªåË∑°' },
    { id:'data', name:'Ë≥áÊñôÁÆ°ÁêÜ' }
  ];
  let activeTab = 'slip';
  let selectedDeclForDetailId = null; // Store the ID of the decl to show detail for
  let expandedSlipId = null; // Store the ID of the slip whose allocations are expanded
  let currentPanelInstance = null; // To hold the currently active panel's methods

  function renderTabs(){
    elTabs.innerHTML = '';
    tabs.forEach(t=>{
      const b=document.createElement('button');
      b.className = 'tab'+(activeTab===t.id?' active':'');
      b.textContent = t.name;
      b.onclick = async ()=>{
        if (activeTab === t.id) return; // Prevent re-render if same tab
        activeTab=t.id;
        selectedDeclForDetailId = null; // Clear selected decl on tab change
        expandedSlipId = null; // Clear expanded slip on tab change
        await render();
      };
      elTabs.appendChild(b);
    })
  }

  // Helper for creating labelled input fields with unique IDs
  let fieldCounter = 0;
  function wrapField(labelText, inputEl){
      const wrapper = document.createElement('div');
      const label = document.createElement('label');
      const inputId = inputEl.id || `field-${fieldCounter++}`;
      inputEl.id = inputId;
      label.setAttribute('for', inputId);
      label.textContent = labelText;
      wrapper.appendChild(label);
      wrapper.appendChild(inputEl);
      return wrapper;
  }
  function button(text, kind, onclick){ const b=document.createElement('button'); b.className='btn '+(kind||''); b.textContent=text; b.onclick=onclick; return b; }
  function esc(s){ return String(s||'').replace(/[&<>\"]/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;"}[c])); }


  // Function to efficiently update table rows
  function updateTable(tbody, data, rowCreator, keyFn) {
    const existingRows = Array.from(tbody.children);
    const existingKeys = new Set(existingRows.map(row => row.dataset.id));
    const newKeys = new Set(data.map(keyFn));

    // Remove rows that no longer exist
    existingRows.forEach(row => {
      if (!newKeys.has(row.dataset.id)) {
        tbody.removeChild(row);
      }
    });

    // Add or update rows
    let currentHtmlIndex = 0;
    data.forEach(item => {
      const key = keyFn(item);
      let row = tbody.querySelector(`tr[data-id="${key}"]`);

      if (row) {
        // Update existing row (assuming rowCreator can handle updates, or just re-create)
        // For simplicity, we'll re-create for now if content changes often.
        // A more advanced approach would diff and update individual cells.
        // For this task, re-creating is fine as the number of rows isn't huge.
        const newRow = rowCreator(item);
        if (row.innerHTML !== newRow.innerHTML) { // Basic check for content change
            tbody.replaceChild(newRow, row);
            row = newRow;
        }
      } else {
        // Add new row
        row = rowCreator(item);
        row.dataset.id = key; // Ensure data-id is set
        // Insert in correct order
        if (currentHtmlIndex < tbody.children.length) {
            tbody.insertBefore(row, tbody.children[currentHtmlIndex]);
        } else {
            tbody.appendChild(row);
        }
      }
      currentHtmlIndex++;
    });
  }


  // ------------------ Panels ------------------

  // Panel component template
  function createPanel(id, mountFn, updateFn) {
    const wrapper = document.createElement('div');
    wrapper.id = `panel-${id}`;
    wrapper.className = 'panel-wrapper';
    mountFn(wrapper); // Initial mount

    return {
      element: wrapper,
      update: updateFn
    };
  }

  // --- Panel Slip ---
  function createPanelSlip(){
    const box = document.createElement('div'); box.className='grid';
    const newSlipForm = document.createElement('div'); newSlipForm.className='card panel-content-spacing';
    newSlipForm.innerHTML = `<h2>Êñ∞Â¢ûÊ∞¥ÂñÆ</h2>`;
    const row1 = document.createElement('div'); row1.className='grid cols-3';
    const date = document.createElement('input'); date.type='date'; date.id='newSlipDate';
    const currency = document.createElement('input'); currency.placeholder='Âπ£Âà• (Â¶Ç: USD)'; currency.value = state.settings.defaultCurrency; currency.id='newSlipCurrency';
    const rate = document.createElement('input'); rate.type='number'; rate.step='0.0001'; rate.id='newSlipRate';
    const amount = document.createElement('input'); amount.type='number'; amount.step='0.01'; amount.id='newSlipAmount';
    const vendor = document.createElement('input'); vendor.placeholder='Âª†ÂïÜ/ÂÆ¢Êà∂'; vendor.setAttribute('list','all-vendor-list'); vendor.id='newSlipVendor';
    const note = document.createElement('input'); note.placeholder='ÂÇôË®ª (ÈÅ∏Â°´)'; note.id='newSlipNote';

    row1.appendChild(wrapField('Êó•Êúü',date));
    row1.appendChild(wrapField('Âπ£Âà•',currency));
    row1.appendChild(wrapField('ÂåØÁéá',rate));
    row1.appendChild(wrapField('Â§ñÂπ£ÈáëÈ°ç',amount));
    row1.appendChild(wrapField('Âª†ÂïÜ',vendor));
    row1.appendChild(wrapField('ÂÇôË®ª',note));
    const actions=document.createElement('div'); actions.className='right';
    const btn = button('Êñ∞Â¢ûÊ∞¥ÂñÆ','primary',async ()=>{
      if(!date.value||!vendor.value||!currency.value){ alert('Ë´ãÂ°´ÂØ´ Êó•Êúü„ÄÅÂπ£Âà• Ëàá Âª†ÂïÜ'); return; }
      const obj={id:uid(), date:date.value, currency:currency.value.toUpperCase().trim(), rate:parseNum(rate.value), amount:parseNum(amount.value), vendor:vendor.value.trim(), note:note.value.trim()};
      state.slips.push(obj); log('Êñ∞Â¢û','Ê∞¥ÂñÆ',obj.id, JSON.stringify(obj));
      incrementDataVersion();
      await saveAppState(); render('slip'); // Render 'slip' tab to update lists
    });
    actions.appendChild(btn);

    const batch = document.createElement('textarea'); batch.id='batchSlipInput';
    batch.placeholder = `ÊâπÈáèÊñ∞Â¢ûÔºöÊØèË°åËº∏ÂÖ•„ÄåÊó•Êúü,Âπ£Âà•,ÂåØÁéá,ÈáëÈ°ç,Âª†ÂïÜ,ÂÇôË®ª„Äç
‰æãÂ¶ÇÔºö
2025-01-05,USD,31.25,10000,Acme Ltd,TTÂåØÂÖ•
2025-01-08,JPY,0.215,500000,Acme Ltd,ÈÉ®ÂàÜÈ†êÊî∂`;
    const rowBatch = document.createElement('div'); rowBatch.className='row';
    rowBatch.appendChild(batch);
    const btnBatch = button('ÊâπÈáèÂåØÂÖ•Ê∞¥ÂñÆ', 'warn', debounce(async ()=>{
      const lines = batch.value.split(/\n+/).map(s=>s.trim()).filter(Boolean);
      let ok=0, bad=0; const added=[];
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const [d,c,r,a,v, n] = line.split(',').map(x=>x!=null?x.trim():x);
        if(d && c && v){ const obj={id:uid(), date:d, currency:c.toUpperCase(), rate:parseNum(r), amount:parseNum(a), vendor:v, note:n||''}; state.slips.push(obj); added.push(obj); ok++; } else bad++;
        if (i % 50 === 0) await new Promise(resolve => setTimeout(resolve, 0)); // Yield to UI
      }
      if(added.length) log('ÊâπÈáèÂåØÂÖ•','Ê∞¥ÂñÆ','-', `${added.length} Á≠Ü`);
      incrementDataVersion();
      await saveAppState();
      alert(`ÊàêÂäü ${ok} Á≠ÜÔºåÁï•ÈÅé ${bad} Á≠Ü„ÄÇ`);
      render('slip'); // Render 'slip' tab to update lists
    }, 300)); // Debounce batch import
    rowBatch.appendChild(btnBatch);

    newSlipForm.appendChild(row1); newSlipForm.appendChild(actions);
    newSlipForm.appendChild(document.createElement('hr')); newSlipForm.appendChild(rowBatch);
    box.appendChild(newSlipForm);

    const list = document.createElement('div'); list.className='card';
    list.innerHTML = `<h2>Ê∞¥ÂñÆÊ≠∑Âè≤</h2>`;
    const filter = document.createElement('div'); filter.className='row';
    const fVendor = document.createElement('input'); fVendor.placeholder='ÊêúÂ∞ãÂª†ÂïÜ'; fVendor.setAttribute('list','all-vendor-list'); fVendor.id='slipFilterVendor';
    const fFrom = document.createElement('input'); fFrom.type='date'; fFrom.id='slipFilterFrom';
    const fTo = document.createElement('input'); fTo.type='date'; fTo.id='slipFilterTo';
    filter.appendChild(wrapField('Âª†ÂïÜ', fVendor));
    filter.appendChild(wrapField('Ëµ∑', fFrom));
    filter.appendChild(wrapField('ËøÑ', fTo));
    list.appendChild(filter);

    const tbl = document.createElement('table');
    const thead = document.createElement('thead'); thead.innerHTML = `<tr><th>Êó•Êúü</th><th>Âª†ÂïÜ</th><th class="small">Âπ£Âà•</th><th class="small">ÂåØÁéá</th><th class="small">Â§ñÂπ£ÈáëÈ°ç</th><th>ÂèØÁî®ÈáëÈ°ç</th><th>ÂÇôË®ª</th><th>Âãï‰Ωú</th></tr>`; tbl.appendChild(thead);
    const tbody = document.createElement('tbody'); tbl.appendChild(tbody);

    const drawBody = ()=>{
      const filteredSlips = state.slips
        .filter(s=>!fVendor.value || (s.vendor||'').toLowerCase().includes(fVendor.value.toLowerCase()))
        .filter(s=>!fFrom.value || new Date(s.date)>=new Date(fFrom.value))
        .filter(s=>!fTo.value || new Date(s.date)<=new Date(fTo.value))
        .sort((a,b)=>new Date(b.date)-new Date(a.date));

      const rowCreator = (s) => {
        const tr=document.createElement('tr');
        tr.dataset.id = s.id;
        tr.innerHTML = `<td>${s.date}</td><td>${esc(s.vendor)}</td><td>${esc(s.currency||'N/A')}</td><td>${format(s.rate,4)}</td><td>${format(s.amount)}</td><td>${format(slipAvailable(s))}</td><td>${esc(s.note||'')}</td>`;
        const td=document.createElement('td');
        const viewAllocBtn = button('Êü•ÁúãÂàÜÊî§','ghost',null); // Click handled by delegation
        viewAllocBtn.dataset.action = 'toggle-alloc';
        viewAllocBtn.dataset.slipId = s.id;

        const del=button('Âà™Èô§','danger',null); // Click handled by delegation
        del.dataset.action = 'delete-slip';
        del.dataset.slipId = s.id;
        td.appendChild(viewAllocBtn);
        td.appendChild(del); tr.appendChild(td);

        if (expandedSlipId === s.id) {
            const allocDetailRow = document.createElement('tr');
            allocDetailRow.className = 'allocation-detail-row';
            allocDetailRow.innerHTML = `<td colspan="8">
              <div class="allocation-detail-content card">
                <h4>Â∑≤ÂàÜÈÖçËá≥Â†±ÂñÆÔºö</h4>
                <table style="width:100%">
                  <thead><tr><th>Â†±ÂñÆÊó•Êúü</th><th>Âª†ÂïÜ</th><th>È°ûÂûã</th><th>ÂàÜÊî§ÈáëÈ°ç(Â§ñÂπ£)</th><th></th></tr></thead>
                  <tbody></tbody>
                </table>
              </div>
            </td>`;
            const allocTbody = allocDetailRow.querySelector('tbody');
            const relevantAllocs = state.allocs.filter(a => a.slipId === s.id);
            if (relevantAllocs.length === 0) {
              allocTbody.innerHTML = `<tr><td colspan="5" class="muted">ÁÑ°ÂàÜÊî§Á¥ÄÈåÑ</td></tr>`;
            } else {
              relevantAllocs.forEach(alloc => {
                const decl = state.decls.find(d => d.id === alloc.declId);
                if (decl) {
                  const allocTr = document.createElement('tr');
                  allocTr.innerHTML = `
                    <td>${decl.date}</td>
                    <td>${esc(decl.vendor)}</td>
                    <td>${decl.type}</td>
                    <td>${format(alloc.amount)} ${decl.currency||'N/A'}</td>
                  `;
                  const viewDeclTd = document.createElement('td');
                  const viewDeclBtn = button('Êü•ÁúãÂ†±ÂñÆ','ghost',null); // Click handled by delegation
                  viewDeclBtn.dataset.action = 'view-decl-from-slip';
                  viewDeclBtn.dataset.declId = decl.id;
                  viewDeclTd.appendChild(viewDeclBtn);
                  allocTr.appendChild(viewDeclTd);
                  allocTbody.appendChild(allocTr);
                }
              });
            }
            const wrapper = document.createElement('div');
            wrapper.appendChild(tr);
            wrapper.appendChild(allocDetailRow);
            return wrapper; // Return a fragment containing both rows
        }
        return tr;
      };

      // Create a temporary container to handle fragments correctly with updateTable
      const tempTbody = document.createElement('tbody');
      filteredSlips.forEach(s => {
        const rowOrFragment = rowCreator(s);
        if (rowOrFragment.nodeType === Node.DOCUMENT_FRAGMENT_NODE || rowOrFragment.children) { // Handle fragments/div wrappers
            Array.from(rowOrFragment.children).forEach(child => tempTbody.appendChild(child));
        } else {
            tempTbody.appendChild(rowOrFragment);
        }
      });
      tbody.innerHTML = tempTbody.innerHTML; // A simpler approach given the fragment complexity

      // Delegation for actions on slip list
      tbody.onclick = async (event) => {
        const target = event.target;
        const buttonAction = target.dataset.action;
        const slipId = target.dataset.slipId || target.closest('tr[data-id]')?.dataset.id;
        const declId = target.dataset.declId;

        if (buttonAction === 'toggle-alloc') {
          expandedSlipId = (expandedSlipId === slipId) ? null : slipId;
          render('slip'); // Re-render to show/hide the allocation detail
        } else if (buttonAction === 'delete-slip') {
          if(confirm('Á¢∫ÂÆöÂà™Èô§Ôºü')){
            const slipToDelete = state.slips.find(x => x.id === slipId);
            if (slipToDelete) {
                log('Âà™Èô§', 'Ê∞¥ÂñÆ', slipId, JSON.stringify(slipToDelete));
                state.slips = state.slips.filter(x => x.id !== slipId);
                state.allocs = state.allocs.filter(a => a.slipId !== slipId);
                incrementDataVersion();
                await saveAppState(); render('slip');
            }
          }
        } else if (buttonAction === 'view-decl-from-slip') {
            activeTab='fx'; selectedDeclForDetailId = declId; await render();
        }
      };
    };

    [fVendor,fFrom,fTo].forEach(el=>el.oninput=debounce(drawBody, 300));
    list.appendChild(tbl); box.appendChild(list);

    const updatePanel = () => {
      fVendor.value = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); // Update filter from global
      drawBody();
    };

    return createPanel('slip', (el) => {
        el.appendChild(box);
    }, updatePanel);
  }

  // --- Panel Decl ---
  function createPanelDecl(){
    const box = document.createElement('div'); box.className='grid';

    const newDeclForm = document.createElement('div'); newDeclForm.className='card panel-content-spacing'; newDeclForm.innerHTML='<h2>Êñ∞Â¢ûÈÄ≤Âá∫Âè£Â†±ÂñÆ</h2>';
    const row = document.createElement('div'); row.className='grid cols-3';
    const date = document.createElement('input'); date.type='date'; date.id='newDeclDate';
    const currency = document.createElement('input'); currency.placeholder='Âπ£Âà• (Â¶Ç: USD)'; currency.value = state.settings.defaultCurrency; currency.id='newDeclCurrency';
    const rate = document.createElement('input'); rate.type='number'; rate.step='0.0001'; rate.id='newDeclRate';
    const amount = document.createElement('input'); amount.type='number'; amount.step='0.01'; amount.id='newDeclAmount';
    const vendor = document.createElement('input'); vendor.placeholder='Âª†ÂïÜ/ÂÆ¢Êà∂'; vendor.setAttribute('list','slip-vendor-list'); vendor.id='newDeclVendor';
    const type = document.createElement('select'); type.id='newDeclType'; type.innerHTML = '<option value="ÈÄ≤Âè£">ÈÄ≤Âè£</option><option value="Âá∫Âè£">Âá∫Âè£</option>';
    const note = document.createElement('input'); note.placeholder='ÂÇôË®ª (ÈÅ∏Â°´)'; note.id='newDeclNote';

    row.appendChild(wrapField('Êó•Êúü',date));
    row.appendChild(wrapField('Âπ£Âà•',currency));
    row.appendChild(wrapField('ÂåØÁéá',rate));
    row.appendChild(wrapField('Â§ñÂπ£ÈáëÈ°ç',amount));
    row.appendChild(wrapField('Âª†ÂïÜ',vendor));
    row.appendChild(wrapField('È°ûÂûã',type));
    row.appendChild(wrapField('ÂÇôË®ª',note));

    const actions=document.createElement('div'); actions.className='right';
    const btn = button('Êñ∞Â¢ûÂ†±ÂñÆ','primary',async ()=>{
      if(!date.value||!vendor.value||!currency.value){ alert('Ë´ãÂ°´ÂØ´ Êó•Êúü„ÄÅÂπ£Âà• Ëàá Âª†ÂïÜ'); return; }
      if (!slipVendors().includes(vendor.value.trim())) {
        alert('Ë´ãÂæûÁèæÊúâÁöÑÊ∞¥ÂñÆÂª†ÂïÜ‰∏≠ÈÅ∏ÊìáÔºåÊàñÂÖàÂà∞Ê∞¥ÂñÆÁÆ°ÁêÜÊñ∞Â¢ûË©≤Âª†ÂïÜ„ÄÇ');
        return;
      }
      const obj={id:uid(), date:date.value, currency:currency.value.toUpperCase().trim(), rate:parseNum(rate.value), amount:parseNum(amount.value), vendor:vendor.value.trim(), type:type.value, note:note.value.trim()};
      state.decls.push(obj); log('Êñ∞Â¢û','Â†±ÂñÆ',obj.id, JSON.stringify(obj));
      incrementDataVersion();
      await saveAppState(); render('decl');
    });
    actions.appendChild(btn);

    const batch = document.createElement('textarea'); batch.id='batchDeclInput';
    batch.placeholder = `ÊâπÈáèÊñ∞Â¢ûÔºöÊØèË°å„ÄåÊó•Êúü,Âπ£Âà•,ÂåØÁéá,ÈáëÈ°ç,Âª†ÂïÜ,È°ûÂûã(ÈÄ≤Âè£/Âá∫Âè£),ÂÇôË®ª„Äç
‰æãÂ¶ÇÔºö
2025-01-09,USD,31.50,8000,Acme Ltd,ÈÄ≤Âè£,1ÊúàÈÄ≤Âè£
2025-01-12,JPY,0.218,1200000,Acme Ltd,Âá∫Âè£,1ÊúàÂá∫Âè£`;
    const rowBatch = document.createElement('div'); rowBatch.className='row';
    rowBatch.appendChild(batch);
    const btnBatch = button('ÊâπÈáèÂåØÂÖ•Â†±ÂñÆ', 'warn', debounce(async ()=>{
      const lines = batch.value.split(/\n+/).map(s=>s.trim()).filter(Boolean);
      let ok=0, bad=0;
      const validSlipVendors = new Set(slipVendors());
      const addedDecls = [];
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const [d,c,r,a,v,t,n] = line.split(',').map(x=>x!=null?x.trim():x);
        if(d && c && v && (t==='ÈÄ≤Âè£'||t==='Âá∫Âè£') && validSlipVendors.has(v)){
          const obj={id:uid(), date:d, currency:c.toUpperCase(), rate:parseNum(r), amount:parseNum(a), vendor:v, type:t, note:n||''};
          state.decls.push(obj); addedDecls.push(obj); ok++;
        } else bad++;
        if (i % 50 === 0) await new Promise(resolve => setTimeout(resolve, 0)); // Yield to UI
      }
      if(addedDecls.length) log('ÊâπÈáèÊñ∞Â¢û','Â†±ÂñÆ','-', `${addedDecls.length} Á≠Ü`);
      incrementDataVersion();
      await saveAppState(); alert(`ÊàêÂäü ${ok} Á≠ÜÔºåÁï•ÈÅé ${bad} Á≠Ü (ÂèØËÉΩÂõ†Âª†ÂïÜÂêçÁ®±‰∏çÂú®Ê∞¥ÂñÆÁ¥ÄÈåÑ‰∏≠)„ÄÇ`);
      render('decl');
    }, 300));
    rowBatch.appendChild(btnBatch);

    newDeclForm.appendChild(row);
    newDeclForm.appendChild(actions); newDeclForm.appendChild(document.createElement('hr')); newDeclForm.appendChild(rowBatch);
    box.appendChild(newDeclForm);

    const list = document.createElement('div'); list.className='card';
    list.innerHTML = `<h2>Â†±ÂñÆÊ≠∑Âè≤</h2>`;
    const filter = document.createElement('div'); filter.className='row';
    const fVendor = document.createElement('input'); fVendor.placeholder='ÊêúÂ∞ãÂª†ÂïÜ'; fVendor.setAttribute('list','all-vendor-list'); fVendor.id='declFilterVendor';
    const fType = document.createElement('select'); fType.id='declFilterType'; fType.innerHTML='<option value="">ÂÖ®ÈÉ®</option><option>ÈÄ≤Âè£</option><option>Âá∫Âè£</option>';
    const fFrom = document.createElement('input'); fFrom.type='date'; fFrom.id='declFilterFrom';
    const fTo = document.createElement('input'); fTo.type='date'; fTo.id='declFilterTo';
    filter.appendChild(wrapField('Âª†ÂïÜ', fVendor));
    filter.appendChild(wrapField('È°ûÂûã', fType));
    filter.appendChild(wrapField('Ëµ∑', fFrom));
    filter.appendChild(wrapField('ËøÑ', fTo));
    list.appendChild(filter);

    const tbl = document.createElement('table');
    const thead = document.createElement('thead'); thead.innerHTML = `<tr><th>Êó•Êúü</th><th>È°ûÂûã</th><th>Âª†ÂïÜ</th><th class="small">Âπ£Âà•</th><th>ÂåØÁéá</th><th>Â§ñÂπ£ÈáëÈ°ç</th><th>Â∑≤ÂàÜÊî§</th><th>ÂàÜÊî§Ê∞¥ÂñÆ</th><th></th></tr>`; tbl.appendChild(thead);
    const tbody = document.createElement('tbody'); tbl.appendChild(tbody);

    const drawBody = ()=>{
      const filteredDecls = state.decls
        .filter(s=>!fVendor.value || (s.vendor||'').toLowerCase().includes(fVendor.value.toLowerCase()))
        .filter(s=>!fType.value || s.type===fType.value)
        .filter(s=>!fFrom.value || new Date(s.date)>=new Date(fFrom.value))
        .filter(s=>!fTo.value || new Date(s.date)<=new Date(fTo.value))
        .sort((a,b)=>new Date(b.date)-new Date(a.date));

      const rowCreator = (d) => {
        const tr=document.createElement('tr');
        tr.dataset.id = d.id;
        tr.dataset.action = 'select-decl'; // For delegation
        const totalAllocated = totalAllocatedForDecl(d.id);
        const slipTxt = totalAllocated > 0 ? `Â∑≤ÂàÜÊî§ (${format(totalAllocated)} ${d.currency||'Â§ñÂπ£'})` : 'Êú™ÂàÜÊî§';
        tr.innerHTML = `<td>${d.date}</td><td>${d.type}</td><td>${esc(d.vendor)}</td><td>${esc(d.currency||'N/A')}</td><td>${format(d.rate,4)}</td><td>${format(d.amount)}</td><td>${format(totalAllocated)}</td><td class="small">${slipTxt}</td>`;
        const td=document.createElement('td');
        const del=button('Âà™Èô§','danger',null); // Click handled by delegation
        del.dataset.action = 'delete-decl';
        del.dataset.declId = d.id;
        td.appendChild(del); tr.appendChild(td);
        return tr;
      };
      updateTable(tbody, filteredDecls, rowCreator, (d) => d.id);

      // Delegation for actions on decl list
      tbody.onclick = async (event) => {
        const target = event.target;
        const buttonAction = target.dataset.action;
        const declId = target.dataset.declId || target.closest('tr[data-id]')?.dataset.id;
        const decl = state.decls.find(d => d.id === declId);

        if (buttonAction === 'delete-decl') {
          if(confirm('Á¢∫ÂÆöÂà™Èô§Ôºü')){
            if (decl) {
                log('Âà™Èô§','Â†±ÂñÆ',decl.id, JSON.stringify(decl));
                state.decls=state.decls.filter(x=>x.id!==decl.id);
                state.allocs=state.allocs.filter(a=>a.declId!==decl.id);
                incrementDataVersion();
                await saveAppState(); render('decl');
            }
          }
        } else if (declId) { // Click on a row
          activeTab='fx'; selectedDeclForDetailId = declId; await render();
        }
      };
    };

    [fVendor,fType,fFrom,fTo].forEach(el=>el.oninput=debounce(drawBody, 300));
    list.appendChild(tbl); box.appendChild(list);

    const updatePanel = () => {
      fVendor.value = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); // Update filter from global
      drawBody();
    };
    return createPanel('decl', (el) => {
        el.appendChild(box);
    }, updatePanel);
  }

  // --- Panel Fx ---
  function createPanelFx(){
    const box = document.createElement('div'); box.className='split';

    const left = document.createElement('div'); left.className='grid';
    const p = document.createElement('div'); p.className='card'; p.innerHTML = '<h2>ÂåØÂ∑ÆÂàÜÊûê</h2>';

    const filter = document.createElement('div'); filter.className='row';
    const fVendor = document.createElement('input'); fVendor.placeholder='ÊêúÂ∞ãÂª†ÂïÜ'; fVendor.setAttribute('list','all-vendor-list'); fVendor.id='fxFilterVendor';
    const fType = document.createElement('select'); fType.id='fxFilterType'; fType.innerHTML='<option value="">ÂÖ®ÈÉ®</option><option>ÈÄ≤Âè£</option><option>Âá∫Âè£</option>';
    const fFrom = document.createElement('input'); fFrom.type='date'; fFrom.id='fxFilterFrom';
    const fTo = document.createElement('input'); fTo.type='date'; fTo.id='fxFilterTo';
    filter.appendChild(wrapField('Âª†ÂïÜ', fVendor));
    filter.appendChild(wrapField('È°ûÂûã', fType));
    filter.appendChild(wrapField('Ëµ∑', fFrom));
    filter.appendChild(wrapField('ËøÑ', fTo));
    p.appendChild(filter);

    const tbl = document.createElement('table');
    const thead = document.createElement('thead'); thead.innerHTML='<tr><th>Êó•Êúü</th><th>È°ûÂûã</th><th>Âª†ÂïÜ</th><th class="small">Âπ£Âà•</th><th>ÈáëÈ°ç(Â§ñÂπ£)</th><th>Â†±ÂñÆÂåØÁéá</th><th>ÂàÜÊî§Ê∞¥ÂñÆÊï∏</th><th>Â∑ÆÈ°ç</th><th>Âà§Êñ∑</th></tr>';
    tbl.appendChild(thead);
    const tbody = document.createElement('tbody'); tbl.appendChild(tbody);

    const sumBar = document.createElement('div'); sumBar.className='hint'; p.appendChild(sumBar);
    left.appendChild(p);

    const right = document.createElement('div'); right.className='card sticky';
    right.innerHTML='<h2>ÊòéÁ¥∞ / Ë®àÁÆóÈÅéÁ®ã</h2><div id="detail" class="small muted">ÈªûÊìäÂ∑¶ÂÅ¥‰ªª‰∏ÄÁ≠ÜË≥áÊñô‰ª•Êü•Áúã</div><div id="alloc" class="panel-content-spacing"></div>';
    box.appendChild(left); box.appendChild(right);

    const detailBox = right.querySelector('#detail');
    const allocBox = right.querySelector('#alloc');

    const drawBody = ()=>{
      const filtered = state.decls
        .filter(s=>!fVendor.value || (s.vendor||'').toLowerCase().includes(fVendor.value.toLowerCase()))
        .filter(s=>!fType.value || s.type===fType.value)
        .filter(s=>!fFrom.value || new Date(s.date)>=new Date(fFrom.value))
        .filter(s=>!fTo.value || new Date(s.date)<=new Date(fTo.value))
        .sort((a,b)=>new Date(b.date)-new Date(a.date));

      let sumGain=0, sumLoss=0;

      const rowCreator = (d) => {
        const r = computeFx(d);
        const tr=document.createElement('tr');
        tr.dataset.id = d.id;
        const numSlipsAllocated = state.allocs.filter(a=>a.declId===d.id).length;
        tr.innerHTML = `<td>${d.date}</td><td>${d.type}</td><td>${esc(d.vendor)}</td><td>${esc(d.currency||'N/A')}</td><td>${format(d.amount)}</td><td>${format(d.rate,4)}</td><td>${numSlipsAllocated || '-'}</td>`;
        const tdDiff = document.createElement('td');
        tdDiff.innerHTML = `<span class="mono" style="font-size:1.1rem; font-weight:700;">${format(Math.abs(r.diff))}</span>`; /* Highlighted */
        const tdLabel = document.createElement('td');
        const pill = document.createElement('span'); pill.className='pill '+(r.kind==='gain'?'gain':(r.kind==='loss'?'loss':'')); pill.textContent=r.label;
        tdLabel.appendChild(pill);
        tr.appendChild(tdDiff); tr.appendChild(tdLabel);
        if(r.kind==='gain') sumGain += Math.abs(r.diff);
        if(r.kind==='loss') sumLoss += Math.abs(r.diff);
        return tr;
      };

      updateTable(tbody, filtered, rowCreator, (d) => d.id);
      sumBar.textContent = `Á∏ΩÁõàÈ§òÔºö${format(sumGain)} ÔΩú Á∏ΩÊêçÂ§±Ôºö${format(sumLoss)}`;

      // Event delegation for table clicks
      tbody.onclick = (event) => {
          const clickedRow = event.target.closest('tr[data-id]');
          if (clickedRow) {
              const declId = clickedRow.dataset.id;
              const decl = state.decls.find(d => d.id === declId);
              if (decl) showDetail(decl);
          }
      };
    };

    const showDetail = async (d) => {
      // Remove 'is-selected' from previously selected row
      const prevSelectedRow = tbody.querySelector('tr.is-selected');
      if (prevSelectedRow) prevSelectedRow.classList.remove('is-selected');
      // Add 'is-selected' to current row
      const currentRow = tbody.querySelector(`tr[data-id="${d.id}"]`);
      if (currentRow) currentRow.classList.add('is-selected');

      const r = computeFx(d);
      if(!r){ detailBox.textContent='ÁôºÁîüÈåØË™§'; return; }
      detailBox.className='small';
      const currencySymbol = d.currency || 'Â§ñÂπ£';
      const slipInfo = state.allocs.filter(a=>a.declId===d.id).length > 0 ? `Â∑≤ÂàÜÊî§Â§öÁ≠ÜÊ∞¥ÂñÆ` : 'Â∞öÊú™ÂàÜÊî§';
      detailBox.innerHTML = `
      <div class="grid">
        <div><label>Â†±ÂñÆ</label><div class="mono">${d.date}ÔΩú${d.type}ÔΩú${esc(d.vendor)}ÔΩúÂ§ñÂπ£ ${currencySymbol} ${format(d.amount)}ÔΩúÂåØÁéá ${format(d.rate,4)}</div></div>
        <div><label>ÈÖçÂ∞çÊ∞¥ÂñÆ</label><div class="mono">${slipInfo}</div></div>
        <div><label>ÊáâÊî∂Êáâ‰ªòÂà§ÂÆö</label><div>${r.arap||'‚Äî'}</div></div>
        <div><label>Âà§Êñ∑</label><div><span class="pill ${r.kind==='gain'?'gain':(r.kind==='loss'?'loss':'')}">${r.label}</span></div></div>
        <div><label>Â∑ÆÈ°çÁµïÂ∞çÂÄºÔºàÊú¨Âπ£Ôºâ</label><div class="mono" style="font-size:1.2rem; font-weight:700;">${format(Math.abs(r.diff))}</div></div>
        <div><label>Ë®àÁÆóÈÅéÁ®ã</label><pre class="mono" style="white-space:pre-wrap;background:var(--panel-2);border:1px solid var(--border);padding:8px;border-radius:10px">${esc(r.steps||'‚Äî')}</pre></div>
      </div>`;

      // ÂàÜÊî§ÈÖçÁΩÆ UI
      const sameVendorSlips = state.slips.filter(s=>s.vendor===d.vendor && s.currency===d.currency).sort((a,b)=>new Date(a.date)-new Date(b.date));
      const currentAllocs = state.allocs.filter(a=>a.declId===d.id);
      const totalAvailDecl = declAvailable(d);
      allocBox.innerHTML = '';
      const wrap = document.createElement('div'); wrap.className='card';
      const title = document.createElement('h2'); title.textContent='ÈÉ®ÂàÜÊ≤ñÈä∑ / ÂàÜÊî§ÈÖçÁΩÆ'; wrap.appendChild(title);
      const hint = document.createElement('div'); hint.className='hint'; hint.textContent='ÂèØÁÇ∫Ê≠§Â†±ÂñÆÂàÜÈÖçÂ§öÁ≠ÜÊ∞¥ÂñÆËàáÂàÜÊî§Â§ñÂπ£ÈáëÈ°ç„ÄÇËã•Êú™Ë®≠ÂÆöÂàÜÊî§ÔºåÂâáÂåØÂ∑ÆÁµêÊûúÁÇ∫Èõ∂„ÄÇ'; wrap.appendChild(hint);

      const allocTbl = document.createElement('table');
      allocTbl.innerHTML = '<thead><tr><th>Ê∞¥ÂñÆÊó•Êúü</th><th>Âπ£Âà•</th><th>ÂåØÁéá</th><th>Ê∞¥ÂñÆÂèØÁî®(Â§ñÂπ£)</th><th>ÂàÜÊî§ÈáëÈ°ç(Â§ñÂπ£)</th><th></th></tr></thead>';
      const allocTbody = document.createElement('tbody');
      currentAllocs.forEach(a=>{
        const slip = state.slips.find(s=>s.id===a.slipId); if(!slip) return;
        const tr=document.createElement('tr');
        tr.dataset.id = a.id;
        tr.innerHTML = `<td>${slip.date}</td><td>${esc(slip.currency||'N/A')}</td><td>${format(slip.rate,4)}</td><td>${format(slipAvailable(slip) + parseNum(a.amount))}</td>`; // Show total available including current allocation
        const tdAmt = document.createElement('td');
        const inp = document.createElement('input'); inp.type='number'; inp.step='0.01'; inp.value=a.amount; inp.id = `alloc-${a.id}`;
        inp.onchange=debounce(async ()=>{
          const newAmount = parseNum(inp.value);
          const oldAmount = parseNum(a.amount);
          const max = slipAvailable(slip) + oldAmount; // Available including currently allocated amount
          if(newAmount < 0){ alert('ÈáëÈ°çÈúÄÂ§ßÊñº 0'); inp.value = oldAmount; return; }
          if(newAmount > max){ alert(`Ë∂ÖÈÅéÂèØÂàÜÈÖçÈáëÈ°çÔºåÊúÄÂ§ßÂèØÂàÜÈÖçÔºö${format(max)} ${currencySymbol}`); inp.value = oldAmount; return; }
          a.amount=newAmount;
          log('‰øÆÊîπÂàÜÊî§','ÂàÜÊî§',a.id, `Êñ∞ÈáëÈ°ç ${a.amount}`);
          incrementDataVersion();
          await saveAppState(); showDetail(d); // Re-render detail
        }, 300);
        tdAmt.appendChild(inp); tr.appendChild(tdAmt);
        const tdAct=document.createElement('td');
        const del=button('ÁßªÈô§','danger',async ()=>{
          state.allocs=state.allocs.filter(x=>x.id!==a.id); log('ÁßªÈô§ÂàÜÊî§','ÂàÜÊî§',a.id, JSON.stringify(a));
          incrementDataVersion();
          await saveAppState(); showDetail(d);
        });
        tdAct.appendChild(del); tr.appendChild(tdAct);
        allocTbody.appendChild(tr);
      });
      allocTbl.appendChild(allocTbody); wrap.appendChild(allocTbl);

      // Add new allocation controls
      const addRow = document.createElement('div'); addRow.className='row';
      const sel = document.createElement('select'); sel.id='allocSlipSelect';
      sel.innerHTML = sameVendorSlips.map(s=>`<option value="${s.id}">${s.date}ÔΩú${esc(s.currency||'N/A')}ÔΩúÂèØÁî®${format(slipAvailable(s))}ÔΩúÂåØÁéá${format(s.rate,4)}</option>`).join('');
      const addAmt = document.createElement('input'); addAmt.type='number'; addAmt.step='0.01'; addAmt.placeholder='ÂàÜÊî§Â§ñÂπ£ÈáëÈ°ç'; addAmt.id='allocAmountInput';
      addRow.appendChild(wrapField('ÈÅ∏ÊìáÊ∞¥ÂñÆ', sel));
      addRow.appendChild(wrapField('ÈáëÈ°ç(Â§ñÂπ£)', addAmt));
      const addBtn = button('Êñ∞Â¢ûÂàÜÊî§','primary',async ()=>{
        const slip = state.slips.find(s=>s.id===sel.value);
        if(!slip){ alert('Ë´ãÈÅ∏ÊìáÊ∞¥ÂñÆ'); return; }
        if(slip.currency !== d.currency){ alert('Ê∞¥ÂñÆËàáÂ†±ÂñÆÂπ£Âà•‰∏çÁ¨¶ÔºåÁÑ°Ê≥ïÂàÜÊî§„ÄÇ'); return; }
        const want = parseNum(addAmt.value);
        if(want<=0){ alert('ÈáëÈ°çÈúÄÂ§ßÊñº 0'); return; }
        const max = Math.min(slipAvailable(slip), declAvailable(d));
        if(want>max){ alert(`Ë∂ÖÈÅéÂèØÂàÜÈÖçÈáëÈ°çÔºåÊúÄÂ§ßÂèØÂàÜÈÖçÔºö${format(max)} ${currencySymbol}`); return; }
        const obj={id:uid(), declId:d.id, slipId:slip.id, amount:want};
        state.allocs.push(obj); log('Êñ∞Â¢ûÂàÜÊî§','ÂàÜÊî§',obj.id, JSON.stringify(obj));
        incrementDataVersion();
        await saveAppState(); showDetail(d);
      });
      addRow.appendChild(addBtn);
      wrap.appendChild(addRow);

      const info = document.createElement('div'); info.className='hint'; info.textContent = `Ê≠§Â†±ÂñÆÂâ©È§òÂèØÂàÜÈÖçÔºö${format(totalAvailDecl)} ${currencySymbol}`;
      wrap.appendChild(info);

      allocBox.appendChild(wrap);
    };

    [fVendor,fType,fFrom,fTo].forEach(el=>el.oninput=debounce(drawBody, 300));

    // helper: auto FIFO distribute within vendor context
    async function autoFIFO(vendor){
      const decls = state.decls.filter(d=>!vendor || d.vendor===vendor).sort((a,b)=>new Date(a.date)-new Date(b.date));
      const slips = state.slips.filter(s=>!vendor || s.vendor===vendor).sort((a,b)=>new Date(a.date)-new Date(b.date));
      // reset vendor-related allocs
      if(vendor){
        const allocsToRemove = new Set();
        state.decls.filter(d => d.vendor === vendor).forEach(d => {
          state.allocs.filter(a => a.declId === d.id).forEach(a => allocsToRemove.add(a.id));
        });
        state.allocs = state.allocs.filter(a => !allocsToRemove.has(a.id));
      }

      let si=0;
      let logs = [];
      for (let i = 0; i < decls.length; i++) {
        const d = decls[i];
        let need = declAvailable(d);
        while(need>0 && si<slips.length){
          const s = slips[si];
          if (s.currency !== d.currency) {
              si++;
              continue;
          }
          let avail = slipAvailable(s);
          if(avail<=0){ si++; continue; }
          const take = Math.min(need, avail);
          const obj={id:uid(), declId:d.id, slipId:s.id, amount:take};
          state.allocs.push(obj); need -= take; logs.push({action:'FIFOÂàÜÊî§',entity:'ÂàÜÊî§',entityId:obj.id, detail:`${d.id} ‚áÑ ${s.id} / ${take}`});
          if(slipAvailable(s)<=0) si++;
        }
        if (i % 50 === 0) await new Promise(resolve => setTimeout(resolve, 0)); // Yield
      }
      logs.forEach(l => log(l.action, l.entity, l.entityId, l.detail));
      incrementDataVersion();
      await saveAppState(); render();
    }

    // Wire quickbar buttons to current vendor
    const fifoBtn = document.getElementById('fifoAlloc');
    if(fifoBtn) fifoBtn.onclick = async ()=>{
        const v=(localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim();
        await autoFIFO(v||null);
    };
    const clearBtn = document.getElementById('clearAlloc');
    if(clearBtn) clearBtn.onclick = async ()=>{
        if(confirm('Á¢∫ÂÆöÊ∏ÖÁ©∫ÊâÄÊúâÂàÜÊî§ÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÊí§Èä∑„ÄÇ')){
            state.allocs=[]; log('Ê∏ÖÁ©∫','ÂàÜÊî§','-','ÂÖ®ÈÉ®Ê∏ÖÈô§');
            incrementDataVersion();
            await saveAppState(); render();
        }
    };

    const updatePanel = () => {
      fVendor.value = (localStorage.getItem(GLOBAL_VENDOR_KEY)||'').trim(); // Update filter from global
      drawBody();
      if (selectedDeclForDetailId) {
        const decl = state.decls.find(d => d.id === selectedDeclForDetailId);
        if (decl) showDetail(decl);
        selectedDeclForDetailId = null; // Clear after processing
      } else {
        // If no specific decl selected, clear detail view
        detailBox.innerHTML = '<div class="small muted">ÈªûÊìäÂ∑¶ÂÅ¥‰ªª‰∏ÄÁ≠ÜË≥áÊñô‰ª•Êü•Áúã</div>';
        allocBox.innerHTML = '';
        const prevSelectedRow = tbody.querySelector('tr.is-selected');
        if (prevSelectedRow) prevSelectedRow.classList.remove('is-selected');
      }
    };

    return createPanel('fx', (el) => {
        el.appendChild(box);
    }, updatePanel);
  }

  // --- Panel Audit ---
  function createPanelAudit(){
    const box=document.createElement('div'); box.className='card';
    box.innerHTML='<h2>Á®ΩÊ†∏ËªåË∑°</h2>';
    const hint=document.createElement('div'); hint.className='hint'; hint.textContent='Ë®òÈåÑÊñ∞Â¢û/Âà™Èô§/ÊâπÈáèÂåØÂÖ•/ÂàÜÊî§Á≠âÊìç‰ΩúÔºàÂÉÖÂ≠òÊú¨Ê©üÔºâ„ÄÇ'; box.appendChild(hint);
    const tbl=document.createElement('table');
    tbl.innerHTML='<thead><tr><th>ÊôÇÈñì</th><th>Âãï‰Ωú</th><th>È°ûÂûã</th><th>ID</th><th>Ë™™Êòé</th></tr></thead>';
    const tbody=document.createElement('tbody'); tbl.appendChild(tbody);
    box.appendChild(tbl);

    const drawBody = () => {
        const rowCreator = (a) => {
            const tr=document.createElement('tr');
            tr.dataset.id = a.id;
            const t = new Date(a.time).toLocaleString();
            tr.innerHTML=`<td>${t}</td><td>${esc(a.action)}</td><td>${esc(a.entity)}</td><td class="mono">${esc(a.entityId)}</td><td class="small">${esc(a.detail||'')}</td>`;
            return tr;
        };
        updateTable(tbody, state.audit, rowCreator, (a) => a.id);
    };

    return createPanel('audit', (el) => {
        el.appendChild(box);
    }, drawBody);
  }

  // --- Panel Data ---
  function createPanelData(){
    const box = document.createElement('div'); box.className='grid';

    const s = document.createElement('div'); s.className='card'; s.innerHTML='<h2>Á≥ªÁµ±Ë®≠ÂÆö</h2>';
    const mode = document.createElement('select'); mode.id='settingRateMode'; mode.innerHTML='<option value="mul">Êú¨Âπ£=Â§ñÂπ£√óÂåØÁéá</option><option value="div">Êú¨Âπ£=Â§ñÂπ£√∑ÂåØÁéá</option>';
    mode.value = state.settings.rateMode;
    mode.onchange = async ()=>{
      state.settings.rateMode=mode.value; log('‰øÆÊîπË®≠ÂÆö','Á≥ªÁµ±','rateMode', mode.value);
      incrementDataVersion();
      await saveAppState(); // No need to full render, just save
    };

    const defaultCurrencyInput = document.createElement('input'); defaultCurrencyInput.id='settingDefaultCurrency';
    defaultCurrencyInput.placeholder = 'È†êË®≠Â§ñÂπ£Âπ£Âà• (Â¶Ç: USD)';
    defaultCurrencyInput.value = state.settings.defaultCurrency;
    defaultCurrencyInput.onchange = async () => {
      state.settings.defaultCurrency = defaultCurrencyInput.value.toUpperCase().trim();
      log('‰øÆÊîπË®≠ÂÆö', 'Á≥ªÁµ±', 'defaultCurrency', defaultCurrencyInput.value);
      incrementDataVersion();
      await saveAppState(); render(); // Rerender to update 'new slip/decl' forms
    };

    const note = document.createElement('div'); note.className='hint';
    note.textContent = '‰∏ªÈ°åËá™ÂãïË™øÊï¥ÊñáÂ≠óÈ°èËâ≤ÔºõÂåØÁéáÊ®°Âºè‰æùÊÇ®ÂÖ¨Âè∏ÁøíÊÖ£Ë™øÊï¥„ÄÇ';

    s.appendChild(wrapField('ÂåØÁéáËß£ËÆÄ', mode));
    s.appendChild(wrapField('È†êË®≠Â§ñÂπ£Âπ£Âà•', defaultCurrencyInput));
    s.appendChild(note);

    const d = document.createElement('div'); d.className='card'; d.innerHTML='<h2>Ë≥áÊñôÂÇô‰ªΩ</h2>';
    const ta = document.createElement('textarea'); ta.id='dataBackupTextarea'; ta.value = JSON.stringify(state, null, 2);
    const row = document.createElement('div'); row.className='right';
    row.appendChild(button('ÈáçÊñ∞ËºâÂÖ•È†êË¶Ω','ghost',async ()=>{ ta.value = JSON.stringify(state,null,2); }));
    row.appendChild(button('ÂæûÊñáÂ≠óÂåØÂÖ•','warn',debounce(async ()=>{ try{ const obj=JSON.parse(ta.value); Object.assign(state,obj); log('ÂåØÂÖ•','Ë≥áÊñô','JSON',''); incrementDataVersion(); await saveAppState(); render(); }catch(e){ alert('JSON Ê†ºÂºèÈåØË™§'); } }, 300)));
    row.appendChild(button('Ê∏ÖÁ©∫ÊâÄÊúâË≥áÊñô','danger',async ()=>{ if(confirm('Ê≠§Âãï‰ΩúÁÑ°Ê≥ïÂæ©ÂéüÔºåÁ¢∫ÂÆöÔºü')){ await localforage.removeItem(storeKey); location.reload(); } }));

    d.appendChild(ta); d.appendChild(row);

    box.appendChild(s); box.appendChild(d);

    const updatePanel = () => {
        ta.value = JSON.stringify(state, null, 2);
    };

    return createPanel('data', (el) => {
        el.appendChild(box);
    }, updatePanel);
  }

  // Map of panel IDs to their creation functions
  const panelCreators = {
    slip: createPanelSlip,
    decl: createPanelDecl,
    fx: createPanelFx,
    audit: createPanelAudit,
    data: createPanelData,
  };

  // ------------------ Render Root ------------------
  async function render(forceTab = null){
    const targetTab = forceTab || activeTab;

    // Update global vendor datalists
    const globalVendorsList = document.getElementById('global-vendor-list');
    if(globalVendorsList){ globalVendorsList.innerHTML = allVendors().map(v=>`<option value="${v}"></option>`).join(''); }

    const allVendorsDatalist = document.getElementById('all-vendor-list');
    if(allVendorsDatalist){ allVendorsDatalist.innerHTML = allVendors().map(v=>`<option value="${v}"></option>`).join(''); }
    
    const slipVendorsDatalist = document.getElementById('slip-vendor-list');
    if(slipVendorsDatalist){ slipVendorsDatalist.innerHTML = slipVendors().map(v=>`<option value="${v}"></option>`).join(''); }

    // quickbar vendor list + default
    const gv = document.getElementById('globalVendor'); if(gv){
      const savedGV = localStorage.getItem(GLOBAL_VENDOR_KEY)||''; if(gv.value!==savedGV) gv.value=savedGV;
      gv.oninput = debounce(()=>{ localStorage.setItem(GLOBAL_VENDOR_KEY, gv.value.trim()); render(); }, 300);
    }

    // Set filters to global vendor
    const slipFilterVendor = document.getElementById('slipFilterVendor');
    if (slipFilterVendor) { slipFilterVendor.value = localStorage.getItem(GLOBAL_VENDOR_KEY) || ''; }
    const declFilterVendor = document.getElementById('declFilterVendor');
    if (declFilterVendor) { declFilterVendor.value = localStorage.getItem(GLOBAL_VENDOR_KEY) || ''; }
    const fxFilterVendor = document.getElementById('fxFilterVendor');
    if (fxFilterVendor) { fxFilterVendor.value = localStorage.getItem(GLOBAL_VENDOR_KEY) || ''; }


    renderTabs();

    if (!currentPanelInstance || currentPanelInstance.element.id !== `panel-${targetTab}`) {
      // Clear all existing panels with a fade out effect
      Array.from(elPanels.children).forEach(child => {
          child.classList.remove('is-active');
          setTimeout(() => child.remove(), 300); // Remove after transition
      });

      // Create new panel
      const newPanel = panelCreators[targetTab]();
      elPanels.appendChild(newPanel.element);
      currentPanelInstance = newPanel;

      // Force a reflow for transition to work
      void newPanel.element.offsetWidth;
      newPanel.element.classList.add('is-active');
      newPanel.update(); // Initial update for the new panel
    } else {
      // Update existing panel
      currentPanelInstance.update();
    }
  }

  // boot
  (async () => {
    const loaded = await loadAppState();
    if (loaded) {
      Object.assign(state, loaded);
    }
    // Ensure dataVersion is initialized for old states without it
    if (typeof state._dataVersion === 'undefined') {
        state._dataVersion = 0;
    }
    await render();
  })();
})();
</script>
</body>
</html>